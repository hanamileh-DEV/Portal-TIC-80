-- title:  Portal 3D
-- author: HanamileH, soxfox42
-- desc:   version 1.0 (powered by UniTIC v 1.3)
-- script: lua
-- saveid: portal3d_unitic

local debug = true

local css_content_path = "C:/Program files/Portal_tic80/cake/bin/css/content.lua"

local load_map_from_cart = false -- Loads the desired level and automatically skips the start screen
local map_bank_id = 1 -- Don't use 0 bank!!


--automatically loads the selected level (leave nil to load the default levels)
local load_lvl = {0, 2}

--[[
license:

Copyright 2022 HanamileH
Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated
documentation files (the "Software"), to deal in the
Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall
be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH
THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
]]


--- Compression routines - placed high as they may be used to compress various pieces of data in the source
local function bitwriter()
	return {
		cur = 0,
		bits = 0,
		output = {},

		write = function(self, val, bits)
			self.cur = self.cur | (val << self.bits)
			self.bits = self.bits + bits
			self:flush()
		end,
		flush = function(self)
			while self.bits >= 8 do
				self.output[#self.output + 1] = string.char(self.cur & 0xFF)
				self.bits = self.bits - 8
				self.cur = self.cur >> 8
			end
		end,
		finish = function(self)
			self.output[#self.output + 1] = string.char(self.cur)
			self.bits = 0
			self.cur = 0
			return table.concat(self.output)
		end,
	}
end

local function bitreader(data)
	return {
		data = data,
		pos = 1,
		bits = 0,

		read = function(self, bits)
			local value = 0
			local cur = 0

			if self.bits > 0 then
				if bits >= (8 - self.bits) then
					value = self:byte() >> self.bits
					cur = 8 - self.bits
					self.bits = 0
					self.pos = self.pos + 1
				else
					value = (self:byte() >> self.bits) & ((1 << bits) - 1)
					self.bits = self.bits + bits
					return value
				end
			end

			while (cur + 8) <= bits do
				value = value | (self:byte() << cur)
				cur = cur + 8
				self.pos = self.pos + 1
			end

			if cur < bits then
				value = value | (self:byte() & ((1 << bits - cur) - 1)) << cur
				self.bits = bits - cur
			end

			return value
		end,
		byte = function(self)
			return string.byte(self.data, self.pos, self.pos)
		end,
	}
end

local function compress(str)
	local writer = bitwriter()

	local codes = {}
	for i = 1, 256 do
		codes[string.char(i - 1)] = i
	end
	local count = 256
	local bits = 9
	local inc = 512

	local start = 1

	while start <= #str do
		for i = start, #str do
			local cur = str:sub(start, i)
			if i == #str then
				writer:write(codes[cur], bits)
				start = i + 1
				break
			end

			local nxt = str:sub(start, i + 1)
			if not codes[nxt] then
				writer:write(codes[cur], bits)
				count = count + 1
				codes[nxt] = count
				start = i + 1
				break
			end
		end

		if count == inc then
			inc = inc * 2
			bits = bits + 1
		end
	end

	writer:write(0, bits)
	return writer:finish()
end

local function decompress(str)
	local reader = bitreader(str)

	local codes = {}
	for i = 1, 256 do
		codes[i] = string.char(i - 1)
	end
	local bits = 9
	local inc = 512

	local result = {}
	local prev

	while true do
		local code = reader:read(bits)
		if code == 0 then
			return table.concat(result)
		end

		if codes[code] then
			result[#result + 1] = codes[code]
			if prev then
				codes[#codes + 1] = prev .. codes[code]:sub(1, 1)
			end
			prev = codes[code]
		else
			local new = prev .. prev:sub(1, 1)
			result[#result + 1] = new
			codes[#codes + 1] = new
			prev = new
		end

		if #codes == inc - 1 then
			inc = inc * 2
			bits = bits + 1
		end
	end
end

local F, R, min, max, abs = math.floor, math.random, math.min, math.max, math.abs
local pi2 = math.pi / 2

local dt = 1 --delta time
local col_gar = false --collectgarbage
local st={ --settings
m_s   =60, --mouse sensitivity
r_p   =true, --rendering portals
r_both=true, -- render both portals
h_q_p =false, --high quality portals
p     =true, --particles
d_t   =true, --dynamic textures
music =true,
sfx   =true,
pcm   =true,
dt_c  =false, --time delta constant
scroll=30,
vy    =40, --Y velocity
}

local save
function load_save()
	save={ --saving the game
		i=pmem(0)==0, --How for the first time the player went into the game
		lvl=pmem(0),
		lvl_pack=0, --ID set of levels
		st=pmem(1), --settings (All settings except the sensitivity of the mouse in binary form)
		--pmem(2) not used
		deaths=pmem(3), --the number of player deaths (in the main game)
		cur_t=pmem(4), --current time passing the main game
	}
end
load_save()

if save.st&2^31~=0 then
	st.r_p   =save.st&2^0 ~=0
	st.h_q_p =save.st&2^1 ~=0
	st.music =save.st&2^2 ~=0
	st.sfx   =save.st&2^3 ~=0
	st.r_both=save.st&2^4 ~=0
	st.p     =save.st&2^5 ~=0
	st.d_t   =save.st&2^6 ~=0
	st.pcm   =save.st&2^7 ~=0
	st.dt_c  =save.st&2^8 ~=0
end

local function save_settings()
	save.st=0
	if st.r_p    then save.st=save.st+2^0 end
	if st.h_q_p  then save.st=save.st+2^1 end
	if st.music  then save.st=save.st+2^2 end
	if st.sfx    then save.st=save.st+2^3 end
	if st.r_both then save.st=save.st+2^4 end
	if st.p      then save.st=save.st+2^5 end
	if st.d_t    then save.st=save.st+2^6 end
	if st.pcm    then save.st=save.st+2^7 end
	if st.dt_c   then save.st=save.st+2^8 end
	save.st=save.st+2^31
	pmem(1,save.st)
end

-- Replay support

-- Set to false to disable replay recording (but not playback)
local enable_replays = true
local replay = {
	mode = "off",
	data = "",
	index = 0,
}
if enable_replays then
	replay.mode = "rec"
end
-- Initial pmem data so replays can start from the same persistent state. (Except settings)
local initialsave = {}
for i = 0, 4 do
	initialsave[i + 1] = pmem(i)
end

local inputaddrs = {
	0xFF80,
	0xFF84,
	0xFF85,
	0xFF86,
	0xFF87,
	0xFF88,
	0xFF89,
	0xFF8A,
	0xFF8B,
}
local packstr = string.rep("B", #inputaddrs)

local function saveinput()
	local inputtab = {}
	for i, a in ipairs(inputaddrs) do
		inputtab[i] = peek(a)
	end
	local inputstr = string.pack(packstr, table.unpack(inputtab))
	replay.data = replay.data .. inputstr
end

local prev = {}
local keys = {}
local holds = {}

local _keyp = keyp
local function nextinput()
	prev = keys
	keys = {}
	if replay.index >= #replay.data // #inputaddrs then
		replay.mode = "off"
		keyp = _keyp
		return
	end
	local data = {string.unpack(packstr, replay.data, replay.index * #inputaddrs + 1)}
	replay.index = replay.index + 1
	for i, a in ipairs(inputaddrs) do
		poke(a, data[i])
	end

	local newholds = {}
	for i = 6, 9 do
		local k = data[i]
		if k ~= 0 then
			keys[k] = true
			newholds[k] = (holds[k] or -1) + 1
		end
	end
	holds = newholds
end

local function rpl_keyp(id, hold, period)
	hold = hold or 0
	period = period or 0
	local prevdown = false
	if hold == 0 or period == 0 or (holds[id] or 0) < hold then
		prevdown = prev[id]
	elseif period ~= 0 and holds[id] % period == 0 then
		prevdown = prev[id]
	end
	return not prevdown and key(id)
end

local function save_replay()
	local origmap = {}
	for i = 0x8000, 0xFF7F do
		origmap[i - 0x7FFF] = peek(i)
	end

	local uncompressed = string.pack("B", #initialsave)
	for _, v in ipairs(initialsave) do
		uncompressed = uncompressed .. string.pack("I4", v)
	end
	uncompressed = uncompressed .. replay.data
	local compressed = compress(uncompressed)
	if #compressed > 32636 then
		trace("replay too large", 2)
		return
	end
	poke(0x8000, 84)
	poke(0x8001, 65)
	poke(0x8002, 83)
	poke(0x8003, 33)
	for i = 1, #compressed do
		poke(0x8003 + i, string.byte(compressed, i, i))
	end
	sync(4, 1, true)

	for i = 0x8000, 0xFF7F do
		poke(i, origmap[i - 0x7FFF])
	end
end

local function load_replay()
	sync(4, 1)
	local magic = {84, 65, 83, 33}
	local found = true
	for i = 0, 3 do
		if peek(0x8000 + i) ~= magic[i + 1] then
			found = false
		end
	end
	if found then
		local data = {}
		for i = 0x8004, 0xFF7F do
			data[i - 0x8003] = string.char(peek(i))
		end
		local compressed = table.concat(data)
		local uncompressed = decompress(compressed)
		local pmemcount = string.unpack("B", uncompressed)
		for i = 0, pmemcount - 1 do
			local value = string.unpack("I4", uncompressed, 2 + 4 * i)
			pmem(i, value)
		end
		load_save()
		replay.data = uncompressed:sub(2 + 4 * pmemcount)
		replay.mode = "play"
		keyp = rpl_keyp
	end
end
--load_replay()

--camera
local cam = { x = 0, y = 0, z = 0, tx = 0, ty = 0}
--player
local plr = {
	speed = 4,
	--coordinates
	x = 0,
	y = 64,
	z = 0,
	--last coordinates
	lx = 0,
	ly = 64,
	lz = 0,
	--velocity
	vx = 0,
	vy = 0,
	vz = 0,
	--rotation
	tx = 0, --vertical
	ty = 0, --horizontal
	--cheats
	godmode = true,
	noclip =  false,
	--hp
	hp = 100 ,
	l_hp = 100, --last hp
	--different time counts
	hp_t = 0 ,
	hp_t_2 = 0,
	bf_t = 0, --blue field
	--stuff
	debug_text = 0,
	fps_graph = 1,
	holding = false,
	on_ground=true,
	death = false, --is the player dead
	pg_lvl = 2 --portal gun level
}

--engine settings:
local unitic = {
	version = 1.3, --engine version
	--drawing
	fov = 80, --lens distance to camera
	--system tables (dont touch)
	poly = {},
	obj  = {}, --objects
	p    = {}, --particles
	debug_p = {} --debug points
}

-- Please note than some objects do not have collisions. (coll={})
local model={
	{--cube (1)
	v={{ 23.9, 23.9, 23.9},{ 23.9,-23.9, 23.9},{ 23.9, 23.9,-23.9},{ 23.9,-23.9,-23.9},{-23.9, 23.9, 23.9},{-23.9,-23.9, 23.9},{-23.9, 23.9,-23.9},{-23.9,-23.9,-23.9},},
	f={
		 {5,3,1,uv={{96,256},{72,232},{72,256},-1},f=2},
		 {3,8,4,uv={{96,232},{72,256},{96,256},-1},f=2},
		 {7,6,8,uv={{96,232},{72,256},{96,256},-1},f=2},
		 {2,8,6,uv={{96,256},{72,232},{72,256},-1},f=2},
		 {1,4,2,uv={{96,232},{72,256},{96,256},-1},f=2},
		 {5,2,6,uv={{96,232},{72,256},{96,256},-1},f=2},
		 {5,7,3,uv={{96,256},{96,232},{72,232},-1},f=2},
		 {3,7,8,uv={{96,232},{72,232},{72,256},-1},f=2},
		 {7,5,6,uv={{96,232},{72,232},{72,256},-1},f=2},
		 {2,4,8,uv={{96,256},{96,232},{72,232},-1},f=2},
		 {1,3,4,uv={{96,232},{72,232},{72,256},-1},f=2},
		 {5,1,2,uv={{96,232},{72,232},{72,256},-1},f=2},
	},
	coll={{-24,-24,-24,24,24,24}} --collision cube {XYZ, XYZ}
	},
	{--cube companion (2)
	v={{ 23.9, 23.9, 23.9},{ 23.9,-23.9, 23.9},{ 23.9, 23.9,-23.9},{ 23.9,-23.9,-23.9},{-23.9, 23.9, 23.9},{-23.9,-23.9, 23.9},{-23.9, 23.9,-23.9},{-23.9,-23.9,-23.9},},
	f={
		 {5,3,1,uv={{96,256-24},{72,232-24},{72,256-24},-1},f=2},
		 {3,8,4,uv={{96,232-24},{72,256-24},{96,256-24},-1},f=2},
		 {7,6,8,uv={{96,232-24},{72,256-24},{96,256-24},-1},f=2},
		 {2,8,6,uv={{96,256-24},{72,232-24},{72,256-24},-1},f=2},
		 {1,4,2,uv={{96,232-24},{72,256-24},{96,256-24},-1},f=2},
		 {5,2,6,uv={{96,232-24},{72,256-24},{96,256-24},-1},f=2},
		 {5,7,3,uv={{96,256-24},{96,232-24},{72,232-24},-1},f=2},
		 {3,7,8,uv={{96,232-24},{72,232-24},{72,256-24},-1},f=2},
		 {7,5,6,uv={{96,232-24},{72,232-24},{72,256-24},-1},f=2},
		 {2,4,8,uv={{96,256-24},{96,232-24},{72,232-24},-1},f=2},
		 {1,3,4,uv={{96,232-24},{72,232-24},{72,256-24},-1},f=2},
		 {5,1,2,uv={{96,232-24},{72,232-24},{72,256-24},-1},f=2},
	},
	coll={{-24,-24,-24,24,24,24}}
	},
	{ --cube dispenser (3)
		v={
			{ 32, 31, 32},
			{ 32,-32, 32},
			{ 32, 31,-32},
			{ 32,-32,-32},
			{-32, 31, 32},
			{-32,-32, 32},
			{-32, 31,-32},
			{-32,-32,-32},
		},
		f={
			{5,3,1,uv={{120,232},{96, 208},{96 ,232},-1},f=3},
			{3,8,4,uv={{120,232},{96, 256},{120,256},-1},f=3},
			{7,6,8,uv={{120,232},{96, 256},{120,256},-1},f=3},
			{2,8,6,uv={{120,232},{96, 208},{96 ,232},-1},f=3},
			{1,4,2,uv={{120,232},{96, 256},{120,256},-1},f=3},
			{5,2,6,uv={{120,232},{96, 256},{120,256},-1},f=3},
			{5,7,3,uv={{120,232},{120,208},{96 ,208},-1},f=3},
			{3,7,8,uv={{120,232},{96, 232},{96 ,256},-1},f=3},
			{7,5,6,uv={{120,232},{96, 232},{96 ,256},-1},f=3},
			{2,4,8,uv={{120,232},{120,208},{96 ,208},-1},f=3},
			{1,3,4,uv={{120,232},{96, 232},{96 ,256},-1},f=3},
			{5,1,2,uv={{120,232},{96, 232},{96 ,256},-1},f=3}
		},
		coll={{-24,-24,-24,24,24,24}}
	},
	{--light bridge (-X) (4)
		v={{-48,4, 48},{ 48,4, 48},{-48,4,-48},{ 48,4,-48}},
		f={{2,1,4,uv={{0,232},{16,232},{0,248}},f=3},{1,4,3,uv={{16,232},{0,248},{16,248}},f=3}},
		coll={{-48,0,-48,48,0,48}}
	},
	{ --light bridge (+X) (5)
		v={{-48,4,-48},{ 48,4,-48},{-48,4, 48},{ 48,4, 48}},
		f={{1,2,3,uv={{0,232},{16,232},{0,248}},f=3},{2,3,4,uv={{16,232},{0,248},{16,248}},f=3}},
		coll={{-48,0,-48,48,0,48}}
	},
	{--light bridge (-Z) (6)
		v={{-48,4,-48},{-48,4, 48},{ 48,4,-48},{ 48,4, 48}},
		f={{2,1,4,uv={{0,232},{16,232},{0,248}},f=3},{1,4,3,uv={{16,232},{0,248},{16,248}},f=3}},
		coll={{-48,0,-48,48,0,48}}
	},
	{--light bridge (+Z) (7)
		v={{ 48,4, 48},{ 48,4,-48},{-48,4, 48},{-48,4,-48}},
		f={{2,1,4,uv={{0,232},{16,232},{0,248}},f=3},{1,4,3,uv={{16,232},{0,248},{16,248}},f=3}},
		coll={{-48,0,-48,48,0,48}}
	},
	{--button -X (8)
		v={
			{6   ,46  ,6   },
			{6   ,0   ,6   },
			{6   ,46  ,-6  },
			{6   ,0   ,-6  },
			{-6  ,51.2,6   },
			{-6  ,0   ,6   },
			{-6  ,51.2,-6  },
			{-6  ,0   ,-6  },
			{-4.5,51.2,-4.5},
			{-4.5,51.2,4.5 },
			{5.5 ,47.2,-4.5},
			{5.5 ,47.2,4.5 },
		},
		f={
			{5 ,3 ,1 ,uv={{125,136},{120,133},{120,136},-1},f=2},
			{3 ,8 ,4 ,uv={{128,128},{125,132},{128,132},-1},f=2},
			{7 ,6 ,8 ,uv={{128,128},{125,132},{128,132},-1},f=2},
			{1 ,4 ,2 ,uv={{125,132},{128,128},{125,128},-1},f=2},
			{6 ,1 ,2 ,uv={{128,132},{125,128},{125,132},-1},f=2},
			{10,11,12,uv={{125,133},{120,128},{120,133},-1},f=3},
			{5 ,7 ,3 ,uv={{125,136},{125,133},{120,133},-1},f=2},
			{3 ,7 ,8 ,uv={{128,128},{125,128},{125,132},-1},f=2},
			{7 ,5 ,6 ,uv={{128,128},{125,128},{125,132},-1},f=2},
			{1 ,3 ,4 ,uv={{125,132},{128,132},{128,128},-1},f=2},
			{6 ,5 ,1 ,uv={{128,132},{128,128},{125,128},-1},f=2},
			{10,9 ,11,uv={{125,133},{125,128},{120,128},-1},f=3},
		},
		coll={{-6,0,-6,6,52,6}}
	},
	{--button +X (9)
		v={
			{-6   ,46  ,-6  },
			{-6   ,0   ,-6  },
			{-6   ,46  ,6   },
			{-6   ,0   ,6   },
			{6    ,51.2,-6  },
			{6    ,0   ,-6  },
			{6    ,51.2,6   },
			{6    ,0   ,6   },
			{4.5  ,51.2,4.5 },
			{4.5  ,51.2,-4.5},
			{-5.5 ,47.2,4.5 },
			{-5.5 ,47.2,-4.5},
		},
		f={
			{5 ,3 ,1 ,uv={{125,136},{120,133},{120,136},-1},f=2},
			{3 ,8 ,4 ,uv={{128,128},{125,132},{128,132},-1},f=2},
			{7 ,6 ,8 ,uv={{128,128},{125,132},{128,132},-1},f=2},
			{1 ,4 ,2 ,uv={{125,132},{128,128},{125,128},-1},f=2},
			{6 ,1 ,2 ,uv={{128,132},{125,128},{125,132},-1},f=2},
			{10,11,12,uv={{125,133},{120,128},{120,133},-1},f=3},
			{5 ,7 ,3 ,uv={{125,136},{125,133},{120,133},-1},f=2},
			{3 ,7 ,8 ,uv={{128,128},{125,128},{125,132},-1},f=2},
			{7 ,5 ,6 ,uv={{128,128},{125,128},{125,132},-1},f=2},
			{1 ,3 ,4 ,uv={{125,132},{128,132},{128,128},-1},f=2},
			{6 ,5 ,1 ,uv={{128,132},{128,128},{125,128},-1},f=2},
			{10,9 ,11,uv={{125,133},{125,128},{120,128},-1},f=3},
		},
		coll={{-6,0,-6,6,52,6}}
	},
	{--button -Z (10)
		v={
			{-6  ,46  ,6   },
			{-6  ,0   ,6   },
			{6   ,46  ,6   },
			{6   ,0   ,6   },
			{-6  ,51.2,-6  },
			{-6  ,0   ,-6  },
			{6   ,51.2,-6  },
			{6   ,0   ,-6  },
			{4.5 ,51.2,-4.5},
			{-4.5,51.2,-4.5},
			{4.5 ,47.2,5.5 },
			{-4.5,47.2,5.5 },
		},
		f={
			{5 ,3 ,1 ,uv={{125,136},{120,133},{120,136},-1},f=2},
			{3 ,8 ,4 ,uv={{128,128},{125,132},{128,132},-1},f=2},
			{7 ,6 ,8 ,uv={{128,128},{125,132},{128,132},-1},f=2},
			{1 ,4 ,2 ,uv={{125,132},{128,128},{125,128},-1},f=2},
			{6 ,1 ,2 ,uv={{128,132},{125,128},{125,132},-1},f=2},
			{10,11,12,uv={{125,133},{120,128},{120,133},-1},f=3},
			{5 ,7 ,3 ,uv={{125,136},{125,133},{120,133},-1},f=2},
			{3 ,7 ,8 ,uv={{128,128},{125,128},{125,132},-1},f=2},
			{7 ,5 ,6 ,uv={{128,128},{125,128},{125,132},-1},f=2},
			{1 ,3 ,4 ,uv={{125,132},{128,132},{128,128},-1},f=2},
			{6 ,5 ,1 ,uv={{128,132},{128,128},{125,128},-1},f=2},
			{10,9 ,11,uv={{125,133},{125,128},{120,128},-1},f=3},
		},
		coll={{-6,0,-6,6,52,6}}
	},
	{--button +Z (11)
		v={
			{6   ,46  ,-6   },
			{6   ,0   ,-6   },
			{-6  ,46  ,-6   },
			{-6  ,0   ,-6   },
			{6   ,51.2,6    },
			{6   ,0   ,6    },
			{-6  ,51.2,6    },
			{-6  ,0   ,6    },
			{-4.5,51.2,4.5  },
			{4.5 ,51.2,4.5  },
			{-4.5,47.2,-5.5 },
			{4.5 ,47.2,-5.5 },
		},
		f={
			{5 ,3 ,1 ,uv={{125,136},{120,133},{120,136},-1},f=2},
			{3 ,8 ,4 ,uv={{128,128},{125,132},{128,132},-1},f=2},
			{7 ,6 ,8 ,uv={{128,128},{125,132},{128,132},-1},f=2},
			{1 ,4 ,2 ,uv={{125,132},{128,128},{125,128},-1},f=2},
			{6 ,1 ,2 ,uv={{128,132},{125,128},{125,132},-1},f=2},
			{10,11,12,uv={{125,133},{120,128},{120,133},-1},f=3},
			{5 ,7 ,3 ,uv={{125,136},{125,133},{120,133},-1},f=2},
			{3 ,7 ,8 ,uv={{128,128},{125,128},{125,132},-1},f=2},
			{7 ,5 ,6 ,uv={{128,128},{125,128},{125,132},-1},f=2},
			{1 ,3 ,4 ,uv={{125,132},{128,132},{128,128},-1},f=2},
			{6 ,5 ,1 ,uv={{128,132},{128,128},{125,128},-1},f=2},
			{10,9 ,11,uv={{125,133},{125,128},{120,128},-1},f=3},
		},
		coll={{-6,0,-6,6,52,6}}
	},
	{ --turret -X (12)
		v={
			 {7,0  ,0},
			 {28,27 ,0},
			 {7,27 ,0},
			 {28,0  ,0},
			 {-24,0  ,-19},
			 {-4,27 ,-8},
			 {-24,27 ,-19},
			 {-4,0  ,-8},
			 {-24,0  ,18},
			 {-4,27 ,7},
			 {-24,27 ,18},
			 {-4,0  ,7},
			 {12,41 ,-12},
			 {8,12 ,-9},
			 {-9,67 ,-9},
			 {-12,41 ,-12},
			 {-9,12 ,-9},
			 {0,76 ,0},
			 {-9,67 ,8},
			 {-12,41 ,12},
			 {-9,12 ,8},
			 {8,67 ,8},
			 {12,41 ,12},
			 {8,12 ,8},
			 {8,67 ,-9},
			 {-12,37 ,0},
			 {-12,42 ,4},
			 {-12,42 ,-5},
			 {-12,47 ,0},
			 {12,41 ,-22},
			 {8,12 ,-19},
			 {-9,67 ,-19},
			 {-12,41 ,-22},
			 {-9,12 ,-19},
			 {8,67 ,-19},
			 {-9,67 ,18},
			 {-12,41 ,22},
			 {-9,12 ,18},
			 {8,67 ,18},
			 {12,41 ,22},
			 {8,12 ,18},
			 {0,28 ,20},
			 {0,55 ,20},
			 {0,28 ,-20},
			 {0,55 ,-20},
			 {0,43 ,-22},
			 {0,43 ,21},
		},
		f={
			{3 ,4 ,1 ,uv={{124,138},{120,144},{124,144},-1},f=3},
			{7 ,8 ,5 ,uv={{120,138},{124,144},{120,144},-1},f=3},
			{11,12,9 ,uv={{120,138},{124,144},{120,144},-1},f=3},
			{45,47,46,uv={{124,138},{123,136},{123,138},-1},f=3},
			{44,47,42,uv={{122,138},{123,136},{122,136},-1},f=3},
			{3 ,2 ,4 ,uv={{124,138},{120,138},{120,144},-1},f=3},
			{7 ,6 ,8 ,uv={{120,138},{124,138},{124,144},-1},f=3},
			{11,10,12,uv={{120,138},{124,138},{124,144},-1},f=3},
			{45,43,47,uv={{124,138},{124,136},{123,136},-1},f=3},
			{44,46,47,uv={{122,138},{123,138},{123,136},-1},f=3},
			{25,18,15,uv={{126,138},{128,138},{128,136},-1},f=2},
			{25,16,13,uv={{125,140},{125,140},{126,139},-1},f=2},
			{13,17,14,uv={{125,140},{125,140},{126,139},-1},f=2},
			{15,20,16,uv={{124,138},{124,139},{125,138},-1},f=2},
			{17,20,21,uv={{124,138},{124,139},{125,138},-1},f=2},
			{15,18,19,uv={{124,138},{124,139},{125,138},-1},f=2},
			{20,22,23,uv={{125,140},{125,140},{126,139},-1},f=2},
			{21,23,24,uv={{125,140},{125,140},{126,139},-1},f=2},
			{19,18,22,uv={{124,138},{124,139},{125,138},-1},f=2},
			{22,18,25,uv={{124,138},{124,139},{125,138},-1},f=2},
			{22,13,23,uv={{124,138},{124,139},{125,138},-1},f=2},
			{23,14,24,uv={{124,138},{124,139},{125,138},-1},f=2},
			{25,15,16,uv={{125,140},{125,140},{126,139},-1},f=2},
			{13,16,17,uv={{125,140},{125,140},{126,139},-1},f=2},
			{15,19,20,uv={{124,138},{124,139},{125,138},-1},f=2},
			{17,16,20,uv={{124,138},{124,139},{125,138},-1},f=2},
			{20,19,22,uv={{125,140},{125,140},{126,139},-1},f=2},
			{21,20,23,uv={{125,140},{125,140},{126,139},-1},f=2},
			{22,25,13,uv={{124,138},{124,139},{125,138},-1},f=2},
			{23,13,14,uv={{124,138},{124,139},{125,138},-1},f=2},
			{35,33,30,uv={{128,136},{124,140},{128,140},-1},f=3},
			{30,34,31,uv={{128,143},{124,140},{124,143},-1},f=3},
			{36,40,37,uv={{128,136},{124,140},{128,140},-1},f=3},
			{38,40,41,uv={{128,143},{124,140},{124,143},-1},f=3},
			{35,32,33,uv={{128,136},{124,136},{124,140},-1},f=3},
			{30,33,34,uv={{128,143},{128,140},{124,140},-1},f=3},
			{36,39,40,uv={{128,136},{124,136},{124,140},-1},f=3},
			{38,37,40,uv={{128,143},{128,140},{124,140},-1},f=3},
			{29,26,28,uv={{122,138},{120,136},{120,138},-1},f=2},
			{29,27,26,uv={{122,138},{122,136},{120,136},-1},f=2},
		},
		coll={{-12,0,-12,12,69,12}}
	},
	{ --turret +X (13)
		v={
			 {-7,0,0},
			 {-28,27,0},
			 {-7,27,0},
			 {-28,0,0},
			 {24,0,19},
			 {4,27,8},
			 {24,27,19},
			 {4,0,8},
			 {24,0,-18},
			 {4,27,-7},
			 {24,27,-18},
			 {4,0,-7},
			 {-12,41,12},
			 {-8,12,9},
			 {9,67,9},
			 {12,41,12},
			 {9,12,9},
			 {0,76,0},
			 {9,67,-8},
			 {12,41,-12},
			 {9,12,-8},
			 {-8,67,-8},
			 {-12,41,-12},
			 {-8,12,-8},
			 {-8,67,9},
			 {12,37,0},
			 {12,42,-4},
			 {12,42,5},
			 {12,47,0},
			 {-12,41,22},
			 {-8,12,19},
			 {9,67,19},
			 {12,41,22},
			 {9,12,19},
			 {-8,67,19},
			 {9,67,-18},
			 {12,41,-22},
			 {9,12,-18},
			 {-8,67,-18},
			 {-12,41,-22},
			 {-8,12,-18},
			 {0,28,-20},
			 {0,55,-20},
			 {0,28,20},
			 {0,55,20},
			 {0,43,22},
			 {0,43,-21},
		},
		f={
			{3 ,4 ,1 ,uv={{124,138},{120,144},{124,144},-1},f=3},
			{7 ,8 ,5 ,uv={{120,138},{124,144},{120,144},-1},f=3},
			{11,12,9 ,uv={{120,138},{124,144},{120,144},-1},f=3},
			{45,47,46,uv={{124,138},{123,136},{123,138},-1},f=3},
			{44,47,42,uv={{122,138},{123,136},{122,136},-1},f=3},
			{3 ,2 ,4 ,uv={{124,138},{120,138},{120,144},-1},f=3},
			{7 ,6 ,8 ,uv={{120,138},{124,138},{124,144},-1},f=3},
			{11,10,12,uv={{120,138},{124,138},{124,144},-1},f=3},
			{45,43,47,uv={{124,138},{124,136},{123,136},-1},f=3},
			{44,46,47,uv={{122,138},{123,138},{123,136},-1},f=3},
			{25,18,15,uv={{126,138},{128,138},{128,136},-1},f=2},
			{25,16,13,uv={{125,140},{125,140},{126,139},-1},f=2},
			{13,17,14,uv={{125,140},{125,140},{126,139},-1},f=2},
			{15,20,16,uv={{124,138},{124,139},{125,138},-1},f=2},
			{17,20,21,uv={{124,138},{124,139},{125,138},-1},f=2},
			{15,18,19,uv={{124,138},{124,139},{125,138},-1},f=2},
			{20,22,23,uv={{125,140},{125,140},{126,139},-1},f=2},
			{21,23,24,uv={{125,140},{125,140},{126,139},-1},f=2},
			{19,18,22,uv={{124,138},{124,139},{125,138},-1},f=2},
			{22,18,25,uv={{124,138},{124,139},{125,138},-1},f=2},
			{22,13,23,uv={{124,138},{124,139},{125,138},-1},f=2},
			{23,14,24,uv={{124,138},{124,139},{125,138},-1},f=2},
			{25,15,16,uv={{125,140},{125,140},{126,139},-1},f=2},
			{13,16,17,uv={{125,140},{125,140},{126,139},-1},f=2},
			{15,19,20,uv={{124,138},{124,139},{125,138},-1},f=2},
			{17,16,20,uv={{124,138},{124,139},{125,138},-1},f=2},
			{20,19,22,uv={{125,140},{125,140},{126,139},-1},f=2},
			{21,20,23,uv={{125,140},{125,140},{126,139},-1},f=2},
			{22,25,13,uv={{124,138},{124,139},{125,138},-1},f=2},
			{23,13,14,uv={{124,138},{124,139},{125,138},-1},f=2},
			{35,33,30,uv={{128,136},{124,140},{128,140},-1},f=3},
			{30,34,31,uv={{128,143},{124,140},{124,143},-1},f=3},
			{36,40,37,uv={{128,136},{124,140},{128,140},-1},f=3},
			{38,40,41,uv={{128,143},{124,140},{124,143},-1},f=3},
			{35,32,33,uv={{128,136},{124,136},{124,140},-1},f=3},
			{30,33,34,uv={{128,143},{128,140},{124,140},-1},f=3},
			{36,39,40,uv={{128,136},{124,136},{124,140},-1},f=3},
			{38,37,40,uv={{128,143},{128,140},{124,140},-1},f=3},
			{29,26,28,uv={{122,138},{120,136},{120,138},-1},f=2},
			{29,27,26,uv={{122,138},{122,136},{120,136},-1},f=2},
		},
		coll={{-12,0,-12,12,69,12}}
	},
	{ --turret -Z (14)
		v={
			{0  ,0  ,7},
			{0  ,27 ,28},
			{0  ,27 ,7},
			{0  ,0  ,28},
			{19 ,0  ,-24},
			{8  ,27 ,-4},
			{19 ,27 ,-24},
			{8  ,0  ,-4},
			{-18,0  ,-24},
			{-7 ,27 ,-4},
			{-18,27 ,-24},
			{-7 ,0  ,-4},
			{12 ,41 ,12},
			{9  ,12 ,8},
			{9  ,67 ,-9},
			{12 ,41 ,-12},
			{9  ,12 ,-9},
			{0  ,76 ,0},
			{-8 ,67 ,-9},
			{-12,41 ,-12},
			{-8 ,12 ,-9},
			{-8 ,67 ,8},
			{-12,41 ,12},
			{-8 ,12 ,8},
			{9  ,67 ,8},
			{0  ,37 ,-12},
			{-4 ,42 ,-12},
			{5  ,42 ,-12},
			{0  ,47 ,-12},
			{22 ,41 ,12},
			{19 ,12 ,8},
			{19 ,67 ,-9},
			{22 ,41 ,-12},
			{19 ,12 ,-9},
			{19 ,67 ,8},
			{-18,67 ,-9},
			{-22,41 ,-12},
			{-18,12 ,-9},
			{-18,67 ,8},
			{-22,41 ,12},
			{-18,12 ,8},
			{-20,28 ,0},
			{-20,55 ,0},
			{20 ,28 ,0},
			{20 ,55 ,0},
			{22 ,43 ,0},
			{-21,43 ,0},
		},
		f={
			{3 ,4 ,1 ,uv={{124,138},{120,144},{124,144},-1},f=3},
			{7 ,8 ,5 ,uv={{120,138},{124,144},{120,144},-1},f=3},
			{11,12,9 ,uv={{120,138},{124,144},{120,144},-1},f=3},
			{45,47,46,uv={{124,138},{123,136},{123,138},-1},f=3},
			{44,47,42,uv={{122,138},{123,136},{122,136},-1},f=3},
			{3 ,2 ,4 ,uv={{124,138},{120,138},{120,144},-1},f=3},
			{7 ,6 ,8 ,uv={{120,138},{124,138},{124,144},-1},f=3},
			{11,10,12,uv={{120,138},{124,138},{124,144},-1},f=3},
			{45,43,47,uv={{124,138},{124,136},{123,136},-1},f=3},
			{44,46,47,uv={{122,138},{123,138},{123,136},-1},f=3},
			{25,18,15,uv={{126,138},{128,138},{128,136},-1},f=2},
			{25,16,13,uv={{125,140},{125,140},{126,139},-1},f=2},
			{13,17,14,uv={{125,140},{125,140},{126,139},-1},f=2},
			{15,20,16,uv={{124,138},{124,139},{125,138},-1},f=2},
			{17,20,21,uv={{124,138},{124,139},{125,138},-1},f=2},
			{15,18,19,uv={{124,138},{124,139},{125,138},-1},f=2},
			{20,22,23,uv={{125,140},{125,140},{126,139},-1},f=2},
			{21,23,24,uv={{125,140},{125,140},{126,139},-1},f=2},
			{19,18,22,uv={{124,138},{124,139},{125,138},-1},f=2},
			{22,18,25,uv={{124,138},{124,139},{125,138},-1},f=2},
			{22,13,23,uv={{124,138},{124,139},{125,138},-1},f=2},
			{23,14,24,uv={{124,138},{124,139},{125,138},-1},f=2},
			{25,15,16,uv={{125,140},{125,140},{126,139},-1},f=2},
			{13,16,17,uv={{125,140},{125,140},{126,139},-1},f=2},
			{15,19,20,uv={{124,138},{124,139},{125,138},-1},f=2},
			{17,16,20,uv={{124,138},{124,139},{125,138},-1},f=2},
			{20,19,22,uv={{125,140},{125,140},{126,139},-1},f=2},
			{21,20,23,uv={{125,140},{125,140},{126,139},-1},f=2},
			{22,25,13,uv={{124,138},{124,139},{125,138},-1},f=2},
			{23,13,14,uv={{124,138},{124,139},{125,138},-1},f=2},
			{35,33,30,uv={{128,136},{124,140},{128,140},-1},f=3},
			{30,34,31,uv={{128,143},{124,140},{124,143},-1},f=3},
			{36,40,37,uv={{128,136},{124,140},{128,140},-1},f=3},
			{38,40,41,uv={{128,143},{124,140},{124,143},-1},f=3},
			{35,32,33,uv={{128,136},{124,136},{124,140},-1},f=3},
			{30,33,34,uv={{128,143},{128,140},{124,140},-1},f=3},
			{36,39,40,uv={{128,136},{124,136},{124,140},-1},f=3},
			{38,37,40,uv={{128,143},{128,140},{124,140},-1},f=3},
			{29,26,28,uv={{122,138},{120,136},{120,138},-1},f=2},
			{29,27,26,uv={{122,138},{122,136},{120,136},-1},f=2},
		},
		coll={{-12,0,-12,12,69,12}}
	},
	{ --turret +Z (15)
		v={
			 {0,0  ,-7 },
			 {0,27 ,-28},
			 {0,27 ,-7 },
			 {0,0  ,-28},
			 {-19,0  ,24 },
			 {-8,27 ,4  },
			 {-19,27 ,24 },
			 {-8,0  ,4  },
			 {18,0  ,24 },
			 {7,27 ,4  },
			 {18,27 ,24 },
			 {7,0  ,4  },
			 {-12,41 ,-12},
			 {-9,12 ,-8 },
			 {-9,67 ,9  },
			 {-12,41 ,12 },
			 {-9,12 ,9  },
			 {0,76 ,0  },
			 {8,67 ,9  },
			 {12,41 ,12 },
			 {8,12 ,9  },
			 {8,67 ,-8 },
			 {12,41 ,-12},
			 {8,12 ,-8 },
			 {-9,67 ,-8 },
			 {0,37 ,12 },
			 {4,42 ,12 },
			 {-5,42 ,12 },
			 {0,47 ,12 },
			 {-22,41 ,-12},
			 {-19,12 ,-8 },
			 {-19,67 ,9  },
			 {-22,41 ,12 },
			 {-19,12 ,9  },
			 {-19,67 ,-8 },
			 {18,67 ,9  },
			 {22,41 ,12 },
			 {18,12 ,9  },
			 {18,67 ,-8 },
			 {22,41 ,-12},
			 {18,12 ,-8 },
			 {20,28 ,0  },
			 {20,55 ,0  },
			 {-20,28 ,0  },
			 {-20,55 ,0  },
			 {-22,43 ,0  },
			 {21,43 ,0  },
		},
		f={
			{3 ,4 ,1 ,uv={{124,138},{120,144},{124,144},-1},f=3},
			{7 ,8 ,5 ,uv={{120,138},{124,144},{120,144},-1},f=3},
			{11,12,9 ,uv={{120,138},{124,144},{120,144},-1},f=3},
			{45,47,46,uv={{124,138},{123,136},{123,138},-1},f=3},
			{44,47,42,uv={{122,138},{123,136},{122,136},-1},f=3},
			{3 ,2 ,4 ,uv={{124,138},{120,138},{120,144},-1},f=3},
			{7 ,6 ,8 ,uv={{120,138},{124,138},{124,144},-1},f=3},
			{11,10,12,uv={{120,138},{124,138},{124,144},-1},f=3},
			{45,43,47,uv={{124,138},{124,136},{123,136},-1},f=3},
			{44,46,47,uv={{122,138},{123,138},{123,136},-1},f=3},
			{25,18,15,uv={{126,138},{128,138},{128,136},-1},f=2},
			{25,16,13,uv={{125,140},{125,140},{126,139},-1},f=2},
			{13,17,14,uv={{125,140},{125,140},{126,139},-1},f=2},
			{15,20,16,uv={{124,138},{124,139},{125,138},-1},f=2},
			{17,20,21,uv={{124,138},{124,139},{125,138},-1},f=2},
			{15,18,19,uv={{124,138},{124,139},{125,138},-1},f=2},
			{20,22,23,uv={{125,140},{125,140},{126,139},-1},f=2},
			{21,23,24,uv={{125,140},{125,140},{126,139},-1},f=2},
			{19,18,22,uv={{124,138},{124,139},{125,138},-1},f=2},
			{22,18,25,uv={{124,138},{124,139},{125,138},-1},f=2},
			{22,13,23,uv={{124,138},{124,139},{125,138},-1},f=2},
			{23,14,24,uv={{124,138},{124,139},{125,138},-1},f=2},
			{25,15,16,uv={{125,140},{125,140},{126,139},-1},f=2},
			{13,16,17,uv={{125,140},{125,140},{126,139},-1},f=2},
			{15,19,20,uv={{124,138},{124,139},{125,138},-1},f=2},
			{17,16,20,uv={{124,138},{124,139},{125,138},-1},f=2},
			{20,19,22,uv={{125,140},{125,140},{126,139},-1},f=2},
			{21,20,23,uv={{125,140},{125,140},{126,139},-1},f=2},
			{22,25,13,uv={{124,138},{124,139},{125,138},-1},f=2},
			{23,13,14,uv={{124,138},{124,139},{125,138},-1},f=2},
			{35,33,30,uv={{128,136},{124,140},{128,140},-1},f=3},
			{30,34,31,uv={{128,143},{124,140},{124,143},-1},f=3},
			{36,40,37,uv={{128,136},{124,140},{128,140},-1},f=3},
			{38,40,41,uv={{128,143},{124,140},{124,143},-1},f=3},
			{35,32,33,uv={{128,136},{124,136},{124,140},-1},f=3},
			{30,33,34,uv={{128,143},{128,140},{124,140},-1},f=3},
			{36,39,40,uv={{128,136},{124,136},{124,140},-1},f=3},
			{38,37,40,uv={{128,143},{128,140},{124,140},-1},f=3},
			{29,26,28,uv={{122,138},{120,136},{120,138},-1},f=2},
			{29,27,26,uv={{122,138},{122,136},{120,136},-1},f=2},
		},
		coll={{-12,0,-12,12,69,12}}
	},
	{ --Floor button (16)
		v={
			 {-32.4,4  ,-32.4},
			 {-36.9,0  ,-36.9},
			 {-32.4,4  ,32.4},
			 {-36.9,0  ,36.9},
			 {32.4,4  ,-32.4},
			 {36.9,0  ,-36.9},
			 {32.4,4  ,32.4},
			 {36.9,0  ,36.9},
			 {-33.3,5  ,-5.4},
			 {-36.9,2  ,-5.4},
			 {-33.3,5  ,5.4},
			 {-36.9,2  ,5.4},
			 {33.3,5  ,-5.4},
			 {36.9,2  ,-5.4},
			 {33.3,5  ,5.4},
			 {36.9,2  ,5.4},
		},
		f={ 
			 {2 ,3 ,1 ,uv={{32,248},{31,246},{31,248},-1},f=1},
			 {4 ,7 ,3 ,uv={{32,248},{31,246},{31,248},-1},f=1},
			 {8 ,5 ,7 ,uv={{31,248},{32,246},{31,248},-1},f=1},
			 {6 ,1 ,5 ,uv={{32,248},{31,246},{31,248},-1},f=1},
			 {7 ,1 ,3 ,uv={{31,247},{16,232},{16,247},-1},f=1},
			 {2 ,4 ,3 ,uv={{32,248},{32,246},{31,246},-1},f=1},
			 {4 ,8 ,7 ,uv={{32,248},{32,246},{31,246},-1},f=1},
			 {8 ,6 ,5 ,uv={{31,248},{32,246},{31,246},-1},f=1},
			 {6 ,2 ,1 ,uv={{32,248},{32,246},{31,246},-1},f=1},
			 {7 ,5 ,1 ,uv={{31,247},{31,232},{16,232},-1},f=1},
			 {10,11,9 ,uv={{16,248},{22,247},{16,247},-1},f=1},
			 {16,13,15,uv={{16,248},{22,247},{16,247},-1},f=1},
			 {10,12,11,uv={{16,248},{22,248},{22,247},-1},f=1},
			 {16,14,13,uv={{16,248},{22,248},{22,247},-1},f=1},
		},
		coll={}
	},
	{ --lift -X (17)
	v={
			{96   ,128 ,-96 },
			{96   ,0   ,0   },
			{96   ,0   ,-96 },
			{0    ,0   ,-96 },
			{96   ,0   ,96  },
			{0    ,0   ,96  },
			{-96  ,0   ,-96 },
			{0    ,0   ,0   },
			{-96  ,0   ,96  },
			{-96  ,0   ,0   },
			{-96  ,128 ,96  },
			{-96  ,0   ,47  },
			{-192 ,128 ,48  },
			{-192 ,128 ,-48 },
			{-192 ,0   ,-48 },
			{-192 ,0   ,48  },
			{96   ,128 ,0   },
			{96   ,128 ,96  },
			{0    ,128 ,-96 },
			{0    ,128 ,0   },
			{0    ,128 ,96  },
			{-96  ,128 ,0   },
			{-96  ,128 ,-96 },
			{-96  ,128 ,-48 },
			{-96  ,0   ,-48 },
			{-66  ,128 ,-96 },
			{-66  ,0   ,-96 },
			{-48  ,128 ,96  },
			{-48  ,0   ,96  },
			{-96  ,128 ,48  },
	},
	f={
		{19,3,4,uv={{48,0},{24,32},{48,32},-1},f=2},
		{18,6,5,uv={{48,0},{24,32},{48,32},-1},f=2},
		{23,4,7,uv={{48,0},{24,32},{48,32},-1},f=2},
		{21,9,6,uv={{48,0},{24,32},{48,32},-1},f=2},
		{24,27,25,uv={{48,0},{35,32},{48,32},-1},f=2},
		{28,12,29,uv={{40,0},{24,32},{40,32},-1},f=2},
		{19,1,3,uv={{48,0},{24,0},{24,32},-1},f=2},
		{18,21,6,uv={{48,0},{24,0},{24,32},-1},f=2},
		{23,19,4,uv={{48,0},{24,0},{24,32},-1},f=2},
		{21,11,9,uv={{48,0},{24,0},{24,32},-1},f=2},
		{24,26,27,uv={{48,0},{35,0},{35,32},-1},f=2},
		{28,30,12,uv={{40,0},{24,0},{24,32},-1},f=2},
		{8,3,2,uv={{120,120},{96,96},{96,120},-1},f=2},
		{6,2,5,uv={{120,120},{96,96},{96,120},-1},f=2},
		{10,4,8,uv={{120,120},{96,96},{96,120},-1},f=2},
		{9,8,6,uv={{120,120},{96,96},{96,120},-1},f=2},
		{16,25,12,uv={{120,120},{96,96},{96,120},-1},f=2},
		{30,16,12,uv={{72,96},{48,128},{72,128},-1},f=2},
		{17,21,18,uv={{96,120},{120,96},{96,96},-1},f=2},
		{1,20,17,uv={{96,120},{120,96},{96,96},-1},f=2},
		{22,21,20,uv={{120,120},{96,96},{96,120},-1},f=2},
		{19,22,20,uv={{96,120},{120,96},{96,96},-1},f=2},
		{14,30,24,uv={{120,120},{96,96},{96,120},-1},f=2},
		{8,4,3,uv={{120,120},{120,96},{96,96},-1},f=2},
		{6,8,2,uv={{120,120},{120,96},{96,96},-1},f=2},
		{10,7,4,uv={{120,120},{120,96},{96,96},-1},f=2},
		{9,10,8,uv={{120,120},{120,96},{96,96},-1},f=2},
		{16,15,25,uv={{120,120},{120,96},{96,96},-1},f=2},
		{30,13,16,uv={{72,96},{48,96},{48,128},-1},f=2},
		{17,20,21,uv={{96,120},{120,120},{120,96},-1},f=2},
		{1,19,20,uv={{96,120},{120,120},{120,96},-1},f=2},
		{22,11,21,uv={{120,120},{120,96},{96,96},-1},f=2},
		{19,23,22,uv={{96,120},{120,120},{120,96},-1},f=2},
		{14,13,30,uv={{120,120},{120,96},{96,96},-1},f=2},
		{16,14,15,uv={{72,128},{48,96},{48,128},-1},f=2},
		{14,25,15,uv={{72,96},{48,128},{72,128},-1},f=2},
		{30,25,12,uv={{96,96},{72,128},{96,128},-1},f=3},
		{16,13,14,uv={{72,128},{72,96},{48,96},-1},f=2},
		{14,24,25,uv={{72,96},{48,96},{48,128},-1},f=2},
		{30,24,25,uv={{96,96},{72,96},{72,128},-1},f=3},
	},
	coll={
		{-96,0  ,-96,96,0  ,96},
		{-96,128,-96,96,128,96},
		--
		{-96 ,0  ,-96, 96 ,128,-96},
		{-96 ,0  , 96, 96 ,128, 96},
		{-96 ,0  ,-96,-96 ,128,-48},
		{-96 ,0  , 48,-96 ,128, 96},
		{-192,0  ,-48,-96 ,0  , 48},
		{-192,128,-48,-96 ,128, 48},
		{-192,0  ,-48,-192,128, 48},
		{-192,0  ,-48,-96 ,128,-48},
		{-192,0  , 48,-96 ,128, 48}
	}
	},
	{ --lift +X (18)
	v={
			{-96,128 ,96},
			{-96,0   ,0},
			{-96,0   ,96},
			{0,0   ,96},
			{-96,0   ,-96},
			{0,0   ,-96},
			{96,0   ,96},
			{0,0   ,0},
			{96,0   ,-96},
			{96,0   ,0},
			{96,128 ,-96},
			{96,0   ,-47},
			{192,128 ,-48},
			{192,128 ,48},
			{192,0   ,48},
			{192,0   ,-48},
			{-96,128 ,0},
			{-96,128 ,-96},
			{0,128 ,96},
			{0,128 ,0},
			{0,128 ,-96},
			{96,128 ,0},
			{96,128 ,96},
			{96,128 ,48},
			{96,0   ,48},
			{66,128 ,96},
			{66,0   ,96},
			{48,128 ,-96},
			{48,0   ,-96},
			{96,128 ,-48},
	},
	f={
		{19,3,4,uv={{48,0},{24,32},{48,32},-1},f=2},
		{18,6,5,uv={{48,0},{24,32},{48,32},-1},f=2},
		{23,4,7,uv={{48,0},{24,32},{48,32},-1},f=2},
		{21,9,6,uv={{48,0},{24,32},{48,32},-1},f=2},
		{24,27,25,uv={{48,0},{35,32},{48,32},-1},f=2},
		{28,12,29,uv={{40,0},{24,32},{40,32},-1},f=2},
		{19,1,3,uv={{48,0},{24,0},{24,32},-1},f=2},
		{18,21,6,uv={{48,0},{24,0},{24,32},-1},f=2},
		{23,19,4,uv={{48,0},{24,0},{24,32},-1},f=2},
		{21,11,9,uv={{48,0},{24,0},{24,32},-1},f=2},
		{24,26,27,uv={{48,0},{35,0},{35,32},-1},f=2},
		{28,30,12,uv={{40,0},{24,0},{24,32},-1},f=2},
		{8,3,2,uv={{120,120},{96,96},{96,120},-1},f=2},
		{6,2,5,uv={{120,120},{96,96},{96,120},-1},f=2},
		{10,4,8,uv={{120,120},{96,96},{96,120},-1},f=2},
		{9,8,6,uv={{120,120},{96,96},{96,120},-1},f=2},
		{16,25,12,uv={{120,120},{96,96},{96,120},-1},f=2},
		{30,16,12,uv={{72,96},{48,128},{72,128},-1},f=2},
		{17,21,18,uv={{96,120},{120,96},{96,96},-1},f=2},
		{1,20,17,uv={{96,120},{120,96},{96,96},-1},f=2},
		{22,21,20,uv={{120,120},{96,96},{96,120},-1},f=2},
		{19,22,20,uv={{96,120},{120,96},{96,96},-1},f=2},
		{14,30,24,uv={{120,120},{96,96},{96,120},-1},f=2},
		{8,4,3,uv={{120,120},{120,96},{96,96},-1},f=2},
		{6,8,2,uv={{120,120},{120,96},{96,96},-1},f=2},
		{10,7,4,uv={{120,120},{120,96},{96,96},-1},f=2},
		{9,10,8,uv={{120,120},{120,96},{96,96},-1},f=2},
		{16,15,25,uv={{120,120},{120,96},{96,96},-1},f=2},
		{30,13,16,uv={{72,96},{48,96},{48,128},-1},f=2},
		{17,20,21,uv={{96,120},{120,120},{120,96},-1},f=2},
		{1,19,20,uv={{96,120},{120,120},{120,96},-1},f=2},
		{22,11,21,uv={{120,120},{120,96},{96,96},-1},f=2},
		{19,23,22,uv={{96,120},{120,120},{120,96},-1},f=2},
		{14,13,30,uv={{120,120},{120,96},{96,96},-1},f=2},
		{16,14,15,uv={{72,128},{48,96},{48,128},-1},f=2},
		{14,25,15,uv={{72,96},{48,128},{72,128},-1},f=2},
		{30,25,12,uv={{96,96},{72,128},{96,128},-1},f=3},
		{16,13,14,uv={{72,128},{72,96},{48,96},-1},f=2},
		{14,24,25,uv={{72,96},{48,96},{48,128},-1},f=2},
		{30,24,25,uv={{96,96},{72,96},{72,128},-1},f=3},
	},
	coll={
		{-96,0  ,-96,96,0  ,96},
		{-96,128,-96,96,128,96},
		--
		{-96 ,0  ,-96, 96 ,128,-96},
		{-96 ,0  , 96, 96 ,128, 96},
		{ 96 ,0  ,-96, 96 ,128,-48},
		{ 96 ,0  , 48, 96 ,128, 96},
		{ 96 ,0  ,-48, 192,0  , 48},
		{ 96 ,128,-48, 192,128, 48},
		{ 192,0  ,-48, 192,128, 48},
		{ 96 ,0  ,-48, 192,128,-48},
		{ 96 ,0  , 48, 192,128, 48}
	}
	},
	{ --lift -Z (19)
	v={
			{-96 ,128 ,-96},
			{0   ,0   ,-96},
			{-96 ,0   ,-96},
			{-96 ,0   ,0},
			{96  ,0   ,-96},
			{96  ,0   ,0},
			{-96 ,0   ,96},
			{0   ,0   ,0},
			{96  ,0   ,96},
			{0   ,0   ,96},
			{96  ,128 ,96},
			{47  ,0   ,96},
			{48  ,128 ,192},
			{-48 ,128 ,192},
			{-48 ,0   ,192},
			{48  ,0   ,192},
			{0   ,128 ,-96},
			{96  ,128 ,-96},
			{-96 ,128 ,0},
			{0   ,128 ,0},
			{96  ,128 ,0},
			{0   ,128 ,96},
			{-96 ,128 ,96},
			{-48 ,128 ,96},
			{-48 ,0   ,96},
			{-96 ,128 ,66},
			{-96 ,0   ,66},
			{96  ,128 ,48},
			{96  ,0   ,48},
			{48  ,128 ,96},
	},
	f={
		{19,3,4,uv={{48,0},{24,32},{48,32},-1},f=2},
		{18,6,5,uv={{48,0},{24,32},{48,32},-1},f=2},
		{23,4,7,uv={{48,0},{24,32},{48,32},-1},f=2},
		{21,9,6,uv={{48,0},{24,32},{48,32},-1},f=2},
		{24,27,25,uv={{48,0},{35,32},{48,32},-1},f=2},
		{28,12,29,uv={{40,0},{24,32},{40,32},-1},f=2},
		{19,1,3,uv={{48,0},{24,0},{24,32},-1},f=2},
		{18,21,6,uv={{48,0},{24,0},{24,32},-1},f=2},
		{23,19,4,uv={{48,0},{24,0},{24,32},-1},f=2},
		{21,11,9,uv={{48,0},{24,0},{24,32},-1},f=2},
		{24,26,27,uv={{48,0},{35,0},{35,32},-1},f=2},
		{28,30,12,uv={{40,0},{24,0},{24,32},-1},f=2},
		{8,3,2,uv={{120,120},{96,96},{96,120},-1},f=2},
		{6,2,5,uv={{120,120},{96,96},{96,120},-1},f=2},
		{10,4,8,uv={{120,120},{96,96},{96,120},-1},f=2},
		{9,8,6,uv={{120,120},{96,96},{96,120},-1},f=2},
		{16,25,12,uv={{120,120},{96,96},{96,120},-1},f=2},
		{30,16,12,uv={{72,96},{48,128},{72,128},-1},f=2},
		{17,21,18,uv={{96,120},{120,96},{96,96},-1},f=2},
		{1,20,17,uv={{96,120},{120,96},{96,96},-1},f=2},
		{22,21,20,uv={{120,120},{96,96},{96,120},-1},f=2},
		{19,22,20,uv={{96,120},{120,96},{96,96},-1},f=2},
		{14,30,24,uv={{120,120},{96,96},{96,120},-1},f=2},
		{8,4,3,uv={{120,120},{120,96},{96,96},-1},f=2},
		{6,8,2,uv={{120,120},{120,96},{96,96},-1},f=2},
		{10,7,4,uv={{120,120},{120,96},{96,96},-1},f=2},
		{9,10,8,uv={{120,120},{120,96},{96,96},-1},f=2},
		{16,15,25,uv={{120,120},{120,96},{96,96},-1},f=2},
		{30,13,16,uv={{72,96},{48,96},{48,128},-1},f=2},
		{17,20,21,uv={{96,120},{120,120},{120,96},-1},f=2},
		{1,19,20,uv={{96,120},{120,120},{120,96},-1},f=2},
		{22,11,21,uv={{120,120},{120,96},{96,96},-1},f=2},
		{19,23,22,uv={{96,120},{120,120},{120,96},-1},f=2},
		{14,13,30,uv={{120,120},{120,96},{96,96},-1},f=2},
		{16,14,15,uv={{72,128},{48,96},{48,128},-1},f=2},
		{14,25,15,uv={{72,96},{48,128},{72,128},-1},f=2},
		{30,25,12,uv={{96,96},{72,128},{96,128},-1},f=3},
		{16,13,14,uv={{72,128},{72,96},{48,96},-1},f=2},
		{14,24,25,uv={{72,96},{48,96},{48,128},-1},f=2},
		{30,24,25,uv={{96,96},{72,96},{72,128},-1},f=3},
	},
	coll={
		{-96,0  ,-96,96,0  ,96},
		{-96,128,-96,96,128,96},
		--
		{-96,0  ,-96 ,-96,128,96 },
		{ 96,0  ,-96 , 96,128,96 },
		{-96,0  , 96 ,-48,128,96 },
		{ 48,0  , 96 , 96,128,96 },
		{-48,0  , 96 , 48,0  ,192},
		{-48,128, 96 , 48,128,192},
		{-48,0  , 192, 48,128,192},
		{-48,0  , 96 ,-48,128,192},
		{ 48,0  , 96 , 48,128,192}
	}
	},
	{ --lift +Z (20)
	v={
			{96,128 ,96  },
			{0,0   ,96  },
			{96,0   ,96  },
			{96,0   ,0   },
			{-96,0   ,96  },
			{-96,0   ,0   },
			{96,0   ,-96 },
			{0,0   ,0   },
			{-96,0   ,-96 },
			{0,0   ,-96 },
			{-96,128 ,-96 },
			{-47,0   ,-96 },
			{-48,128 ,-192},
			{48,128 ,-192},
			{48,0   ,-192},
			{-48,0   ,-192},
			{0,128 ,96  },
			{-96,128 ,96  },
			{96,128 ,0   },
			{0,128 ,0   },
			{-96,128 ,0   },
			{0,128 ,-96 },
			{96,128 ,-96 },
			{48,128 ,-96 },
			{48,0   ,-96 },
			{96,128 ,-66 },
			{96,0   ,-66 },
			{-96,128 ,-48 },
			{-96,0   ,-48 },
			{-48,128 ,-96 },
	},
	f={
		{19,3,4,uv={{48,0},{24,32},{48,32},-1},f=2},
		{18,6,5,uv={{48,0},{24,32},{48,32},-1},f=2},
		{23,4,7,uv={{48,0},{24,32},{48,32},-1},f=2},
		{21,9,6,uv={{48,0},{24,32},{48,32},-1},f=2},
		{24,27,25,uv={{48,0},{35,32},{48,32},-1},f=2},
		{28,12,29,uv={{40,0},{24,32},{40,32},-1},f=2},
		{19,1,3,uv={{48,0},{24,0},{24,32},-1},f=2},
		{18,21,6,uv={{48,0},{24,0},{24,32},-1},f=2},
		{23,19,4,uv={{48,0},{24,0},{24,32},-1},f=2},
		{21,11,9,uv={{48,0},{24,0},{24,32},-1},f=2},
		{24,26,27,uv={{48,0},{35,0},{35,32},-1},f=2},
		{28,30,12,uv={{40,0},{24,0},{24,32},-1},f=2},
		{8,3,2,uv={{120,120},{96,96},{96,120},-1},f=2},
		{6,2,5,uv={{120,120},{96,96},{96,120},-1},f=2},
		{10,4,8,uv={{120,120},{96,96},{96,120},-1},f=2},
		{9,8,6,uv={{120,120},{96,96},{96,120},-1},f=2},
		{16,25,12,uv={{120,120},{96,96},{96,120},-1},f=2},
		{30,16,12,uv={{72,96},{48,128},{72,128},-1},f=2},
		{17,21,18,uv={{96,120},{120,96},{96,96},-1},f=2},
		{1,20,17,uv={{96,120},{120,96},{96,96},-1},f=2},
		{22,21,20,uv={{120,120},{96,96},{96,120},-1},f=2},
		{19,22,20,uv={{96,120},{120,96},{96,96},-1},f=2},
		{14,30,24,uv={{120,120},{96,96},{96,120},-1},f=2},
		{8,4,3,uv={{120,120},{120,96},{96,96},-1},f=2},
		{6,8,2,uv={{120,120},{120,96},{96,96},-1},f=2},
		{10,7,4,uv={{120,120},{120,96},{96,96},-1},f=2},
		{9,10,8,uv={{120,120},{120,96},{96,96},-1},f=2},
		{16,15,25,uv={{120,120},{120,96},{96,96},-1},f=2},
		{30,13,16,uv={{72,96},{48,96},{48,128},-1},f=2},
		{17,20,21,uv={{96,120},{120,120},{120,96},-1},f=2},
		{1,19,20,uv={{96,120},{120,120},{120,96},-1},f=2},
		{22,11,21,uv={{120,120},{120,96},{96,96},-1},f=2},
		{19,23,22,uv={{96,120},{120,120},{120,96},-1},f=2},
		{14,13,30,uv={{120,120},{120,96},{96,96},-1},f=2},
		{16,14,15,uv={{72,128},{48,96},{48,128},-1},f=2},
		{14,25,15,uv={{72,96},{48,128},{72,128},-1},f=2},
		{30,25,12,uv={{96,96},{72,128},{96,128},-1},f=3},
		{16,13,14,uv={{72,128},{72,96},{48,96},-1},f=2},
		{14,24,25,uv={{72,96},{48,96},{48,128},-1},f=2},
		{30,24,25,uv={{96,96},{72,96},{72,128},-1},f=3},
	},
	coll={
		{-96,0  ,-96,96,0  ,96},
		{-96,128,-96,96,128,96},
		--
		{-96,0  ,-96 ,-96,128, 96 },
		{ 96,0  ,-96 , 96,128, 96 },
		{-96,0  ,-96 ,-48,128,-96 },
		{ 48,0  ,-96 , 96,128,-96 },
		{-48,0  ,-192, 48,0  ,-96 },
		{-48,128,-192, 48,128,-96 },
		{-48,0  ,-192, 48,128,-192},
		{-48,0  ,-192,-48,128,-96 },
		{ 48,0  ,-192, 48,128,-96 }
	}
	},
	{ --display -X (21)
		v={
			 {0,60, 68},
			 {0,100,68},
			 {5,60, 68},
			 {5,100,68},
			 {0,60, 28},
			 {0,100,28},
			 {5,60, 28},
			 {5,100,28},
		},
		f={
			 {2,3,1,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {4,7,3,uv={{45,232},{32,245},{45,245},-1},f=2},
			 {8,5,7,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {7,1,3,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {4,6,8,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {2,4,3,uv={{45,246},{45,245},{32,245},-1},f=2},
			 {4,8,7,uv={{45,232},{32,232},{32,245},-1},f=2},
			 {8,6,5,uv={{45,246},{45,245},{32,245},-1},f=2},
			 {7,5,1,uv={{45,246},{45,245},{32,245},-1},f=2},
			 {4,2,6,uv={{45,246},{45,245},{32,245},-1},f=2},
		},
		coll={}
	},
	{ --display +X (22)
		v={
			 {96,60, 28},
			 {96,100,28},
			 {91,60, 28},
			 {91,100,28},
			 {96,60, 68},
			 {96,100,68},
			 {91,60, 68},
			 {91,100,68},
		},
		f={
			 {2,3,1,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {4,7,3,uv={{45,232},{32,245},{45,245},-1},f=2},
			 {8,5,7,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {7,1,3,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {4,6,8,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {2,4,3,uv={{45,246},{45,245},{32,245},-1},f=2},
			 {4,8,7,uv={{45,232},{32,232},{32,245},-1},f=2},
			 {8,6,5,uv={{45,246},{45,245},{32,245},-1},f=2},
			 {7,5,1,uv={{45,246},{45,245},{32,245},-1},f=2},
			 {4,2,6,uv={{45,246},{45,245},{32,245},-1},f=2},
		},
		coll={}
	},
	{ --display -Z (23)
		v={
			 {68,60, 96},
			 {68,100,96},
			 {68,60, 91},
			 {68,100,91},
			 {28,60, 96},
			 {28,100,96},
			 {28,60, 91},
			 {28,100,91},
		},
		f={
			 {2,3,1,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {4,7,3,uv={{45,232},{32,245},{45,245},-1},f=2},
			 {8,5,7,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {7,1,3,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {4,6,8,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {2,4,3,uv={{45,246},{45,245},{32,245},-1},f=2},
			 {4,8,7,uv={{45,232},{32,232},{32,245},-1},f=2},
			 {8,6,5,uv={{45,246},{45,245},{32,245},-1},f=2},
			 {7,5,1,uv={{45,246},{45,245},{32,245},-1},f=2},
			 {4,2,6,uv={{45,246},{45,245},{32,245},-1},f=2},
		},
		coll={}
	},
	{ --display +Z (24)
		v={
			 {28,60, 0},
			 {28,100,0},
			 {28,60, 5},
			 {28,100,5},
			 {68,60, 0},
			 {68,100,0},
			 {68,60, 5},
			 {68,100,5},
		},
		f={
			 {2,3,1,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {4,7,3,uv={{45,232},{32,245},{45,245},-1},f=2},
			 {8,5,7,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {7,1,3,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {4,6,8,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {2,4,3,uv={{45,246},{45,245},{32,245},-1},f=2},
			 {4,8,7,uv={{45,232},{32,232},{32,245},-1},f=2},
			 {8,6,5,uv={{45,246},{45,245},{32,245},-1},f=2},
			 {7,5,1,uv={{45,246},{45,245},{32,245},-1},f=2},
			 {4,2,6,uv={{45,246},{45,245},{32,245},-1},f=2},
		},
		coll={}
	},
}

local s = { --sounds
	t1=0,
	n={0,0,0} --The exact position of the current track
}

local world_size={12,7,12}
world_size[4]=world_size[2]*world_size[3]
world_size[5]=world_size[1]*world_size[2]*world_size[3]
--world
local draw={
	objects={
		c={}, --cubes
		cd={}, --cube dispensers
		lb={}, --light bridges
		b={}, --buttons
		t={}, --turrets
		fb={}, --floor button
		l={}, --lifts
		d={}, --displays
	},
	world={v={},f={},sp={}}, --main world
	world_bp={f={}}, --the world for the blue portal
	world_op={f={}}, --the world for the orange portal
	map={},
	pr={}, --particles
	debug_p={}, --debug points
	pr_g={}, --particle generator (for a light bridge)
	p={nil,nil}, --portals
	lg={}--light bridge generators
}

-- Just a minimalistic fps counter? What about...

local frames = {} -- Time for drawing the frame
local frames_detalied = {} -- The same, but retains the time of drawing each component

local frames_2 = {} -- how often does a certain frame rendering time appear ([rendering time] = multiplicity)

local frames_sorted = {}

local frame={-- Framerate
	min = 0,
	max = 0,
	mean = 0, -- The average frame for the frame
	median = 0, -- Median value
	mode = 0, -- The most encountered value
	std_dev = 0, -- Standart deviation
	coef_var = 0, -- Coefficient of variation
}

local frame_ms = { -- the start time of the rendering of each component
	0, -- [1] frame init
	0, -- [2] stuff (1)
	0, -- [3] portals
	0, -- [4] update
	0, -- [5] draw
	0, -- [6] stuff (2)
	0, -- [7] collectgarbage
}

local frames_ms = { -- The time for drawing each component
	stuff = 0,
	portals = 0,
	update = 0,
	draw = 0,
	collectgarbage = 0,
}

local p_g={x=0,y=0,c=1,t1=0,t2=0, cd1=0, cd2=0}

--Text for levels
local lvl_text={
	{
		"Welcome to the Aperture Science",
		"To skip this boring text, hold Z",
		"You were selected to undergo several tests",
		"Use the mouse to rotate the camera",
		"To control the player, press W A S D space",
		"To open the Pause menu, press ~",
		"(Make sure you have chosen English layout)",
		"To interact with buttons or cubes, press E",
		"The portal will open after 3... 2... 1..."
	},
	{
		"The door was open behind you",
		"It is amazing that this elevator still works",
		"I thought you were going to overload it",
		"To pass the next level you need to cross the abyss",
		"To do this, you need to go through the portal",
		"The portal will open after 3... 2... 1..."
	},
	{
		"At this level you will receive a portal gun of level 1",
		"There is a bridge of dense light in front of you",
		"You can safely walk on this bridge as a regular floor",
		"Also, this bridge can pass through the portals and the grid",
		"good luck!",
	},
	{
		"Wait, let me turn on the appropriate music",
		"At this level, you will encounter turrets",
		"Be careful, these turrets can turn you into a sieve in seconds",
	},
	{
		"Congratulations, you stayed alive"
	}
}
local lvl_text_2={
	draw=true, --Should the text be thrown out
	pause=false, --as not surprising, this is a pause
	id=1, --The number of the desired array of the text
	i=1,
	t=0
}
--funcions
local addwall, addobj, respal, updpal, darkpal, addp
--time
local frame_t=0 -- The start time of the frame drawing
local fr_draw_t=0 -- Frame drawing time
local t=0 -- Global timer (+1 for each code call)
local lvl_t=0 --Timer for the lvl
--mouse
local clp1,clp2
local mx, my, cl1, cl2, whl
local cid
--sprite editor
local function setpix(sx,sy,color)
	local id  = (sx>>3) + (sy>>3<<4)
	local adr = (sx&7) + ((sy&7) << 3)
	poke4(0x8000 + (id<<6) + adr,color)
end

local function getpix(sx,sy)
	local id  = (sx>>3) + (sy>>3<<4)
	local adr = (sx&7) + ((sy&7) << 3)
	return peek4(0x8000 + (id<<6) + adr)
end

--maps
local script = { --functions for lvl scripts
	add_wall = addwall, --add a wall     (X, Y, Z, angle, face, type)
	add_obj  = addobj,  --add a object   (X, Y, Z, type, [additional parameters])
	add_p    = addp,    --add a particle (X, Y, Z, vel_X, vel_Y, vel_Z, life_time, color)
	update_world= update_world, -- Updates the geometry of the level

	get_obj_data = function(obj_type, obj_i,obj_parameter)
		if type(obj_type)~="string" then error("The object type must be a string") end
		if type(obj_i)~="number"    then error("The object index must be a integer") end

		if not draw.objects[obj_type] then error(obj_type.." does not exist") end
		if not draw.objects[obj_type][obj_i] then error("The object with index ["..obj_i.."] does not exist") end

		if not draw.objects[obj_type][obj_i][obj_parameter] then error("Parameter "..obj_parameter.." does not exist") end

		return draw.objects[obj_type][obj_i][obj_parameter]
	end,

	set_obj_data = function(obj_type, obj_i,obj_parameter, value)
		if type(obj_type)~="string" then error("The object type must be a string") end
		if type(obj_i)~="number"    then error("The object index must be a integer") end

		if not draw.objects[obj_type] then error(obj_type.." does not exist") end
		if not draw.objects[obj_type][obj_i] then error("The object with index ["..obj_i.."] does not exist") end

		if not draw.objects[obj_type][obj_i][obj_parameter] then error("Parameter "..obj_parameter.." does not exist") end

		draw.objects[obj_type][obj_i][obj_parameter] = value
	end
}
--[[
	objects and their parameters:
		general parameters:
			x,y,z -- coorditanes (float / integer)
			type  -- object type (integer)
			draw  -- is the object diplayed (boolean) (does not affect the collision)
			id    -- the ordinal index of the object (integer) (what is the account of this object among the objects of the same type)
			model -- yes, this is an object model (table)
		
		cubes ("c"):
			x1,y1,z1 -- Coordinates relative to the portal (float / integer)
			inp      -- whether the cube is located in the portal (boolean)
			held     -- is the cube in the hand (boolean)
			vx,vy,vz -- velocity (float / integer)
			disp     -- cube dispenser ID (integer / nil)

		cube dispensers ("cd"):
			ct  --cube type (integer)

		buttons ("b"):
			t    -- button press time (int / math.huge)
			t1   -- cuttent press time (int)
			tick -- sends a signal 1 tick long while pressing the button (boolean)
			s    -- button signal (boolean)

		floor button ("fb"):
			tick -- sends a signal 1 tick long while pressing the button (boolean)
			s    -- button signal (boolean)

		displays ("d"):
			s    -- displayed signal (boolean)

	what is the additional parameter in add_obj responsible for:
		cubes -- the ordinal index of the dispenser (integer) (in with dispenser will the cube appear)
		buttons -- how long will the signal be considered pressed (60 - 1 second) (math.huge for a constant signal, -1 for the switch mode)

		in other cases its not used
]]
local maps={[0]={},[1]={}}

--[[
	0 set of levels - system levels
	1 set of levels - levels of the main game
]]

maps[1][1]={
	w={
		{2,0,2,1,3,4},
		{4,0,2,1,1,2},
		{2,0,3,1,3,4},
		{4,0,3,1,1,2},
		{2,0,2,3,3,4},
		{3,0,2,3,3,4},
		{2,0,4,3,3,4},
		{3,0,4,3,3,4},
		{4,0,1,1,1,2},
		{4,0,0,1,1,2},
		{5,0,5,1,3,11}, --doors
		{5,0,4,1,3,12}, --doors
		{4,0,4,3,1,2},
		--
		{0,0,0,1,2,2},{0,0,1,1,2,2},{0,0,2,1,2,2},{0,0,3,1,2,2},{0,0,4,1,2,2},{0,0,5,1,2,2},
		--
		{0,0,6,3,2,2},{1,0,6,3,2,2},{2,0,6,3,2,2},{3,0,6,3,2,2},{4,0,6,3,2,2},
		--
		{0,0,0,3,1,2},{1,0,0,3,1,2},{2,0,0,3,1,2},{3,0,0,3,1,2},
		--
		{0,0,0,2,2,1},{1,0,0,2,2,1},{2,0,0,2,2,1},{3,0,0,2,2,1},
		{0,0,1,2,2,1},{1,0,1,2,2,1},{2,0,1,2,2,1},{3,0,1,2,2,1},
		{0,0,2,2,2,1},{1,0,2,2,2,1},{2,0,2,2,2,1},{3,0,2,2,2,1},
		{0,0,3,2,2,1},{1,0,3,2,2,1},{2,0,3,2,2,1},{3,0,3,2,2,1},
		{0,0,4,2,2,1},{1,0,4,2,2,1},{2,0,4,2,2,1},{3,0,4,2,2,1},{4,0,4,2,2,1},
		{0,0,5,2,2,1},{1,0,5,2,2,1},{2,0,5,2,2,1},{3,0,5,2,2,1},{4,0,5,2,2,1},
		--
		{0,1,0,2,1,2},{1,1,0,2,1,2},{2,1,0,2,1,2},{3,1,0,2,1,2},
		{0,1,1,2,1,2},{1,1,1,2,1,2},{2,1,1,2,1,2},{3,1,1,2,1,2},
		{0,1,2,2,1,2},{1,1,2,2,1,2},{2,1,2,2,1,2},{3,1,2,2,1,2},
		{0,1,3,2,1,2},{1,1,3,2,1,2},{2,1,3,2,1,2},{3,1,3,2,1,2},
		{0,1,4,2,1,2},{1,1,4,2,1,2},{2,1,4,2,1,2},{3,1,4,2,1,2},{4,1,4,2,1,2},
		{0,1,5,2,1,2},{1,1,5,2,1,2},{2,1,5,2,1,2},{3,1,5,2,1,2},{4,1,5,2,1,2},
		--
		{5,0,0,1,2,2},{5,0,1,1,2,2},{5,0,2,1,2,2},{5,0,3,1,2,2},
		{5,1,0,1,2,2},{5,1,1,1,2,2},{5,1,2,1,2,2},{5,1,3,1,2,2},{5,1,4,1,2,2},{5,1,5,1,2,2},

		{10,0,0,1,1,2},{10,0,1,1,1,2},{10,0,2,1,1,2},{10,0,3,1,1,2},{10,0,4,1,1,2},{10,0,5,1,1,2},
		{10,1,0,1,1,2},{10,1,1,1,1,2},{10,1,2,1,1,17},{10,1,3,1,1,16},{10,1,4,1,1,2},{10,1,5,1,1,2},

		{5,0,6,3,2,2},{6,0,6,3,2,10},{7,0,6,3,2,2},{8,0,6,3,2,2},{9,0,6,3,2,2},
		{5,1,6,3,2,2},{6,1,6,3,2,2},{7,1,6,3,2,2},{8,1,6,3,2,2},{9,1,6,3,2,2},

		{5,0,0,3,1,2},{6,0,0,3,3,14},{7,0,0,3,3,13},{8,0,0,3,1,2},{9,0,0,3,1,2},
		{5,1,0,3,1,2},{6,1,0,3,1,2},{7,1,0,3,1,2},{8,1,0,3,1,2},{9,1,0,3,1,2},
		--
		{5,0,0,2,2,1},{5,0,1,2,2,1},{5,0,2,2,2,1},{5,0,3,2,2,1},{5,0,4,2,2,1},{5,0,5,2,2,1},
		{6,0,0,2,2,1},{6,0,1,2,2,1},{6,0,2,2,2,1},{6,0,3,2,2,1},{6,0,4,2,2,1},{6,0,5,2,2,1},
		{7,0,0,2,2,1},{7,0,1,2,2,1},{7,0,2,2,2,1},{7,0,3,2,2,1},{7,0,4,2,2,1},{7,0,5,2,2,1},
		{8,0,0,2,2,1},{8,0,1,2,2,1},{8,0,2,2,2,1},{8,0,3,2,2,1},{8,0,4,2,2,1},{8,0,5,2,2,1},
		{9,0,0,2,2,1},{9,0,1,2,2,1},{9,0,2,2,2,1},{9,0,3,2,2,1},{9,0,4,2,2,1},{9,0,5,2,2,1},
		
		{5,2,0,2,1,2},{5,2,1,2,1,2},{5,2,2,2,1,2},{5,2,3,2,1,2},{5,2,4,2,1,2},{5,2,5,2,1,2},
		{6,2,0,2,1,2},{6,2,1,2,1,2},{6,2,2,2,1,2},{6,2,3,2,1,2},{6,2,4,2,1,2},{6,2,5,2,1,2},
		{7,2,0,2,1,2},{7,2,1,2,1,2},{7,2,2,2,1,2},{7,2,3,2,1,2},{7,2,4,2,1,2},{7,2,5,2,1,2},
		{8,2,0,2,1,2},{8,2,1,2,1,2},{8,2,2,2,1,2},{8,2,3,2,1,2},{8,2,4,2,1,2},{8,2,5,2,1,2},
		{9,2,0,2,1,2},{9,2,1,2,1,2},{9,2,2,2,1,2},{9,2,3,2,1,2},{9,2,4,2,1,2},{9,2,5,2,1,2},
	
	},
	o={ --table for objects
	 --{X, Y, Z, type, [additional parameters]}
	 {820,256-32,130,3},
	 {96*8.5,0,96*2.5,16},
	 {820,24,130,1,1},
	 {96*8,0,0,24},
	},
	p={}, --table for portals (leave empty if the portals are not needed)
	lg={}, --light bridge generators
	lift={nil,{7,0,-1,3}}, --Initial and final elevator (X Y Z angle)
	pg_lvl=0, --portal gun lvl
	t = 0, --local lvl data
	init=function()
		plr.x=288
		plr.y=64
		plr.z=288
		plr.ty=-pi2
		maps[1][1].t=0
		lvl_text_2={draw=false,pause=false,id=1,i=1,t=0}
		for x=0,19 do for y=0,28 do
			setpix(93-x,y+99,15)
		end end
	end,
	scripts=function()
		maps[1][1].t = maps[1][1].t + 1
		local mt = maps[1][1].t
		--initial animation
		if mt==100 then lvl_text_2.draw = true end
		
		--
		if lvl_text_2.i>9 then
			lvl_text_2.i=1
			lvl_text_2.draw=false
			draw.p[1]={4,0,2,1,1,0}
			draw.p[2]={4,0,0,1,1,0}
			update_world()
		end

		if draw.objects.fb[1].tick then
			if draw.objects.fb[1].s then
				addwall(6,0,0,3,3,12)
				addwall(7,0,0,3,3,11)
			else
				addwall(6,0,0,3,3,14)
				addwall(7,0,0,3,3,13)
			end
			update_world()
		end
		draw.objects.d[1].s=draw.objects.fb[1].s
	end
}
maps[1][2]={
	w={
		--floor
		{0,1,0,2,2,1},{0,1,1,2,2,1},{0,1,2,2,2,1},
		{1,1,0,2,3,1},{1,1,1,2,3,1},{1,1,2,2,3,1},
		{2,1,0,2,3,1},{2,1,1,2,3,1},{2,1,2,2,3,1},
	
		{0,1,3,2,2,1},{0,1,4,2,2,1},{0,1,5,2,2,1},{3,1,4,2,2,1},{3,2,4,2,1,2},
		{1,1,3,2,2,1},{1,1,4,2,2,1},{1,1,5,2,2,1},
		{2,1,3,2,2,1},{2,1,4,2,2,1},{2,1,5,2,2,1},

		{0,3,3,2,1,2},{0,3,4,2,1,2},{0,3,5,2,1,2},
		{1,3,3,2,1,2},{1,3,4,2,1,2},{1,3,5,2,1,2},
		{2,3,3,2,1,2},{2,3,4,2,1,2},{2,3,5,2,1,2},
		
		{1,0,0,2,2,1},{1,0,1,2,2,1},{1,0,2,2,2,1},
		{2,0,0,2,2,1},{2,0,1,2,2,1},{2,0,2,2,2,1},
		{3,0,0,2,2,8},{3,0,1,2,2,1},{3,0,2,2,2,1},
		{4,0,0,2,2,1},{4,0,1,2,2,1},{4,0,2,2,2,1},
		{5,0,0,2,2,1},{5,0,1,2,2,1},{5,0,2,2,2,1},
		{6,0,0,2,2,1},{6,0,1,2,2,1},{6,0,2,2,2,1},
		{7,0,0,2,2,1},{7,0,1,2,2,1},{7,0,2,2,2,1},
		{8,0,0,2,2,1},{8,0,1,2,2,1},{8,0,2,2,2,1},

		{7,1,0,2,3,1},{7,1,1,2,3,1},{7,1,2,2,3,1},
		{8,1,0,2,3,1},{8,1,1,2,3,1},{8,1,2,2,3,1},
		{9,1,0,2,3,1},{9,1,1,2,3,1},{9,1,2,2,3,1},
		--
		{0,3,0,2,1,2},{0,3,1,2,1,2},{0,3,2,2,1,2},
		{1,3,0,2,1,2},{1,3,1,2,1,2},{1,3,2,2,1,2},
		{2,3,0,2,1,2},{2,3,1,2,1,2},{2,3,2,2,1,2},
		{3,3,0,2,1,2},{3,3,1,2,1,2},{3,3,2,2,1,2},
		{4,3,0,2,1,2},{4,3,1,2,1,2},{4,3,2,2,1,2},
		{5,3,0,2,1,2},{5,3,1,2,1,2},{5,3,2,2,1,2},
		{6,3,0,2,1,2},{6,3,1,2,1,2},{6,3,2,2,1,2},
		{7,3,0,2,1,2},{7,3,1,2,1,2},{7,3,2,2,1,2},
		{8,3,0,2,1,2},{8,3,1,2,1,2},{8,3,2,2,1,2},
		{9,3,0,2,1,2},{9,3,1,2,1,2},{9,3,2,2,1,2},
		--walls
		{0,1,0,3,1,2},{0,2,0,3,1,2},
		{1,0,0,3,1,1},{1,1,0,3,1,10},{1,2,0,3,1,2},
		{2,0,0,3,1,1},{2,1,0,3,1,2 },{2,2,0,3,1,2},
		{3,0,0,3,1,2},{3,1,0,3,1,2 },{3,2,0,3,1,2},
		{4,0,0,3,1,2},{4,1,0,3,1,2 },{4,2,0,3,1,2},
		{5,0,0,3,1,2},{5,1,0,3,1,2 },{5,2,0,3,1,2},
		{6,0,0,3,1,2},{6,1,0,3,1,2 },{6,2,0,3,1,2},
		{7,0,0,3,1,1},{7,1,0,3,1,2 },{7,2,0,3,1,2},
		{8,0,0,3,1,1},{8,1,0,3,1,2 },{8,2,0,3,1,2},
		{9,1,0,3,1,2},{9,2,0,3,1,2},
		
		{0,1,6,3,2,2},{0,2,6,3,2,2},
		{1,0,3,3,2,1},{1,1,6,3,3,14},{1,2,6,3,2,2},
		{2,0,3,3,2,1},{2,1,6,3,3,13},{2,2,6,3,2,2},
		{3,0,3,3,2,2},{3,1,3,3,2,2},{3,2,3,3,2,2},
		{4,0,3,3,2,2},{4,1,3,3,2,2},{4,2,3,3,2,2},
		{5,0,3,3,2,2},{5,1,3,3,2,2},{5,2,3,3,2,2},
		{6,0,3,3,2,2},{6,1,3,3,2,2},{6,2,3,3,2,2},
		{7,0,3,3,2,1},{7,1,3,3,2,2},{7,2,3,3,2,2},
		{8,0,3,3,2,1},{8,1,3,3,2,2},{8,2,3,3,2,2},
		{9,1,3,3,2,2},{9,2,3,3,2,2},

		{0,1,0,1,3,12},{7,0,0,1,3,3},{0,2,0,1,2,2},
		{0,1,1,1,3,11},{7,0,1,1,3,3},{0,2,1,1,2,2},
		{0,1,2,1,2,2 },{7,0,2,1,3,3},{0,2,2,1,2,2},
		{0,1,3,1,2,2},{0,2,3,1,2,2},
		{0,1,4,1,2,2},{0,2,4,1,2,2},
		{0,1,5,1,2,2},{0,2,5,1,2,2},
		{3,1,3,1,1,2},{3,2,3,1,1,2},
		{4,1,4,1,1,2},{3,2,4,1,1,2},
		{3,1,5,1,1,2},{3,2,5,1,1,2},

		{1,0,0,1,2,1},{3,0,0,1,3,3},{9,0,0,1,1,1},
		{1,0,1,1,2,1},{3,0,1,1,3,3},{9,0,1,1,1,1},
		{1,0,2,1,2,1},{3,0,2,1,3,3},{9,0,2,1,1,1},
	
		{10,1,0,1,1,2},{10,2,0,1,1,2},
		{10,1,1,1,1,2},{10,2,1,1,1,2},
		{10,1,2,1,1,2},{10,2,2,1,1,2},
		{3,1,4,3,1,2},
		{3,1,5,3,2,2},
	},
	o={ --table for objects
	 --{X, Y, Z, type, [additional parameters]}
		{864,352,144,3},
		{336,128,432,16},
		{0,128,480,23}
	},
	p={}, --table for portals (leave empty if the portals are not needed)
	lg={}, --light bridge generators
	lift={{-1,1,1,0},{2,1,7,2}}, --Initial and final elevator (X Y Z angle)
	pg_lvl=0, --portal gun lvl
	init=function()
		lvl_text_2={draw=false,pause=false,id=2,i=1,t=0}
		maps[1][2].t=0 --a variable for the level
	end,
	scripts=function()
		if lvl_t==50 then lvl_text_2.draw=true end
		if lvl_text_2.i>6 then maps[1][2].t=maps[1][2].t+1 end
		if maps[1][2].t==1 then
			draw.p[1]={2,1,0,3,1,0}
			draw.p[2]={7,1,0,3,1,0}
			draw.objects.cd[1].t=2
			draw.objects.cd[1].ct=1
			update_world()
		end
		if draw.objects.fb[1].tick then
			if draw.objects.fb[1].s then
				addwall(1,1,6,3,3,12)
				addwall(2,1,6,3,3,11)
			else
				addwall(1,1,6,3,3,14)
				addwall(2,1,6,3,3,13)
			end
			draw.objects.d[1].s=draw.objects.fb[1].s
			update_world()
		end
	end
}
maps[1][3]={
	w={
		--floor
		{0,0,0,2,2,1},{1,0,0,2,2,1},{2,0,0,2,2,1},{3,0,0,2,2,1},{4,0,0,2,2,1},{5,0,0,2,2,1},{6,0,0,2,2,1},{7,0,0,2,2,1},
		{0,0,1,2,2,1},{1,0,1,2,2,1},{2,0,1,2,2,1},{3,0,1,2,2,1},{4,0,1,2,2,1},{5,0,1,2,2,1},{6,0,1,2,2,1},{7,0,1,2,2,1},
		{0,0,2,2,2,1},{1,0,2,2,2,1},{2,0,2,2,2,1},{3,0,2,2,2,1},{4,0,2,2,2,1},{5,0,2,2,2,1},{6,0,2,2,2,1},{7,0,2,2,2,1},
		{0,0,3,2,2,1},{1,0,3,2,2,1},{2,0,3,2,2,1},{3,0,3,2,2,1},{4,0,3,2,2,1},{5,0,3,2,2,1},{6,0,3,2,2,1},{7,0,3,2,2,1},
		{2,0,4,2,2,1},{3,0,4,2,2,1},{4,0,4,2,2,1},{5,0,4,2,2,1},
		{2,0,5,2,2,1},{3,0,5,2,2,1},{4,0,5,2,2,1},{5,0,5,2,2,1},

		{0,2,0,2,1,2},{1,2,0,2,1,2},{2,2,0,2,1,2},{3,2,0,2,1,2},{4,2,0,2,1,2},{5,2,0,2,1,2},{6,2,0,2,1,2},{7,2,0,2,1,2},
		{0,2,1,2,1,2},{1,2,1,2,1,2},{2,2,1,2,1,2},{3,2,1,2,1,2},{4,2,1,2,1,2},{5,2,1,2,1,2},{6,2,1,2,1,2},{7,2,1,2,1,2},
		{0,2,2,2,1,2},{1,2,2,2,1,2},{2,2,2,2,1,2},{3,2,2,2,1,2},{4,2,2,2,1,2},{5,2,2,2,1,2},{6,2,2,2,1,2},{7,2,2,2,1,2},
		{0,2,3,2,1,2},{1,2,3,2,1,2},{2,2,3,2,1,2},{3,2,3,2,1,2},{4,2,3,2,1,2},{5,2,3,2,1,2},{6,2,3,2,1,2},{7,2,3,2,1,2},
		{2,2,4,2,1,2},{3,2,4,2,1,2},{4,2,4,2,1,2},{5,2,4,2,1,2},
		{2,2,5,2,1,2},{3,2,5,2,1,2},{4,2,5,2,1,2},{5,2,5,2,1,2},
		--walls
		{0,0,0,1,2,2},{0,1,0,1,2,2},
		{0,0,1,1,2,2},{0,1,1,1,2,2},
		{0,0,2,1,2,2},{0,1,2,1,2,2},
		{0,0,3,1,2,2},{0,1,3,1,2,2},
		
		{2,0,0,1,3,4},
		{2,0,1,1,3,4},
		{2,0,2,1,3,4},
		{2,0,3,1,3,4},

		{6,0,0,1,3,4},
		{6,0,1,1,3,4},
		{6,0,2,1,3,4},
		{6,0,3,1,3,4},
		
		{8,0,0,1,1,2},{8,1,0,1,1,2},
		{8,0,1,1,1,2},{8,1,1,1,1,2},
		{8,0,2,1,1,2},{8,1,2,1,1,2},
		{8,0,3,1,1,2},{8,1,3,1,1,2},
		--
		{0,0,0,3,1,2},{0,1,0,3,1,2},
		{1,0,0,3,1,2},{1,1,0,3,1,2},
		{2,0,0,3,1,10},{2,1,0,3,1,2},
		{3,0,0,3,3,12},{3,1,0,3,1,2},
		{4,0,0,3,3,11},{4,1,0,3,1,2},
		{5,0,0,3,1,2},{5,1,0,3,1,2},
		{6,0,0,3,1,2},{6,1,0,3,1,2},
		{7,0,0,3,1,2},{7,1,0,3,1,2},

		
		{0,0,4,3,2,2},{0,1,4,3,2,2},
		{1,0,4,3,2,2},{1,1,4,3,2,2},
		{2,0,4,3,3,15},
		{3,0,4,3,3,15},
		{4,0,4,3,3,15},
		{5,0,4,3,3,15},
		{6,0,4,3,2,2},{6,1,4,3,2,2},
		{7,0,4,3,2,2},{7,1,4,3,2,2},

		{6,0,2,3,3,7},{0,0,2,3,3,7},
		{7,0,2,3,3,7},{1,0,2,3,3,7},
		
		{2,0,6,3,2,1},{2,1,6,3,2,1},
		{3,0,6,3,2,1},{3,1,6,3,2,1},
		{4,0,6,3,2,1},{4,1,6,3,2,1},
		{5,0,6,3,2,1},{5,1,6,3,2,1},
		--
		{2,0,5,1,2,2},{2,1,5,1,2,1},
		{2,0,4,1,2,1},{2,1,4,1,2,1},

		{6,0,5,1,3,13},{6,1,5,1,1,2},
		{6,0,4,1,3,14},{6,1,4,1,1,2},
		
	},
	o={ --table for objects
	 --{X, Y, Z, type, [additional parameters]}
		{209,0,93,8,30},
		{561,0,275,9,30},
		{210,0,368,11,30},
		{96,0,96,16},
		{672,224,96,3},
		{672,0,96,1,1},
		{480,0,480,23},
	},
	p={}, --table for portals (leave empty if the portals are not needed)
	lg={}, --light bridge generators
	lift={{4,0,-1,3},{7,0,5,1}}, --Initial and final elevator (X Y Z angle)
	pg_lvl=0, --portal gun lvl
	init=function()
		lvl_text_2={draw=false,pause=false,id=2,i=1,t=0}
		draw.p[2]={5,0,0,3,1,0}
	end,
	scripts=function()
		if draw.objects.b[1].tick and draw.objects.b[1].s then
			if draw.p[1] then addwall(draw.p[1][1],draw.p[1][2],draw.p[1][3],draw.p[1][4],draw.p[1][5],2) draw.p[1]=nil update_world() end
			draw.p[1]={0,0,4,3,2,0}
			update_world()
		end
		if draw.objects.b[2].tick and draw.objects.b[2].s then
			if draw.p[1] then addwall(draw.p[1][1],draw.p[1][2],draw.p[1][3],draw.p[1][4],draw.p[1][5],2) draw.p[1]=nil update_world() end
			draw.p[1]={8,0,3,1,1,0}
			update_world()
		end
		if draw.objects.b[3].tick and draw.objects.b[3].s then
			if draw.p[1] then addwall(draw.p[1][1],draw.p[1][2],draw.p[1][3],draw.p[1][4],draw.p[1][5],2) draw.p[1]=nil update_world() end
			draw.p[1]={2,0,5,1,2,0}
			update_world()
		end
		if draw.objects.fb[1].tick then
			if draw.objects.fb[1].s then
				addwall(6,0,5,1,3,11)
				addwall(6,0,4,1,3,12)
			else
				addwall(6,0,5,1,3,13)
				addwall(6,0,4,1,3,14)
			end
			draw.objects.d[1].s=draw.objects.fb[1].s
			update_world()
		end
	end
}
maps[1][4]={
	w={
		--floor
		{0,0,3,2,2,1},{0,1,3,2,3,4},{0,2,3,2,1,1},
		{0,0,4,2,2,1},{0,1,4,2,3,4},{0,2,4,2,1,1},

		{1,0,1,2,2,1},{2,0,1,2,2,1},{3,0,1,2,2,1},{4,0,1,2,2,1},{5,0,1,2,2,1},{6,0,1,2,2,1},
		{1,0,2,2,2,1},{2,0,2,2,2,1},{3,0,2,2,2,1},{4,0,2,2,2,1},{5,0,2,2,2,1},{6,0,2,2,2,1},
		{1,0,3,2,2,1},{2,0,3,2,2,1},{3,0,3,2,2,1},{4,0,3,2,2,1},{5,0,3,2,2,1},{6,0,3,2,2,1},
		{1,0,4,2,2,1},{2,0,4,2,2,1},{3,0,4,2,2,1},{4,0,4,2,2,1},{5,0,4,2,2,1},{6,0,4,2,2,1},
		{1,0,5,2,2,1},{2,0,5,2,2,1},{3,0,5,2,2,1},{4,0,5,2,2,1},{5,0,5,2,2,1},{6,0,5,2,2,1},
		{1,0,6,2,2,1},{2,0,6,2,2,1},{3,0,6,2,2,1},{4,0,6,2,2,1},{5,0,6,2,2,1},{6,0,6,2,2,1},

		{1,3,1,2,1,1},{2,3,1,2,1,1},{3,3,1,2,1,1},{4,3,1,2,1,1},{5,3,1,2,1,1},{6,3,1,2,1,1},
		{1,3,2,2,1,1},{2,3,2,2,1,1},{3,3,2,2,1,1},{4,3,2,2,1,1},{5,3,2,2,1,1},{6,3,2,2,1,1},
		{1,3,3,2,1,1},{2,3,3,2,1,1},{3,3,3,2,1,1},{4,3,3,2,1,1},{5,3,3,2,1,1},{6,3,3,2,1,1},
		{1,3,4,2,1,1},{2,3,4,2,1,1},{3,3,4,2,1,1},{4,3,4,2,1,1},{5,3,4,2,1,1},{6,3,4,2,1,1},
		{1,3,5,2,1,1},{2,3,5,2,1,1},{3,3,5,2,1,1},{4,3,5,2,1,1},{5,3,5,2,1,1},{6,3,5,2,1,1},
		{1,3,6,2,1,1},{2,3,6,2,1,1},{3,3,6,2,1,1},{4,3,6,2,1,1},{5,3,6,2,1,1},{6,3,6,2,1,1},
		--walls
		{0,0,3,3,1,8},
		{0,0,5,3,2,2},

		{1,0,1,1,2,2}, {1,1,1,1,2,2},{1,2,1,1,2,1},
		{1,0,2,1,2,2}, {1,1,2,1,2,2},{1,2,2,1,2,1},
		{0,0,3,1,3,12},{1,1,3,1,3,3},{1,2,3,1,2,1},{0,1,3,1,2,2},{0,1,3,3,1,2},
		{0,0,4,1,3,11},{1,1,4,1,3,3},{1,2,4,1,2,1},{0,1,4,1,2,2},{0,1,5,3,2,2},
		{1,0,5,1,2,2}, {1,1,5,1,2,2},{1,2,5,1,2,1},
		{1,0,6,1,2,2}, {1,1,6,1,2,2},{1,2,6,1,2,1},
		
		{7,0,1,1,1,2},{7,1,1,1,1,1}, {7,2,1,1,1,1},
		{7,0,2,1,1,2},{7,1,2,1,1,1}, {7,2,2,1,1,1},
		{7,0,3,1,1,2},{7,1,3,1,3,14},{7,2,3,1,1,1},
		{7,0,4,1,1,2},{7,1,4,1,3,13},{7,2,4,1,1,1},
		{7,0,5,1,1,2},{7,1,5,1,1,1}, {7,2,5,1,1,1},
		{7,0,6,1,1,2},{7,1,6,1,1,1}, {7,2,6,1,1,1},

		{1,0,1,3,1,2},{1,1,1,3,1,2},{1,2,1,3,1,1},
		{2,0,1,3,1,2},{2,1,1,3,1,2},{2,2,1,3,1,1},
		{3,0,1,3,1,2},{3,1,1,3,1,1},{3,2,1,3,1,1},
		{4,0,1,3,1,2},{4,1,1,3,1,1},{4,2,1,3,1,1},
		{5,0,1,3,1,2},{5,1,1,3,1,1},{5,2,1,3,1,1},
		{6,0,1,3,1,2},{6,1,1,3,1,1},{6,2,1,3,1,1},
		
		{1,0,7,3,2,2},{1,1,7,3,2,2},{1,2,7,3,2,1},
		{2,0,7,3,2,2},{2,1,7,3,2,2},{2,2,7,3,2,1},
		{3,0,7,3,2,2},{3,1,7,3,2,1},{3,2,7,3,2,16},
		{4,0,7,3,2,2},{4,1,7,3,2,1},{4,2,7,3,2,17},
		{5,0,7,3,2,2},{5,1,7,3,2,1},{5,2,7,3,2,1},
		{6,0,7,3,2,2},{6,1,7,3,2,1},{6,2,7,3,2,1},
		
	},
	o={ --table for objects
	 --{X, Y, Z, type, [additional parameters]}
		{112,0,480,8,60},
	},
	p={}, --table for portals (leave empty if the portals are not needed)
	lg={{0,0,3,3,1}}, --light bridge generators
	lift={{-1,0,4,0},{8,1,4,1}}, --Initial and final elevator (X Y Z angle)
	pg_lvl=0, --portal gun lvl
	init=function()
		lvl_text_2={draw=false,pause=false,id=3,i=1,t=0}
	end,
	scripts=function()
		if lvl_t==50 then
			lvl_text_2.draw=true
		end
		if lvl_text_2.i==2 then plr.pg_lvl=1 end
		if lvl_t==85 or (draw.objects.b[1].tick and draw.objects.b[1].s) then
			draw.p[2]={0,0,5,3,2,0}
			update_world()
		end
		if plr.x>500 and plr.y>130 and draw.map[1][7][1][3][2]==14 then
			addwall(7,1,3,1,3,12)
			addwall(7,1,4,1,3,11)
			update_world()
		elseif (plr.x<500 or plr.y<130) and draw.map[1][7][1][3][2]==12 then
			addwall(7,1,3,1,3,14)
			addwall(7,1,4,1,3,13)
			update_world()

		end
	end
}
maps[1][5]={
	w={
		--floor
		{0,2,9,2,2,1},{0,2,8,2,2,1},{0,2,7,2,2,1},{0,2,6,2,2,1},
		{1,2,9,2,2,1},{1,2,8,2,2,1},{1,2,7,2,2,1},{1,2,6,2,2,1},
		{2,2,9,2,2,1},{2,2,8,2,2,1},{2,2,7,2,2,1},{2,2,6,2,2,1},
		{3,2,9,2,2,1},{3,2,8,2,2,1},{3,2,7,2,2,1},{3,2,6,2,2,1},{3,0,5,2,2,3},{3,0,4,2,2,3},{3,0,3,2,2,3},{3,0,2,2,2,3},
		{4,2,9,2,2,1},{4,2,8,2,2,1},{4,2,7,2,2,1},{4,2,6,2,2,1},{4,0,5,2,2,3},{4,0,4,2,2,1},{4,0,3,2,2,1},{4,0,2,2,2,3},
		{5,2,9,2,2,1},{5,2,8,2,2,1},{5,2,7,2,2,1},{5,2,6,2,2,1},{5,0,5,2,2,3},{5,0,4,2,2,1},{5,0,3,2,2,1},{5,0,2,2,2,3},
		{6,2,9,2,2,1},{6,2,8,2,2,1},{6,2,7,2,2,1},{6,2,6,2,2,1},{6,0,5,2,2,3},{6,0,4,2,2,3},{6,0,3,2,2,3},{6,0,2,2,2,3},
		{7,2,9,2,2,1},{7,2,8,2,2,1},{7,2,7,2,2,1},{7,2,6,2,2,1},{7,2,5,2,2,1},{7,2,4,2,2,1},
		{8,2,9,2,2,1},{8,2,8,2,2,1},{8,2,7,2,2,1},{8,2,6,2,2,1},{8,2,5,2,2,1},{8,2,4,2,2,1},
		{9,2,9,2,2,1},{9,2,8,2,2,1},{9,2,7,2,2,1},{9,2,6,2,2,1},{9,2,5,2,2,1},{9,2,4,2,2,1},
		--ceiling
		{0,4,9,2,1,2},{0,4,8,2,1,2},{0,4,7,2,1,2},{0,4,6,2,1,2},
		{1,4,9,2,1,2},{1,4,8,2,1,2},{1,4,7,2,1,2},{1,4,6,2,1,2},
		{2,4,9,2,1,2},{2,4,8,2,1,2},{2,4,7,2,1,2},{2,4,6,2,1,2},
		{3,4,9,2,1,2},{3,4,8,2,1,2},{3,4,7,2,1,2},{3,4,6,2,1,2},{3,4,5,2,1,2},{3,4,4,2,1,2},{3,4,3,2,1,2},{3,4,2,2,1,2},
		{4,4,9,2,1,2},{4,4,8,2,1,2},{4,4,7,2,1,2},{4,4,6,2,1,2},{4,4,5,2,1,2},{4,4,4,2,1,2},{4,4,3,2,1,2},{4,4,2,2,1,2},
		{5,4,9,2,1,2},{5,4,8,2,1,2},{5,4,7,2,1,2},{5,4,6,2,1,2},{5,4,5,2,1,2},{5,4,4,2,1,2},{5,4,3,2,1,2},{5,4,2,2,1,2},
		{6,4,9,2,1,2},{6,4,8,2,1,2},{6,4,7,2,1,2},{6,4,6,2,1,2},{6,4,5,2,1,2},{6,4,4,2,1,2},{6,4,3,2,1,2},{6,4,2,2,1,2},
		{7,4,9,2,1,2},{7,4,8,2,1,2},{7,4,7,2,1,2},{7,4,6,2,1,2},{7,4,5,2,1,2},{7,4,4,2,1,2},
		{8,4,9,2,1,2},{8,4,8,2,1,2},{8,4,7,2,1,2},{8,4,6,2,1,2},{8,4,5,2,1,2},{8,4,4,2,1,2},
		{9,4,9,2,1,2},{9,4,8,2,1,2},{9,4,7,2,1,2},{9,4,6,2,1,2},{9,4,5,2,1,2},{9,4,4,2,1,2},
		--walls
		{0,2,9,1,2,2}, {0,3,9,1,2,2},
		{0,2,8,1,3,11},{0,3,8,1,2,2},
		{0,2,7,1,3,12},{0,3,7,1,2,2},
		{0,2,6,1,2,2}, {0,3,6,1,2,2},

		{4,2,9,1,3,4},{4,3,9,1,3,4},
		{4,2,8,1,3,4},{4,3,8,1,3,4},
		{4,2,7,1,3,4},{4,3,7,1,3,4},
		
		{10,2,9,1,1,2}, {10,3,9,1,1,2},
		{10,2,8,1,3,13},{10,3,8,1,1,2},
		{10,2,7,1,3,14},{10,3,7,1,1,2},
		{10,2,6,1,1,2}, {10,3,6,1,1,2},
		{10,2,5,1,1,2}, {10,3,5,1,1,2},
		{10,2,4,1,1,2}, {10,3,4,1,1,2},
		
		{7,0,5,1,1,2},{7,1,5,1,1,2},
		{7,0,4,1,1,2},{7,1,4,1,1,2},
		{7,0,3,1,1,2},{7,1,3,1,1,2},{7,2,3,1,1,2},{7,3,3,1,1,2},
		{7,0,2,1,1,2},{7,1,2,1,1,2},{7,2,2,1,1,2},{7,3,2,1,1,2},
		
		{3,0,5,1,2,2},{3,1,5,1,2,2},{3,2,5,1,2,2},{3,3,5,1,2,2},
		{3,0,4,1,2,2},{3,1,4,1,2,2},{3,2,4,1,2,2},{3,3,4,1,2,2},
		{3,0,3,1,2,2},{3,1,3,1,2,2},{3,2,3,1,2,2},{3,3,3,1,2,2},
		{3,0,2,1,2,2},{3,1,2,1,2,2},{3,2,2,1,2,2},{3,3,2,1,2,2},

		{0,2,10,3,2,2},{0,3,10,3,2,2},
		{1,2,10,3,2,2},{1,3,10,3,2,2},
		{2,2,10,3,2,2},{2,3,10,3,2,2},
		{3,2,10,3,2,2},{3,3,10,3,2,2},
		{4,2,10,3,2,2},{4,3,10,3,2,2},
		{5,2,10,3,2,2},{5,3,10,3,2,2},
		{6,2,10,3,2,2},{6,3,10,3,2,2},
		{7,2,10,3,2,2},{7,3,10,3,2,2},
		{8,2,10,3,2,2},{8,3,10,3,2,2},
		{9,2,10,3,2,2},{9,3,10,3,2,2},
		
		{0,2,6,3,1,10},{0,3,6,3,1,2},
		{1,2,6,3,1,2},{1,3,6,3,1,2}, --
		{2,2,6,3,1,2},{2,3,6,3,1,2},
		{3,0,2,3,1,2},{3,1,2,3,1,2},{3,2,2,3,1,2},{3,3,2,3,1,2}, {3,0,6,3,2,2},{3,1,6,3,2,2},
		{4,0,2,3,1,2},{4,1,2,3,1,2},{4,2,2,3,1,2},{4,3,2,3,1,2}, {4,0,6,3,2,2},{4,1,6,3,2,2},
		{5,0,2,3,1,2},{5,1,2,3,1,2},{5,2,2,3,1,2},{5,3,2,3,1,2}, {5,0,6,3,2,2},{5,1,6,3,2,2},
		{6,0,2,3,1,2},{6,1,2,3,1,2},{6,2,2,3,1,2},{6,3,2,3,1,2}, {6,0,6,3,2,2},{6,1,6,3,2,2},
		{7,2,4,3,1,2},{7,3,4,3,1,2},
		{8,2,4,3,1,2},{8,3,4,3,1,2},
		{9,2,4,3,1,2},{9,3,4,3,1,2},
	},
	o={ --table for objects
		{480,480,384,3},
		{480,24,384,1,1},
		{240,256,816,16},
		{864,256,864,22},
	},
	p={}, --table for portals (leave empty if the portals are not needed)
	lg={}, --light bridge generators
	lift={{-1,2,8,0},{11,2,8,1}}, --Initial and final elevator (X Y Z angle)
	pg_lvl=1, --portal gun lvl
	init=function()
		lvl_text_2={draw=false,pause=false,id=3,i=1,t=0}
	end,
	scripts=function()
		if lvl_t==50 then
			update_world()
			draw.p[2]={1,2,6,3,1,0}
		end
		if draw.objects.fb[1].tick then
			if draw.objects.fb[1].s then
				addwall(10,2,8,1,3,11)
				addwall(10,2,7,1,3,12)
			else
				addwall(10,2,8,1,3,13)
				addwall(10,2,7,1,3,14)
			end
			draw.objects.d[1].s=draw.objects.fb[1].s
			update_world()
		end
	end
}
maps[1][6]={
	w={
		{0,0,0,2,2,1},{0,0,1,2,2,1},{0,0,2,2,2,1},{0,0,3,2,2,1},{0,0,4,2,2,1},{0,0,5,2,2,1},
		{1,0,0,2,2,1},{1,0,1,2,2,1},{1,0,2,2,2,1},{1,0,3,2,2,1},{1,0,4,2,2,1},{1,0,5,2,2,1},
		{2,0,0,2,2,1},{2,0,1,2,2,1},{2,0,2,2,2,1},{2,0,3,2,2,1},{2,0,4,2,2,1},{2,0,5,2,2,1},{2,0,6,2,2,1},{2,0,7,2,2,1},{2,0,8,2,2,1},
		{3,0,0,2,2,1},{3,0,1,2,2,1},{3,0,2,2,2,1},{3,0,3,2,2,1},{3,0,4,2,2,1},{3,0,5,2,2,1},{3,0,6,2,2,1},{3,0,7,2,2,1},{3,0,8,2,2,1},
		{4,0,0,2,2,1},{4,0,1,2,2,1},{4,0,2,2,2,1},{4,0,3,2,2,1},{4,0,4,2,2,1},{4,0,5,2,2,1},
		{5,0,0,2,2,1},{5,0,1,2,2,1},{5,0,2,2,2,1},{5,0,3,2,2,1},{5,0,4,2,2,1},{5,0,5,2,2,1},
		
		{0,3,0,2,1,2},{0,3,1,2,1,2},{0,3,2,2,1,2},{0,3,3,2,1,2},{0,3,4,2,1,2},{0,3,5,2,1,2},
		{1,3,0,2,1,2},{1,3,1,2,1,2},{1,3,2,2,1,2},{1,3,3,2,1,2},{1,3,4,2,1,2},{1,3,5,2,1,2},
		{2,3,0,2,1,2},{2,3,1,2,1,2},{2,3,2,2,1,2},{2,3,3,2,1,2},{2,3,4,2,1,2},{2,3,5,2,1,2},{2,1,6,2,1,1},{2,1,7,2,1,1},{2,1,8,2,1,1},
		{3,3,0,2,1,2},{3,3,1,2,1,2},{3,3,2,2,1,2},{3,3,3,2,1,2},{3,3,4,2,1,2},{3,3,5,2,1,2},{3,1,6,2,1,1},{3,1,7,2,1,1},{3,1,8,2,1,1},
		{4,3,0,2,1,2},{4,3,1,2,1,2},{4,3,2,2,1,2},{4,3,3,2,1,2},{4,3,4,2,1,2},{4,3,5,2,1,2},
		{5,3,0,2,1,2},{5,3,1,2,1,2},{5,3,2,2,1,2},{5,3,3,2,1,2},{5,3,4,2,1,2},{5,3,5,2,1,2},

		{0,0,0,1,2,2},{0,0,1,1,2,2},{0,0,2,1,2,1},{0,0,3,1,2,1},{0,0,4,1,2,2},{0,0,5,1,2,2},
		{0,1,0,1,2,2},{0,1,1,1,2,2},{0,1,2,1,2,1},{0,1,3,1,2,1},{0,1,4,1,2,2},{0,1,5,1,2,2},
		{0,2,0,1,2,2},{0,2,1,1,2,2},{0,2,2,1,2,2},{0,2,3,1,2,2},{0,2,4,1,2,2},{0,2,5,1,2,2},


		{6,0,0,1,1,2},{6,0,1,1,1,2},{6,0,2,1,1,1},{6,0,3,1,1,1},{6,0,4,1,1,2},{6,0,5,1,1,2},
		{6,1,0,1,1,2},{6,1,1,1,1,2},{6,1,2,1,1,1},{6,1,3,1,1,1},{6,1,4,1,1,2},{6,1,5,1,1,2},
		{6,2,0,1,1,2},{6,2,1,1,1,2},{6,2,2,1,1,2},{6,2,3,1,1,2},{6,2,4,1,1,2},{6,2,5,1,1,2},

		{0,0,0,3,1,2},{1,0,0,3,1,2},{2,0,0,3,3,14},{3,0,0,3,3,13},{4,0,0,3,1,2},{5,0,0,3,1,2},
		{0,1,0,3,1,2},{1,1,0,3,1,2},{2,1,0,3,1,2 },{3,1,0,3,1,2 },{4,1,0,3,1,2},{5,1,0,3,1,2},
		{0,2,0,3,1,2},{1,2,0,3,1,2},{2,2,0,3,1,2 },{3,2,0,3,1,2 },{4,2,0,3,1,2},{5,2,0,3,1,2},
		
		{0,0,6,3,2,2},{1,0,6,3,2,2},{2,0,6,3,3,12},{3,0,6,3,3,11},{4,0,6,3,2,2},{5,0,6,3,2,2},
		{0,1,6,3,2,2},{1,1,6,3,2,2},{2,1,6,3,2,2 },{3,1,6,3,2,2 },{4,1,6,3,2,2},{5,1,6,3,2,2},
		{0,2,6,3,2,2},{1,2,6,3,2,2},{2,2,6,3,2,2 },{3,2,6,3,2,2 },{4,2,6,3,2,2},{5,2,6,3,2,2},

		{2,0,9,3,2,2},{3,0,9,3,2,2},

		{4,0,8,1,1,2 },{2,0,8,1,3,11},
		{4,0,7,1,1,10},{2,0,7,1,3,12},
		{4,0,6,1,1,2 },{2,0,6,1,2,2},

		{0,2,2,2,3,1},{0,2,3,2,3,1},
		{5,2,2,2,3,1},{5,2,3,2,3,1},

		--
		{1,0,2,1,3,3},{1,0,3,1,3,3},{1,1,2,1,3,3},{1,1,3,1,3,3},
		{5,0,2,1,3,3},{5,0,3,1,3,3},{5,1,2,1,3,3},{5,1,3,1,3,3},
		
		{0,0,2,3,3,3},{0,0,4,3,3,3},{0,1,2,3,3,3},{0,1,4,3,3,3},
		{5,0,2,3,3,3},{5,0,4,3,3,3},{5,1,2,3,3,3},{5,1,4,3,3,3},


	},
	o={ --table for objects
	 --{X, Y, Z, type, [additional parameters]}
	{528,352,288,1},
	{48,352,288,1},

	{384,0,288,16},
	{192,0,288,16},

	{384,0,0,24},
	{96,0,0, 24},
	},
	p={}, --table for portals (leave empty if the portals are not needed)
	lg={}, --light bridge generators
	lift={{1,0,8,0},{3,0,-1,3}}, --Initial and final elevator (X Y Z angle)
	pg_lvl=1, --portal gun lvl
	init=function()
		lvl_text_2={draw=false,pause=false,id=3,i=1,t=0}
	end,
	scripts=function()
		if lvl_t==50 then
			draw.p[2]={0,2,2,1,2}
			update_world()
		end

		for i = 1,2 do
			if draw.objects.fb[i].tick then
				draw.objects.d[i].s=draw.objects.fb[i].s
			end
		end

		if draw.objects.fb[1].tick or draw.objects.fb[2].tick then
			if draw.objects.fb[1].s and draw.objects.fb[2].s then
				addwall(2,0,0,3,3,12)
				addwall(3,0,0,3,3,11)
			else
				addwall(2,0,0,3,3,14)
				addwall(3,0,0,3,3,13)
			end
			update_world()
		end
	end
}
maps[1][7]={
	w={
		--floor
		{0 ,0,1,2,2,1},{0 ,0,2,2,2,1},{0 ,0,3,2,2,1},{0 ,0,4,2,2,1},{0 ,0,5,2,2,1},{0 ,0,6,2,2,1},{0 ,0,7,2,2,1},{0 ,0,8,2,2,1},{0 ,0,9,2,2,1},{0 ,0,10,2,2,1},
		{1 ,0,1,2,2,1},{1 ,0,2,2,2,1},{1 ,0,3,2,2,1},{1 ,0,4,2,2,1},{1 ,0,5,2,2,1},{1 ,0,6,2,2,1},{1 ,0,7,2,2,1},{1 ,0,8,2,2,1},{1 ,0,9,2,2,1},{1 ,0,10,2,2,1},
		{2 ,0,1,2,2,1},{2 ,0,2,2,2,1},{2 ,0,4,2,2,1},{2 ,0,5,2,2,1},{2 ,0,6,2,2,1},{2 ,0,7,2,2,1},{2 ,0,8,2,2,1},{2 ,0,9,2,2,1},
		{3 ,0,1,2,2,1},{3 ,0,2,2,2,1},{3 ,0,4,2,2,1},{3 ,0,5,2,2,1},{3 ,0,6,2,2,1},{3 ,0,7,2,2,1},{3 ,0,8,2,2,1},{3 ,0,9,2,2,1},
		{4 ,0,0,2,2,1},{4 ,0,1,2,2,1},{4 ,0,2,2,2,1},{4 ,0,4,2,2,1},{4 ,0,5,2,2,1},{4 ,0,6,2,2,1},{4 ,0,7,2,2,1},{4 ,0,8,2,2,1},
		{5 ,0,0,2,2,1},{5 ,0,1,2,2,1},{5 ,0,2,2,2,1},{5 ,0,4,2,2,1},{5 ,0,5,2,2,1},{5 ,0,6,2,2,1},{5 ,0,7,2,2,1},{5 ,0,8,2,2,1},
		{6 ,0,0,2,2,1},{6 ,0,1,2,2,1},{6 ,0,2,2,2,1},{6 ,0,4,2,2,1},{6 ,0,5,2,2,1},{6 ,0,6,2,2,1},{6 ,0,7,2,2,1},{6 ,0,8,2,2,1},{6 ,0,9,2,2,1},{6 ,0,10,2,2,1},
		{7 ,0,1,2,2,1},{7 ,0,2,2,2,1},{7 ,0,4,2,2,1},{7 ,0,5,2,2,1},{7 ,0,6,2,2,1},{7 ,0,7,2,2,1},{7 ,0,8,2,2,1},{7 ,0,9,2,2,1},{7 ,0,10,2,2,1},
		{8 ,0,1,2,2,1},{8 ,0,2,2,2,1},{8 ,0,4,2,2,1},{8 ,0,5,2,2,1},{8 ,0,6,2,2,1},{8 ,0,7,2,2,1},{8 ,0,8,2,2,1},{8 ,0,9,2,2,1},{8 ,0,10,2,2,1},
		{9 ,0,1,2,2,1},{9 ,0,2,2,2,1},{9 ,0,3,2,2,1},{9 ,0,4,2,2,1},{9 ,0,5,2,2,1},{9 ,0,6,2,2,1},{9 ,0,9,2,2,1},{9 ,0,10,2,2,1},
		{10,0,1,2,2,1},{10,0,2,2,2,1},{10,0,3,2,2,1},{10,0,4,2,2,1},{10,0,5,2,2,1},{10,0,6,2,2,1},{10,0,9,2,2,1},{10,0,10,2,2,1},
		--ceiling
		{0 ,2,1,2,1,2},{0 ,2,2,2,1,2},{0 ,2,3,2,1,2},{0 ,2,4,2,1,2},{0 ,2,5,2,1,2},{0 ,2,6,2,1,2},{0 ,2,7,2,1,2},{0 ,2,8,2,1,2},{0 ,2,9,2,1,2},{0 ,2,10,2,1,2},
		{1 ,2,1,2,1,2},{1 ,2,2,2,1,2},{1 ,2,3,2,1,2},{1 ,2,4,2,1,2},{1 ,2,5,2,1,2},{1 ,2,6,2,1,2},{1 ,2,7,2,1,2},{1 ,2,8,2,1,2},{1 ,2,9,2,1,2},{1 ,2,10,2,1,2},
		{2 ,2,1,2,1,2},{2 ,2,2,2,1,2},{2 ,2,4,2,1,2},{2 ,2,5,2,1,2},{2 ,2,6,2,1,2},{2 ,2,7,2,1,2},{2 ,2,8,2,1,2},{2 ,2,9,2,1,2},
		{3 ,2,1,2,1,2},{3 ,2,2,2,1,2},{3 ,2,4,2,1,2},{3 ,2,5,2,1,2},{3 ,2,6,2,1,2},{3 ,2,7,2,1,2},{3 ,2,8,2,1,2},{3 ,2,9,2,1,2},
		{4 ,1,0,2,1,2},{4 ,2,1,2,1,2},{4 ,2,2,2,1,2},{4 ,2,4,2,1,2},{4 ,2,5,2,1,2},{4 ,2,6,2,1,2},{4 ,2,7,2,1,2},{4 ,2,8,2,1,2},
		{5 ,1,0,2,1,2},{5 ,2,1,2,1,2},{5 ,2,2,2,1,2},{5 ,2,4,2,1,2},{5 ,2,5,2,1,2},{5 ,2,6,2,1,2},{5 ,2,7,2,1,2},{5 ,2,8,2,1,2},
		{6 ,1,0,2,1,2},{6 ,2,1,2,1,2},{6 ,2,2,2,1,2},{6 ,2,4,2,1,2},{6 ,2,5,2,1,2},{6 ,2,6,2,1,2},{6 ,2,7,2,1,2},{6 ,2,8,2,1,2},{6 ,2,9 ,2,1,2},{6 ,2,10,2,1,2},
		{7 ,2,1,2,1,2},{7 ,2,2,2,1,2},{7 ,2,4,2,1,2},{7 ,2,5,2,1,2},{7 ,2,6,2,1,2},{7 ,2,7,2,1,2},{7 ,2,8,2,1,2},{7 ,2,9,2,1,2},{7 ,2,10,2,1,2},
		{8 ,2,1,2,1,2},{8 ,2,2,2,1,2},{8 ,2,4,2,1,2},{8 ,2,5,2,1,2},{8 ,2,6,2,1,2},{8 ,2,7,2,1,2},{8 ,2,8,2,1,2},{8 ,2,9,2,1,2},{8 ,2,10,2,1,2},
		{9 ,2,1,2,1,2},{9 ,2,2,2,1,2},{9 ,2,3,2,1,2},{9 ,2,4,2,1,2},{9 ,2,5,2,1,2},{9 ,2,6,2,1,2},{9 ,2,9,2,1,2},{9 ,2,10,2,1,2},
		{10,2,1,2,1,2},{10,2,2,2,1,2},{10,2,3,2,1,2},{10,2,4,2,1,2},{10,2,5,2,1,2},{10,2,6,2,1,2},{10,2,9,2,1,2},{10,2,10,2,1,2},
		--walls
		{11,0,1,1,1,2},{11,1,1,1,1,2},
		{11,0,2,1,1,2},{11,1,2,1,1,2},
		{11,0,3,1,1,2},{11,1,3,1,1,2},
		{11,0,4,1,1,2},{11,1,4,1,1,2},
		{11,0,5,1,3,12},{11,1,5,1,1,2},
		{11,0,6,1,3,11},{11,1,6,1,1,2},
		
		{9,0,3,1,2,1},{9,1,3,1,2,1},
		{9,0,4,1,3,4},{9,1,4,1,3,1},
		{9,0,5,1,3,4},{9,1,5,1,3,1},
		{9,0,6,1,3,4},{9,1,6,1,3,1},
		{9,0,7,1,1,2},{9,1,7,1,1,2},
		{9,0,8,1,1,2},{9,1,8,1,1,2},
		{9,0,9 ,1,3,3},{11,0,9 ,1,3,12},{11,1,9 ,1,1,2},
		{9,0,10,1,3,3},{11,0,10,1,3,11},{11,1,10,1,1,2},
		
		{0,0,1,1,2,2},{0,1,1,1,2,2},
		{0,0,2,1,2,2},{0,1,2,1,2,2},
		{0,0,3,1,2,2},{0,1,3,1,2,2},
		{0,0,4,1,2,2},{0,1,4,1,2,2},
		{0,0,5,1,2,2},{0,1,5,1,2,2},
		{0,0,6,1,2,2},{0,1,6,1,2,2},
		{0,0,7,1,2,2},{0,1,7,1,2,2},
		{0,0,8,1,2,2},{0,1,8,1,2,2},
		{0,0,9,1,2,2},{0,1,9,1,2,2},
		{0,0,10,1,2,2},{0,1,10,1,2,2},
		
		{2,0,3,1,3,1},{2,1,3,1,3,1},
		{2,0,4,1,3,1},{2,1,4,1,3,1},
		{2,0,5,1,3,4},{2,1,5,1,3,1},
		{2,1,6,1,3,1},
		{2,1,7,1,3,1},
		{2,0,8,1,3,4},{2,1,8,1,3,1},
		{2,0,9,1,3,4},{2,1,9,1,3,1},
		{2,0,10,1,3,1},{2,1,10,1,3,1},
		
		{4,1,4,1,3,1},
		{4,1,5,1,3,1},
		{4,0,6,1,3,1},{4,1,6,1,3,1},
		{4,0,7,1,3,1},{4,1,7,1,3,1},
		{4,0,8,1,3,1},{4,1,8,1,3,1},
		{4,0,9,1,1,1},{4,1,9,1,1,1},
		
		{6,0,9,1,2,2},{6,1,9,1,2,2},
		{6,0,10,1,2,2},{6,1,10,1,2,2},
		--
		{0 ,0,1,3,1,2},{0 ,1,1,3,1,2},
		{1 ,0,1,3,1,2},{1 ,1,1,3,1,2},
		{2 ,0,1,3,1,2},{2 ,1,1,3,1,2},
		{3 ,0,1,3,1,2},{3 ,1,1,3,1,2}, {4 ,0,0,1,2,2},
		{4 ,0,1,3,3,15},{4 ,1,1,3,1,2}, {4 ,0,0,3,1,2},
		{5 ,0,1,3,3,15},{5 ,1,1,3,1,2}, {5 ,0,0,3,1,2},
		{6 ,0,1,3,3,15},{6 ,1,1,3,1,2}, {6 ,0,0,3,1,2},
		{7 ,0,1,3,1,2},{7 ,1,1,3,1,2}, {7 ,0,0,1,1,2},
		{8 ,0,1,3,1,2},{8 ,1,1,3,1,2},
		{9 ,0,1,3,1,2},{9 ,1,1,3,1,2},
		{10,0,1,3,1,2},{10,1,1,3,1,2},
		
		{9,0,7,3,2,10},{9 ,1,7,3,2,2},
		{10,0,7,3,2,2},{10,1,7,3,2,2},
		
		{9 ,0,9,3,1,2},{9 ,1,9,3,1,2},
		{10,0,9,3,1,2},{10,1,9,3,1,2},
		
		
		{0 ,0,11,3,2,2},{0 ,1,11,3,2,2},
		{1 ,0,11,3,2,2},{1 ,1,11,3,2,2},
		{2 ,0,10,3,2,2},{2 ,1,10,3,2,2},
		{3 ,0,10,3,2,2},{3 ,1,10,3,2,2},
		{4 ,0,9,3,2,2},{4 ,1,9,3,2,2},
		{5 ,0,9,3,2,2},{5 ,1,9,3,2,2},
		{6 ,0,11,3,2,2},{6 ,1,11,3,2,2},
		{7 ,0,11,3,2,2},{7 ,1,11,3,2,2},
		{8 ,0,11,3,2,2},{8 ,1,11,3,2,2},
		{9 ,0,11,3,2,2},{9 ,1,11,3,2,2},
		{10,0,11,3,2,2},{10,1,11,3,2,2},
		
		{6 ,0,9,3,3,1},{6 ,1,9,3,3,1},
		{7 ,0,9,3,3,14},{7 ,1,9,3,3,1},
		{8 ,0,9,3,3,13},{8 ,1,9,3,3,1},

		
		{2 ,0,3,3,2,2},{2 ,1,3,3,2,2},
		{3 ,0,3,3,2,2},{3 ,1,3,3,2,2},
		{4 ,0,3,3,2,2},{4 ,1,3,3,2,2},
		{5 ,0,3,3,2,2},{5 ,1,3,3,2,2},
		{6 ,0,3,3,2,2},{6 ,1,3,3,2,2},
		{7 ,0,3,3,2,2},{7 ,1,3,3,2,2},
		{8 ,0,3,3,2,2},{8 ,1,3,3,2,2},
		
		{2 ,0,4,3,1,2},{2 ,1,4,3,1,2},
		{3 ,0,4,3,1,2},{3 ,1,4,3,1,2},
		{4 ,0,4,3,1,2},{4 ,1,4,3,1,2},
		{5 ,0,4,3,1,2},{5 ,1,4,3,1,2},
		{6 ,0,4,3,1,2},{6 ,1,4,3,1,2},
		{7 ,0,4,3,1,2},{7 ,1,4,3,1,2},
		{8 ,0,4,3,1,2},{8 ,1,4,3,1,2},
	},
	o={ --table for objects
		{620,0,620,16},
		{96,224,960,3},
		{96-24,24,960-24,1,1},
		{96-24,24,960+24,1,1},
		{96+24,24,960+24,1,1},
		{96,72,960,1,1},

		{600,0,768,23},

		--12 13 14 15
		{960,0,336,14},
		{528,0,48,15},
		{288,0,480,15},
		{288,0,864,14},
		{432,0,600,13},
		{960,0,960,12},
	},
	p={}, --table for portals (leave empty if the portals are not needed)
	lg={}, --light bridge generators
	lift={{12,0,6,1},{12,0,10,1}}, --Initial and final elevator (X Y Z angle)
	pg_lvl=2, --portal gun lvl
	init=function()
		lvl_text_2={draw=false,pause=false,id=4,i=1,t=0}
	end,
	scripts=function()
		if lvl_t==50 then
			lvl_text_2={draw=true,pause=false,id=4,i=1,t=0}
		end
		if lvl_text_2.draw and lvl_text_2.i==2 and peek(0x13FFC)~=1 then
			music(1)
		end
		if draw.objects.fb[1].tick then
			if draw.objects.fb[1].s then
				addwall(7,0,9,3,3,12)
				addwall(8,0,9,3,3,11)
			else
				addwall(7,0,9,3,3,14)
				addwall(8,0,9,3,3,13)
			end
			draw.objects.d[1].s=draw.objects.fb[1].s
			update_world()
		end
		if plr.x>1080 and plr.z>800 and lvl_text_2.id==4 then lvl_text_2={draw=true,pause=false,id=5,i=1,t=0} music(3,3) end
	end
}
maps[0][2]={ --main gameroom
	w={ --table for walls
	--{X, Y, Z, angle, face, type}
	},
	o={ --table for objects
	 --{X, Y, Z, type, [additional parameters]}
	 {2.5*96,0,2.5*96,16},
	 {3.5*96,256-32,3.5*96,3},
	 {3.5*96,24,3.5*96,2,1},
	 {800,0,900,15},

	},
	p={}, --table for portals (leave empty if the portals are not needed)
	lg={{0,0,1,1,2}}, --light bridge generators
	lift={{1,0,-1,3},{-1,0,10,0}}, --Initial and final elevator (X Y Z angle)
	pg_lvl=2, --portal gun lvl
	init=function()end,
	scripts=function()

		lvl_text_2={draw=false,pause=false,id=1,i=1,t=0}
		if draw.objects.fb[1].tick then
			if draw.objects.fb[1].s then
				draw.lg[1]=nil
			else
				draw.lg[1]={0,0,1,1,2}
			end
			update_world()
		end
	end
}

maps[0][1]={ --world from the main menu
w={
	{2,0,2,1,3,4},
	{4,0,2,1,1,2},
	{2,0,3,1,3,4},
	{4,0,3,1,1,2},
	{2,0,2,3,3,4},
	{3,0,2,3,3,4},
	{2,0,4,3,3,4},
	{3,0,4,3,3,4},
	{4,0,1,1,1,2},
	{4,0,0,1,1,2},
	{5,0,5,1,1,13},
	{5,0,4,1,1,14},
	{4,0,4,3,1,2},
	--
	{0,0,0,1,2,2},{0,0,1,1,2,2},{0,0,2,1,2,2},{0,0,3,1,2,2},{0,0,4,1,2,2},{0,0,5,1,2,2},
	--
	{0,0,6,3,2,2},{1,0,6,3,2,2},{2,0,6,3,2,2},{3,0,6,3,2,2},{4,0,6,3,2,2},
	--
	{0,0,0,3,1,2},{1,0,0,3,1,2},{2,0,0,3,1,2},{3,0,0,3,1,2},
	--
	{0,0,0,2,2,1},{1,0,0,2,2,1},{2,0,0,2,2,1},{3,0,0,2,2,1},
	{0,0,1,2,2,1},{1,0,1,2,2,1},{2,0,1,2,2,1},{3,0,1,2,2,1},
	{0,0,2,2,2,1},{1,0,2,2,2,1},{2,0,2,2,2,1},{3,0,2,2,2,1},
	{0,0,3,2,2,1},{1,0,3,2,2,1},{2,0,3,2,2,1},{3,0,3,2,2,1},
	{0,0,4,2,2,1},{1,0,4,2,2,1},{2,0,4,2,2,1},{3,0,4,2,2,1},{4,0,4,2,2,1},
	{0,0,5,2,2,1},{1,0,5,2,2,1},{2,0,5,2,2,1},{3,0,5,2,2,1},{4,0,5,2,2,1},
	--
	{0,1,0,2,1,2},{1,1,0,2,1,2},{2,1,0,2,1,2},{3,1,0,2,1,2},
	{0,1,1,2,1,2},{1,1,1,2,1,2},{2,1,1,2,1,2},{3,1,1,2,1,2},
	{0,1,2,2,1,2},{1,1,2,2,1,2},{2,1,2,2,1,2},{3,1,2,2,1,2},
	{0,1,3,2,1,2},{1,1,3,2,1,2},{2,1,3,2,1,2},{3,1,3,2,1,2},
	{0,1,4,2,1,2},{1,1,4,2,1,2},{2,1,4,2,1,2},{3,1,4,2,1,2},{4,1,4,2,1,2},
	{0,1,5,2,1,2},{1,1,5,2,1,2},{2,1,5,2,1,2},{3,1,5,2,1,2},{4,1,5,2,1,2},

},
o={},
p={{4,0,2,1,1,0},{4,0,0,1,1,0}},
lg={},
lift={nil,nil},
pg_lvl=2, --portal gun lvl
init=function()end,
scripts=function() lvl_text_2={draw=false,pause=false,id=1,i=1,t=0}end
}

do --a little guide about the terrible code
	for x=0,10 do
		for y=0,3 do
			if R()>0.7 then maps[0][2].w[#maps[0][2].w+1]={x,y,0 ,3,1,1} else maps[0][2].w[#maps[0][2].w+1]={x,y,0 ,3,1,2} end
			if R()>0.7 then maps[0][2].w[#maps[0][2].w+1]={x,y,11,3,2,1} else maps[0][2].w[#maps[0][2].w+1]={x,y,11,3,2,2} end
			if R()>0.7 then maps[0][2].w[#maps[0][2].w+1]={0 ,y,x,1,2,1} else maps[0][2].w[#maps[0][2].w+1]={0 ,y,x,1,2,2} end
			if R()>0.7 then maps[0][2].w[#maps[0][2].w+1]={11,y,x,1,1,1} else maps[0][2].w[#maps[0][2].w+1]={11,y,x,1,1,2} end
		end

		for z=0,10 do
			maps[0][2].w[#maps[0][2].w+1]={x,0,z,2,2,2}
			maps[0][2].w[#maps[0][2].w+1]={x,4,z,2,1,2}
			if z<3 then
				maps[0][2].w[#maps[0][2].w+1]={x,2,z,2,3,4}
			end
		end
	end

	maps[0][2].w[#maps[0][2].w+1]={0 ,0,1 ,1,2,9}
	maps[0][2].w[#maps[0][2].w+1]={3 ,0,11,3,2,9}
	maps[0][2].w[#maps[0][2].w+1]={0 ,1,2 ,1,2,16}
	maps[0][2].w[#maps[0][2].w+1]={0 ,1,3 ,1,2,17}
	maps[0][2].w[#maps[0][2].w+1]={0 ,0,6 ,3,3,12}
	maps[0][2].w[#maps[0][2].w+1]={1 ,0,6 ,3,3,11}
	maps[0][2].w[#maps[0][2].w+1]={2 ,0,5 ,1,1,2}
	maps[0][2].w[#maps[0][2].w+1]={3 ,0,5 ,1,2,2}
	maps[0][2].w[#maps[0][2].w+1]={2 ,0,6 ,3,1,2}
	maps[0][2].w[#maps[0][2].w+1]={2 ,0,5 ,3,2,2}
	maps[0][2].w[#maps[0][2].w+1]={2 ,1,5 ,2,2,2}
	maps[0][2].w[#maps[0][2].w+1]={3 ,0,6 ,3,3,14}
	maps[0][2].w[#maps[0][2].w+1]={4 ,0,6 ,3,3,13}
	maps[0][2].w[#maps[0][2].w+1]={5 ,0,6 ,3,3,1}
	maps[0][2].w[#maps[0][2].w+1]={6 ,0,6 ,3,3,15}
	maps[0][2].w[#maps[0][2].w+1]={7 ,0,6 ,3,3,3}
	maps[0][2].w[#maps[0][2].w+1]={8 ,0,6 ,3,3,3}
	maps[0][2].w[#maps[0][2].w+1]={9 ,0,6 ,3,3,4}
	maps[0][2].w[#maps[0][2].w+1]={10,0,6 ,3,3,7}
	maps[0][2].w[#maps[0][2].w+1]={6 ,0,5 ,2,2,9}
	maps[0][2].w[#maps[0][2].w+1]={6 ,0,6 ,2,2,9}
	maps[0][2].w[#maps[0][2].w+1]={3 ,0,5 ,2,2,9}
	maps[0][2].w[#maps[0][2].w+1]={0 ,0,10,1,3,11}
	maps[0][2].w[#maps[0][2].w+1]={0 ,0,9 ,1,3,12}
	maps[0][2].w[#maps[0][2].w+1]={0 ,0,0 ,3,3,12}
	maps[0][2].w[#maps[0][2].w+1]={1 ,0,0 ,3,3,11}
	maps[0][2].w[#maps[0][2].w+1]={11,0,1 ,1,1,2}
	maps[0][2].w[#maps[0][2].w+1]={3 ,2,3 ,2,3,2}
end
--song text
local song_text={
	"This is one of the",
	"few games that took",
	"us weeks of hard",
	"work to develop.",
	"    ",
	"Yes, we are not the",
	"first to make portal",
	"3D in TIC-80",
	"(although in fact we",
	"were the first to do",
	"it) but we are the",
	"first to turn it into",
	"a full-fledged game",
	"with a bunch of",
	"interesting mechanics,",
	"putting our soul into",
	"the development of",
	"this game.",
	"    ",
	"We hope you enjoyed",
	"this game and it",
	"deserves a like,",
	"we really tried",
	"very hard.",
	"    ",
}

local song_text_2={1,1} --some data to display the text above
--
local function sfx_(...)
if st.sfx then sfx(...) end
end
function addp(x,y,z,vx,vy,vz,lifetime,color) --add particle
	draw.pr[#draw.pr+1]={x=x,y=y,z=z,vx=vx,vy=vy,vz=vz,lt=lifetime,t=0,c=color}
end


function debug_addp(x, y, z, text, i)
	-- 'text' is a string or a table with strings, that will be displayed near this point
	-- 'i' is a index of this point (if nil, this point is added, otherwise the existing point is changed)
	if not i then i = #draw.debug_p + 1 end
	draw.debug_p[i] = {x=x, y=y, z=z, text=text}
end
--Texture cache

local blue_field={} --Texture for the blue field
local portal_texture={{},{}} --portal texture
for y0=0,31 do
	blue_field[y0]={}
	portal_texture[1][y0]={} --blue portal
	portal_texture[2][y0]={} --orange portal
	local c=false
	for x0=0,23 do
		local color1=getpix(x0+24,y0+32)
		local color2=getpix((x0+23)%24+24,y0+32)

		if color1~=15 then blue_field[y0][3]=color1 c=true end
		if color1~=color2 then
			if color1==15 then blue_field[y0][1]=x0 else blue_field[y0][2]=x0 end
		end
		portal_texture[1][y0][x0]=getpix(96+x0,0 +y0)
		portal_texture[2][y0][x0]=getpix(0 +x0,32+y0)
	end

	blue_field[y0].d=c
end

local lvl_board={} --Level board (a thing on which the current level is written)
for i=0,9 do
	lvl_board[i]={}
	for x=0,6 do
		lvl_board[i][x]={}
		for y=0,10 do
			local addr=0x8000+x+i*8+y*240
			lvl_board[i][x][y]=7
			if peek(addr)==255 then lvl_board[i][x][y]=1 end
		end
	end
end
--collision

local function coll(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4) --collision of two cubes
	return (x1 < x4 and x2 > x3 and y1 < y4 and y2 > y3 and z1 < z4 and z2 > z3)
end

local function min_abs(a, b)
	if abs(a) < abs(b) then return a else return b end
end

local function max_abs(a, b)
	if abs(a) > abs(b) then return a else return b end
end

local function coll_shift(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4, axis)
	if not coll(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4) then
		return 0
	end

	if axis == 1 then
		return min_abs(x3 - x2, x4 - x1)
	elseif axis == 2 then
		return min_abs(y3 - y2, y4 - y1)
	elseif axis == 3 then
		return min_abs(z3 - z2, z4 - z1)
	end
end

local function raycast_legacy(x1,y1,z1, x2,y2,z2, hitwalls,hitfloors, precise) -- walk along a segment, checking whether it collides with the walls
	-- convert to tile space
	x1, y1, z1, x2, y2, z2 = x1 / 96, y1 / 128, z1 / 96, x2 / 96, y2 / 128, z2 / 96
	-- DDA, loosely based on https://lodev.org/cgtutor/raycasting.html
	-- segment direction
	local dirx, diry, dirz = x2-x1, y2-y1, z2-z1
	-- length of one step along axes (only relative)
	-- n/0 = inf, which is fine for this algorithm
	local lx, ly, lz = abs(1 / dirx), abs(1 / diry), abs(1 / dirz)
	-- full tile step, matching direction with the segment
	local sx, sy, sz
	-- offset, for handling negative facing
	local ox, oy, oz
	-- current tile (offset if facing positive)
	local x, y, z = F(x1), F(y1), F(z1)
	-- distance to next tile in each axis
	local tx, ty, tz = (x1 - x) * lx, (y1 - y) * ly, (z1 - z) * lz
	if dirx < 0 then
		sx, ox = -1, 1
	else
		sx, ox = 1, 0
		tx = lx - tx
	end
	if diry < 0 then
		sy, oy = -1, 1
	else
		sy, oy = 1, 0
		ty = ly - ty
	end
	if dirz < 0 then
		sz, oz = -1, 1
	else
		sz, oz = 1, 0
		tz = lz - tz
	end

	if x < 0 or x > world_size[1] - 1 or
		y < 0 or y > world_size[2] - 1 or
		z < 0 or z > world_size[3] - 1 then
		return
	end

	while true do
		if tx < ty and tx < tz then
			x, tx = x + sx, tx + lx
			if (x + ox) * sx > x2 * sx or (x + ox) < 0 or (x + ox) > world_size[1] - 1 then
				return
			elseif hitwalls[draw.map[1][x + ox][y][z][2]] then
				if precise then
					local ratio = (x + ox - x1) / dirx
					return (x + ox) * 96, (y1 + diry * ratio) * 128, (z1 + dirz * ratio) * 96, 1
				else
					return x + ox, y, z, 1
				end
			elseif x < 0 then
				return
			end
		elseif ty < tz then
			y, ty = y + sy, ty + ly
			if (y + oy) * sy > y2 * sy or (y + oy) < 0 or (y + oy) > world_size[2] - 1 then
				return
			elseif hitfloors[draw.map[2][x][y + oy][z][2]] then
				if precise then
					local ratio = (y + oy - y1) / diry
					return (x1 + dirx * ratio) * 96, (y + oy) * 128, (z1 + dirz * ratio) * 96, 1
				else
					return x, y + oy, z, 2
				end
			elseif y < 0 then
				return
			end
		else
			z, tz = z + sz, tz + lz
			if (z + oz) * sz > z2 * sz or (z + oz) < 0 or (z + oz) > world_size[3] - 1 then
				return
			elseif hitwalls[draw.map[3][x][y][z + oz][2]] then
				if precise then
					local ratio = (z + oz - z1) / dirz
					return (x1 + dirx * ratio) * 96, (y1 + diry * ratio) * 128, (z + oz) * 96, 1
				else
					return x, y, z + oz, 3
				end
			elseif z < 0 then
				return
			end
		end
	end
end

local function portalcenter(i)
	local x, y, z = table.unpack(draw.p[i])
	if draw.p[i][4] == 1 then
		x = x
		y = y + 0.5
		z = z + 0.5
	elseif draw.p[i][4] == 3 then
		x = x + 0.5
		y = y + 0.5
		z = z
	elseif draw.p[i][4] == 2 then
		if draw.p[i][6] == 1 or draw.p[i][6] == 3 then
			x = x + 0.5
			y = y
			z = z + 1
		elseif draw.p[i][6] == 2 or draw.p[i][6] == 4 then
			x = x + 1
			y = y
			z = z + 0.5
		end
	end

	return x, y, z
end

local function teleport(pid --[[portal id]],x,y,z,tx,ty, vx, vy, vz)
	if not vx then vx,vy,vz = 0,0,0 end

	local x1, y1, z1 = portalcenter(1)
	local x2, y2, z2 = portalcenter(2)

	-- calculate portal offsets
	local relx1 = x - 96 * x1
	local rely1 = y - 128 * y1
	local relz1 = z - 96 * z1
	local relx2 = x - 96 * x2
	local rely2 = y - 128 * y2
	local relz2 = z - 96 * z2

	-- calculate portal rotation
	local rot1 = draw.p[1][4] // 2 + (draw.p[1][5] - 1) * 2
	local rot2 = draw.p[2][4] // 2 + (draw.p[2][5] - 1) * 2
	local rotd1 = (2 + rot2 - rot1) % 4
	local rotd2 = (2 + rot1 - rot2) % 4

	if     rotd1 == 0 then
	elseif rotd1 == 1 then relx1,relz1=relz1,-relx1  if pid==1 then vx,vz =  vz,-vx end
	elseif rotd1 == 2 then relx1,relz1=-relx1,-relz1 if pid==1 then vx,vz = -vx,-vz end
	elseif rotd1 == 3 then relx1,relz1=-relz1,relx1  if pid==1 then vx,vz = -vz, vx end
  	end

	if     rotd2 == 0 then
	elseif rotd2 == 1 then relx2,relz2=relz2,-relx2  if pid==2 then vx,vz =  vz,-vx end
	elseif rotd2 == 2 then relx2,relz2=-relx2,-relz2 if pid==2 then vx,vz = -vx,-vz end
	elseif rotd2 == 3 then relx2,relz2=-relz2,relx2  if pid==2 then vx,vz = -vz, vx end
  	end

	if tx then
		if pid==1 then
			return 96*x2 + relx1, 128*y2 + rely1, 96*z2 + relz1,tx,ty + math.pi * rotd1 / 2, vx, vy, vz
		elseif pid==2 then
			return 96*x1 + relx2,128*y1 + rely2,96*z1 + relz2,tx,ty + math.pi * rotd2 / 2, vx, vy, vz
		end
	else
		if pid==1 then
			return 96*x2 + relx1, 128*y2 + rely1, 96*z2 + relz1, vx, vy, vz
		elseif pid==2 then
			return 96*x1 + relx2,128*y1 + rely2,96*z1 + relz2, vx, vy, vz
		end
	end
end

local function get_tile(axis, x, y, z)
	local step = draw.map
	step = step[axis]
	step = step[x]
	if not step then return nil end
	step = step[y]
	if not step then return nil end
	step = step[z]
	return step
end

-- Calculate the difference between a value and the next step in a direction
local function to_next(val, interval, dir)
	-- Round to remove fp error
	local nval = F(val + 0.5)
	local next_pos
	if dir > 0 then
		next_pos = F(nval / interval) * interval + interval
	else
		next_pos = math.ceil(nval / interval) * interval - interval
	end
	return next_pos - val
end

-- Check if a ray hits an object's colliders
local function ray_object(x, y, z, rx, ry, rz, obj)
	local nearest = 1/0
	local colliders = obj.coll or model[obj.type].coll
	for _,collider in ipairs(colliders) do
		local cx1, cy1, cz1 =
			(obj.x + collider[1] - x) / rx, (obj.y + collider[2] - y) / ry, (obj.z + collider[3] - z) / rz
		local cx2, cy2, cz2 =
			(obj.x + collider[4] - x) / rx, (obj.y + collider[5] - y) / ry, (obj.z + collider[6] - z) / rz
		if cx1 > cx2 then cx1, cx2 = cx2, cx1 end
		if cy1 > cy2 then cy1, cy2 = cy2, cy1 end
		if cz1 > cz2 then cz1, cz2 = cz2, cz1 end
		local near, far = max(cx1, cy1, cz1), min(cx2, cy2, cz2)
		if near > 0 and near <= far and near < nearest then nearest = near end
	end
	if nearest ~= 1/0 then
		return nearest
	end
end

local function raycast(x, y, z, rx, ry, rz, len, params)
	-- allow passing an end point instead
	if not len then
		rx, ry, rz = rx - x, ry - y, rz - z
	end

	-- normalised ray vector
	local dist = math.sqrt(rx^2 + ry^2 + rz^2)
	local nx, ny, nz = rx / dist, ry / dist, rz / dist
	local tilehit
	local newx, newy, newz, newrx, newrz

	-- allow passing an end point instead
	len = len or dist

	-- current scan coordinates and remaining length
	local cx, cy, cz = x, y, z
	local remaining_len = len

	while true do
		-- calculate the amount each component should step
		local sx, sy, sz = to_next(cx, 96, rx), to_next(cy, 128, ry), to_next(cz, 96, rz)
		-- calculate the distance travelled by each component step
		local lx, ly, lz = sx / nx, sy / ny, sz / nz
		-- select the smallest as the next step
		local lookup, axis
		if lx < ly and lx < lz then
			cx, cy, cz = cx + sx, cy + lx * ny, cz + lx * nz
			remaining_len = remaining_len - lx
			lookup, axis = params.walls, 1
		elseif ly < lz then
			cx, cy, cz = cx + ly * nx, cy + sy, cz + ly * nz
			remaining_len = remaining_len - ly
			lookup, axis = params.floors, 2
		else
			cx, cy, cz = cx + lz * nx, cy + lz * ny, cz + sz
			remaining_len = remaining_len - lz
			lookup, axis = params.walls, 3
		end
		-- stop if we've travelled far enough
		if remaining_len < 0 then break end
		-- fetch and check the current tile
		local tx, ty, tz = (cx+0.01)//96, (cy+0.01)//128, (cz+0.01)//96
		tile = get_tile(axis, tx, ty, tz)
		if not tile then break end
		-- Check for, and prepare to pass through portals (if enabled)
		if params.portals and draw.p[1] and draw.p[2] then
			local rot1 = draw.p[1][4] // 2 + (draw.p[1][5] - 1) * 2
			local rot2 = draw.p[2][4] // 2 + (draw.p[2][5] - 1) * 2
			local rotd1 = (2 + rot2 - rot1) % 4
			local rotd2 = (2 + rot1 - rot2) % 4
			if tile[2] == 5 then
				newx, newy, newz = teleport(1, cx, cy, cz)
				if     rotd1 == 0 then newrx,newrz=rx,rz
				elseif rotd1 == 1 then newrx,newrz=rz,-rx
				elseif rotd1 == 2 then newrx,newrz=-rx,-rz
				elseif rotd1 == 3 then newrx,newrz=-rz,rx
				end
				break
			end
			if tile[2] == 6 then
				newx, newy, newz = teleport(2, cx, cy, cz)
				if     rotd2 == 0 then newrx,newrz=rx,rz
				elseif rotd2 == 1 then newrx,newrz=rz,-rx
				elseif rotd2 == 2 then newrx,newrz=-rx,-rz
				elseif rotd2 == 3 then newrx,newrz=-rz,rx
				end
				break
			end
		end
		if lookup[tile[2]] then
			-- we hit a tile, break out of the loop and start testing objects
			tilehit = {
				x=cx, y=cy, z=cz, len=len - remaining_len,
				tx=tx, ty=ty, tz=tz,
				axis=axis, tile=tile
			}
			break
		end
	end
	-- scan through all objects, find nearest intersection
	local objhit
	for _,ty in ipairs(params.objs) do
		for _,obj in ipairs(draw.objects[ty]) do
			local hit_len = ray_object(x, y, z, rx, ry, rz, obj)
			if hit_len and hit_len * dist < len then
				if not objhit or objhit.len > hit_len * dist then
					objhit = {
						x=x+rx*hit_len, y=y+ry*hit_len, z=z+rz*hit_len, len=hit_len*dist,
						obj=obj,
					}
				end
			end
		end
	end
	-- same for player
	if params.player then
		hit_len = ray_object(x, y, z, rx, ry, rz, {
			x=plr.x, y=plr.y, z=plr.z,
			coll={{-16,-64,-16,16,16,16}},
		})
		if hit_len and hit_len * dist < len then
			if not objhit or objhit.len > hit_len * dist then
				objhit = {
					x=x+rx*hit_len, y=y+ry*hit_len, z=z+rz*hit_len, len=hit_len*dist,
					player=true,
				}
			end
		end
	end
	-- we entered a portal, resume the raycast at the other end
	if newx then
		local hit = raycast(newx, newy, newz, newrx, ry, newrz, remaining_len, params)
		if hit then
			hit.len = hit.len + len - remaining_len
		end
		return hit
	end
	-- return the shortest found intersection
	if not objhit or (tilehit and tilehit.len < objhit.len) then
		return tilehit
	else
		return objhit
	end
end


--code compiler

--[[
	FAQ (Frequently Asked Questions):
	
	Q: What is it?
	A: This is a code compiler.

	Q: What is it for?
	A: In this case, the compiled code is faster than usual
		(Please note that the results may vary depending on the situation).

	Q: But Lua is not a compiled programming language, is it?
	A: Not really, Lua compiles to bytecode, which is faster than the source code, but still requires an interpreter.
		In this case, we translate the code into bytecode, which gives a good speed boost.

	Q: Wasn't it easier to do ...?
	A: We are looking for the most optimized and productive ways, not the easiest ones.

	Q: But this will not give an increase in speed because ...
	A: First check for yourself and compare the speed (and make sure you're doing it right) before making similar conclusions.

	Q: Why not compile the whole code?
	A: This is not necessary, because the other parts do not significantly affect the fps,
		and not all of them in the compiled version will be faster.
]]
function compile_code()
	local code = {}
	local objs_compiled_update = {}
	code[1] = [[
	function compiled_update(cam, unitic, draw)

	local v = {}

	local v2 = draw.world.v
	local txsin=math.sin( cam.tx)
	local txcos=math.cos( cam.tx)
	local tysin=math.sin(-cam.ty)
	local tycos=math.cos(-cam.ty)

	local cam_x = cam.x
	local cam_y = cam.y
	local cam_z = cam.z
	
	local a1,b1,c1,c2,a3,b3,c3,c4,z0
	]]

	local i = 0
	for z=0,world_size[1]-1 do for y=0,world_size[2]-1 do for x=0,world_size[3]-1 do
		i = i + 1

		table.insert(draw.world.v,{x*96,y*128,z*96,false})
		code[i+1]=string.format([[
		if v2[%i][4] then
			a1 = %i - cam_x
			b1 = %i - cam_y
			c1 = %i - cam_z

			c2=c1*tycos-a1*tysin

			a3=c1*tysin+a1*tycos
			b3=b1*txcos-c2*txsin
			c3=b1*txsin+c2*txcos

			z0 = unitic.fov / c3

			v[ %i ] = {z0 * a3 + 120 ,z0 * b3 + 68 ,-c3, a3, b3 }
		end
		]] ,i ,x*96 ,y*128 ,z*96 ,i, i)
	end end end

	code[#code+1]= [[
		
	return v
	end]]

	code = table.concat(code)

	--load
	local func,error_message = load(code)
	
	assert(func,error_message)

	func()

	function unitic.update_compiled()
		unitic.poly.v = compiled_update(cam,unitic,draw)
	end

	--How about compiling models?
	for obj_i = 1, #model do
		model[obj_i].compiled = function() end

		code = {}

		code[1] = [[
			function obj_compiled_update(obj_x, obj_y, obj_z, v2, cam, unitic, draw)
		
			local v = unitic.poly.v
		
			local txsin=math.sin( cam.tx)
			local txcos=math.cos( cam.tx)
			local tysin=math.sin(-cam.ty)
			local tycos=math.cos(-cam.ty)
		
			local obj_x = obj_x - cam.x
			local obj_y = obj_y - cam.y
			local obj_z = obj_z - cam.z
			
			local a1,b1,c1,c2,a3,b3,c3,c4,z0

		]]
		
		for i = 1, #model[obj_i].v do
			local obj_v = model[obj_i].v[i]
			code[i+1] = string.format([[

				a1 = %f + obj_x
				b1 = %f + obj_y
				c1 = %f + obj_z
	
				c2=c1*tycos-a1*tysin
	
				a3=c1*tysin+a1*tycos
				b3=b1*txcos-c2*txsin
				c3=b1*txsin+c2*txcos
	
				z0 = unitic.fov / c3
	
				v[v2 + %i ] = {z0 * a3 + 120 ,z0 * b3 + 68 ,-c3, a3, b3 }

			]], obj_v[1], obj_v[2], obj_v[3], i)

		end
		
		code[#code + 1] = string.format("return v end", #model[obj_i].v)
		
		code = table.concat(code)

		--load
		local func,error_message = load(code)
		
		assert(func,error_message)

		func()

		objs_compiled_update[obj_i] = obj_compiled_update

		model[obj_i].compiled = function(obj_x, obj_y, obj_z, obj_id, v2)
			unitic.poly.v = objs_compiled_update[obj_id](obj_x, obj_y, obj_z, v2, cam, unitic, draw)
		end
	end
end
function ttri_clip( -- ttri with Z-clipping
	-- 2D coordinates
	x1, y1,
	x2, y2,
	x3, y3,
	--UV coordinates
	u1, v1,
	u2, v2,
	u3, v3,

	bg, --bg color

	face, --polygon face

	-- 3D coordinates
	x3d1, y3d1, z1,
	x3d2, y3d2, z2,
	x3d3, y3d3, z3,

	z_coef)

	if not z_coef then z_coef = 1 end
	if face == 0 then return 0 end

	local tri_face = true

	local pz1, pz2, pz3 = z1>=0, z2>=0, z3>=0
	
	if face ~= 3 then
		tri_face=(x2-x1)*(y3-y1)-(x3-x1)*(y2-y1)<0 == (face == 1)
		tri_face = (tri_face ~= pz1 ~= pz2 ~= pz3)
	end

	if not tri_face or not (pz1 or pz2 or pz3) then return 0 end

	if pz1 and pz2 and pz3 then
		ttri(
			x1, y1,
			x2, y2,
			x3, y3,

			u1, v1,
			u2, v2,
			u3, v3,
			0, bg,

			z1*z_coef, z2*z_coef, z3*z_coef)
	else
		--it`s time for magic
		local v ={ --3d coordinates and UV coordinates
			{x3d1, y3d1, -z1, u1, v1},
			{x3d2, y3d2, -z2, u2, v2},
			{x3d3, y3d3, -z3, u3, v3},
		}
		--points sort (bubble sort)
		if v[1][3] > v[2][3] then v[1],v[2] = v[2],v[1] end
		if v[2][3] > v[3][3] then v[2],v[3] = v[3],v[2] end
		if v[1][3] > v[2][3] then v[1],v[2] = v[2],v[1] end

		if v[2][3]<0 then --If 2 of 3 points from behind

			local v1,v2 = {nil,nil,-0.0001,nil,nil},{nil, nil,-0.0001,nil,nil}
			local t

			--interpolation
			t     = v[1][3]   /   (v[3][3] - v[1][3])

			v1[1] = v[1][1] - t * (v[3][1] - v[1][1])
			v1[2] = v[1][2] - t * (v[3][2] - v[1][2])
			v1[4] = v[1][4] - t * (v[3][4] - v[1][4])
			v1[5] = v[1][5] - t * (v[3][5] - v[1][5])
			
			--more interpolation
			t     = v[2][3]   /   (v[3][3] - v[2][3])

			v2[1] = v[2][1] - t * (v[3][1] - v[2][1])
			v2[2] = v[2][2] - t * (v[3][2] - v[2][2])
			v2[4] = v[2][4] - t * (v[3][4] - v[2][4])
			v2[5] = v[2][5] - t * (v[3][5] - v[2][5])

			v[3] = v1
			v[4] = v2

			--3d into 2d
			for i2 = 1,4 do
				local z0 = unitic.fov / v[i2][3]
				v[i2][1] = z0 * v[i2][1] + 120
				v[i2][2] = z0 * v[i2][2] + 68
			end
			ttri(v[1][1],v[1][2],v[2][1],v[2][2],v[3][1],v[3][2],v[1][4],v[1][5],v[2][4],v[2][5],v[3][4],v[3][5],0,bg,-v[1][3]*z_coef,-v[2][3]*z_coef,-v[3][3]*z_coef)
			ttri(v[2][1],v[2][2],v[3][1],v[3][2],v[4][1],v[4][2],v[2][4],v[2][5],v[3][4],v[3][5],v[4][4],v[4][5],0,bg,-v[2][3]*z_coef,-v[3][3]*z_coef,-v[4][3]*z_coef)
		else --If 1 of 3 points from behind
			local v1,v2 = {nil,nil,-0.0001,nil,nil},{nil,nil,-0.0001,nil,nil}
			local t
			
			t     = v[1][3]   /   (v[2][3] - v[1][3])

			v1[1] = v[1][1] - t * (v[2][1] - v[1][1])
			v1[2] = v[1][2] - t * (v[2][2] - v[1][2])
			v1[4] = v[1][4] - t * (v[2][4] - v[1][4])
			v1[5] = v[1][5] - t * (v[2][5] - v[1][5])
			
			t     = v[1][3]   /   (v[3][3] - v[1][3])

			v2[1] = v[1][1] - t * (v[3][1] - v[1][1])
			v2[2] = v[1][2] - t * (v[3][2] - v[1][2])
			v2[4] = v[1][4] - t * (v[3][4] - v[1][4])
			v2[5] = v[1][5] - t * (v[3][5] - v[1][5])

			v[2] = v1
			v[3] = v2
			--3d into 2d
			for i2 = 1,3 do
				local z0 = unitic.fov / v[i2][3]
				v[i2][1] = z0 * v[i2][1] + 120
				v[i2][2] = z0 * v[i2][2] + 68
			end
			ttri(v[1][1],v[1][2],v[2][1],v[2][2],v[3][1],v[3][2],v[1][4],v[1][5],v[2][4],v[2][5],v[3][4],v[3][5],0,bg,-v[1][3]*z_coef,-v[2][3]*z_coef,-v[3][3]*z_coef)
		end
	end
end

function unitic.update(draw_portal,p_id)
	--writing all polygons in unitic.poly
	unitic.poly = { v = {}, f = {}, sp = {} }
	unitic.obj  = {}
	unitic.p    = {}
	--world--
	for ind = 1, #draw.world.v do
		unitic.poly.v[ind] = { draw.world.v[ind][1], draw.world.v[ind][2], draw.world.v[ind][3] }
	end
	--faces
	if draw_portal==nil then
		for ind=1,#draw.world.f do unitic.poly.f[ind]={draw.world.f[ind][1],draw.world.f[ind][2],draw.world.f[ind][3],f=draw.world.f[ind].f,uv=draw.world.f[ind].uv} end
	elseif draw_portal and p_id==1 then
		for ind=1,#draw.world_bp.f do unitic.poly.f[ind]={draw.world_bp.f[ind][1],draw.world_bp.f[ind][2],draw.world_bp.f[ind][3],f=draw.world_bp.f[ind].f,uv=draw.world_bp.f[ind].uv} end
	elseif draw_portal and p_id==2 then
		for ind=1,#draw.world_op.f do unitic.poly.f[ind]={draw.world_op.f[ind][1],draw.world_op.f[ind][2],draw.world_op.f[ind][3],f=draw.world_op.f[ind].f,uv=draw.world_op.f[ind].uv} end
	else
		error("unknown function inputs | "..draw_portal.." "..p_id)
	end

	-- Rotate all vertices
	unitic.update_compiled()
	-- draw portals overlays
	local txsin = math.sin( cam.tx)
	local txcos = math.cos( cam.tx)
	local tysin = math.sin(-cam.ty)
	local tycos = math.cos(-cam.ty)

	if draw_portal then
		local p3d={} -- 3d coordinates
		local p2d={} -- 2d cooridnates
		local i = p_id
		if draw.p[i] then

			-- X Y Z
			if draw.p[i][4]==1 then
				p3d = {
					{draw.p[i][1]*96, draw.p[i][2] * 128      , draw.p[i][3]*96},
					{draw.p[i][1]*96, draw.p[i][2] * 128 + 128, draw.p[i][3]*96},
					
					{draw.p[i][1]*96, draw.p[i][2] * 128      , draw.p[i][3]*96 + 96},
					{draw.p[i][1]*96, draw.p[i][2] * 128 + 128, draw.p[i][3]*96 + 96},
				}
			elseif draw.p[i][4]==2 then

				if draw.p[i][6]==1 then
					p3d = {
						{draw.p[i][1]*96 + 96, draw.p[i][2] * 128, draw.p[i][3]*96 + 160},
						{draw.p[i][1]*96 + 96, draw.p[i][2] * 128, draw.p[i][3]*96 + 32 },
						
						{draw.p[i][1]*96, draw.p[i][2] * 128, draw.p[i][3]*96 + 160},
						{draw.p[i][1]*96, draw.p[i][2] * 128, draw.p[i][3]*96 + 32 },
					}
				elseif draw.p[i][6]==2 then
					p3d = {
						{draw.p[i][1]*96 + 160, draw.p[i][2] * 128, draw.p[i][3]*96},
						{draw.p[i][1]*96 + 32 , draw.p[i][2] * 128, draw.p[i][3]*96},
						
						{draw.p[i][1]*96 + 160, draw.p[i][2] * 128, draw.p[i][3]*96 + 96},
						{draw.p[i][1]*96 + 32 , draw.p[i][2] * 128, draw.p[i][3]*96 + 96},
					}
				elseif draw.p[i][6]==3 then
					p3d = {
						{draw.p[i][1]*96, draw.p[i][2] * 128, draw.p[i][3]*96 + 32 },
						{draw.p[i][1]*96, draw.p[i][2] * 128, draw.p[i][3]*96 + 160},
						
						{draw.p[i][1]*96 + 96, draw.p[i][2] * 128, draw.p[i][3]*96 + 32 },
						{draw.p[i][1]*96 + 96, draw.p[i][2] * 128, draw.p[i][3]*96 + 160},
					}
				else
					p3d = {
						{draw.p[i][1]*96 + 32 , draw.p[i][2] * 128, draw.p[i][3]*96 + 96},
						{draw.p[i][1]*96 + 160, draw.p[i][2] * 128, draw.p[i][3]*96 + 96},
						
						{draw.p[i][1]*96 + 32 , draw.p[i][2] * 128, draw.p[i][3]*96},
						{draw.p[i][1]*96 + 160, draw.p[i][2] * 128, draw.p[i][3]*96},
					}
				end

			elseif draw.p[i][4]==3 then
				p3d = {
					{draw.p[i][1]*96, draw.p[i][2] * 128      , draw.p[i][3]*96},
					{draw.p[i][1]*96, draw.p[i][2] * 128 + 128, draw.p[i][3]*96},
					
					{draw.p[i][1]*96 + 96, draw.p[i][2] * 128      , draw.p[i][3]*96},
					{draw.p[i][1]*96 + 96, draw.p[i][2] * 128 + 128, draw.p[i][3]*96},
				}
			end


			for i2 = 1, 4 do
				-- rotating
				local a1 = p3d[i2][1] - cam.x
				local b1 = p3d[i2][2] - cam.y
				local c1 = p3d[i2][3] - cam.z
		
				local c2 = c1 * tycos - a1 * tysin
		
				local a3 = c1 * tysin + a1 * tycos
				local b3 = b1 * txcos - c2 * txsin
				local c3 = b1 * txsin + c2 * txcos
				
				p3d[i2] = {a3, b3, c3}

				-- 3d into 2d

				local z0 = unitic.fov / c3

				local x0 = a3 * z0 + 120
				local y0 = b3 * z0 + 68

				p2d[i2] = {x0, y0, -c3, a3, b3}
			end

			if i==1 then
				ttri_clip(p2d[1][1],p2d[1][2],p2d[2][1],p2d[2][2],p2d[3][1],p2d[3][2],120,32,120,0,96,32,15, 3,  p2d[1][4],p2d[1][5],p2d[1][3] ,p2d[2][4],p2d[2][5],p2d[2][3] ,p2d[3][4],p2d[3][5],p2d[3][3], 0.999)
				ttri_clip(p2d[4][1],p2d[4][2],p2d[2][1],p2d[2][2],p2d[3][1],p2d[3][2],96 ,0 ,120,0,96,32,15, 3,  p2d[4][4],p2d[4][5],p2d[4][3] ,p2d[2][4],p2d[2][5],p2d[2][3] ,p2d[3][4],p2d[3][5],p2d[3][3], 0.999)
				ttri_clip(p2d[1][1],p2d[1][2],p2d[2][1],p2d[2][2],p2d[3][1],p2d[3][2],24,232,24,200,0,232,15, 3, p2d[1][4],p2d[1][5],p2d[1][3] ,p2d[2][4],p2d[2][5],p2d[2][3] ,p2d[3][4],p2d[3][5],p2d[3][3], 0.995)
				ttri_clip(p2d[4][1],p2d[4][2],p2d[2][1],p2d[2][2],p2d[3][1],p2d[3][2],0 ,200,24,200,0,232,15, 3, p2d[4][4],p2d[4][5],p2d[4][3] ,p2d[2][4],p2d[2][5],p2d[2][3] ,p2d[3][4],p2d[3][5],p2d[3][3], 0.995)
			else
				ttri_clip(p2d[1][1],p2d[1][2],p2d[2][1],p2d[2][2],p2d[3][1],p2d[3][2],24,64,24,32,0,64,15, 3,    p2d[1][4],p2d[1][5],p2d[1][3] ,p2d[2][4],p2d[2][5],p2d[2][3] ,p2d[3][4],p2d[3][5],p2d[3][3], 0.999)
				ttri_clip(p2d[4][1],p2d[4][2],p2d[2][1],p2d[2][2],p2d[3][1],p2d[3][2],0 ,32,24,32,0,64,15, 3,    p2d[4][4],p2d[4][5],p2d[4][3] ,p2d[2][4],p2d[2][5],p2d[2][3] ,p2d[3][4],p2d[3][5],p2d[3][3], 0.999)
				ttri_clip(p2d[1][1],p2d[1][2],p2d[2][1],p2d[2][2],p2d[3][1],p2d[3][2],48,232,48,200,24,232,15, 3,p2d[1][4],p2d[1][5],p2d[1][3] ,p2d[2][4],p2d[2][5],p2d[2][3] ,p2d[3][4],p2d[3][5],p2d[3][3], 0.995)
				ttri_clip(p2d[4][1],p2d[4][2],p2d[2][1],p2d[2][2],p2d[3][1],p2d[3][2],24,200,48,200,24,232,15, 3,p2d[4][4],p2d[4][5],p2d[4][3] ,p2d[2][4],p2d[2][5],p2d[2][3] ,p2d[3][4],p2d[3][5],p2d[3][3], 0.995)
			end

		end
	end
	--objects--
	local f1={{5 ,3 ,1 ,uv={{125,136},{120,133},{120,136},-1},f=2},{3 ,8 ,4 ,uv={{128,128},{125,132},{128,132},-1},f=2},{7 ,6 ,8 ,uv={{128,128},{125,132},{128,132},-1},f=2},{1 ,4 ,2 ,uv={{125,132},{128,128},{125,128},-1},f=2},{6 ,1 ,2 ,uv={{128,132},{125,128},{125,132},-1},f=2},{10,11,12,uv={{125,133},{120,128},{120,133},-1},f=3},{5 ,7 ,3 ,uv={{125,136},{125,133},{120,133},-1},f=2},{3 ,7 ,8 ,uv={{128,128},{125,128},{125,132},-1},f=2},{7 ,5 ,6 ,uv={{128,128},{125,128},{125,132},-1},f=2},{1 ,3 ,4 ,uv={{125,132},{128,132},{128,128},-1},f=2},{6 ,5 ,1 ,uv={{128,132},{128,128},{125,128},-1},f=2},{10,9 ,11,uv={{125,133},{125,128},{120,128},-1},f=3},}
	local f2={{5 ,3 ,1 ,uv={{125,136},{120,133},{120,136},-1},f=2},{3 ,8 ,4 ,uv={{128,132},{125,136},{128,136},-1},f=2},{7 ,6 ,8 ,uv={{128,132},{125,136},{128,136},-1},f=2},{1 ,4 ,2 ,uv={{125,136},{128,132},{125,132},-1},f=2},{6 ,1 ,2 ,uv={{128,136},{125,132},{125,136},-1},f=2},{10,11,12,uv={{125,133},{120,128},{120,133},-1},f=3},{5 ,7 ,3 ,uv={{125,136},{125,133},{120,133},-1},f=2},{3 ,7 ,8 ,uv={{128,132},{125,132},{125,136},-1},f=2},{7 ,5 ,6 ,uv={{128,132},{125,132},{125,136},-1},f=2},{1 ,3 ,4 ,uv={{125,136},{128,136},{128,132},-1},f=2},{6 ,5 ,1 ,uv={{128,136},{128,132},{125,132},-1},f=2},{10,9 ,11,uv={{125,133},{125,128},{120,128},-1},f=3},}
	
	local f3={{2 ,3 ,1 ,uv={{32,248},{31,246},{31,248},-1},f=1},{4 ,7 ,3 ,uv={{32,248},{31,246},{31,248},-1},f=1},{8 ,5 ,7 ,uv={{31,248},{32,246},{31,248},-1},f=1},{6 ,1 ,5 ,uv={{32,248},{31,246},{31,248},-1},f=1},{7 ,1 ,3 ,uv={{31,247},{16,232},{16,247},-1},f=1},{2 ,4 ,3 ,uv={{32,248},{32,246},{31,246},-1},f=1},{4 ,8 ,7 ,uv={{32,248},{32,246},{31,246},-1},f=1},{8 ,6 ,5 ,uv={{31,248},{32,246},{31,246},-1},f=1},{6 ,2 ,1 ,uv={{32,248},{32,246},{31,246},-1},f=1},{7 ,5 ,1 ,uv={{31,247},{31,232},{16,232},-1},f=1},{10,11,9 ,uv={{23,248},{29,247},{23,247},-1},f=1},{16,13,15,uv={{23,248},{29,247},{23,247},-1},f=1},{10,12,11,uv={{23,248},{29,248},{29,247},-1},f=1},{16,14,13,uv={{23,248},{29,248},{29,247},-1},f=1}}
	local f4={{2 ,3 ,1 ,uv={{32,248},{31,246},{31,248},-1},f=1},{4 ,7 ,3 ,uv={{32,248},{31,246},{31,248},-1},f=1},{8 ,5 ,7 ,uv={{31,248},{32,246},{31,248},-1},f=1},{6 ,1 ,5 ,uv={{32,248},{31,246},{31,248},-1},f=1},{7 ,1 ,3 ,uv={{31,247},{16,232},{16,247},-1},f=1},{2 ,4 ,3 ,uv={{32,248},{32,246},{31,246},-1},f=1},{4 ,8 ,7 ,uv={{32,248},{32,246},{31,246},-1},f=1},{8 ,6 ,5 ,uv={{31,248},{32,246},{31,246},-1},f=1},{6 ,2 ,1 ,uv={{32,248},{32,246},{31,246},-1},f=1},{7 ,5 ,1 ,uv={{31,247},{31,232},{16,232},-1},f=1},{10,11,9 ,uv={{16,248},{22,247},{16,247},-1},f=1},{16,13,15,uv={{16,248},{22,247},{16,247},-1},f=1},{10,12,11,uv={{16,248},{22,248},{22,247},-1},f=1},{16,14,13,uv={{16,248},{22,248},{22,247},-1},f=1}}

	local f5={{2,3,1,uv={{61,246},{48,245},{48,246},-1},f=2},{4,7,3,uv={{61,232},{48,245},{61,245},-1},f=2},{8,5,7,uv={{61,246},{48,245},{48,246},-1},f=2},{7,1,3,uv={{61,246},{48,245},{48,246},-1},f=2},{4,6,8,uv={{61,246},{48,245},{48,246},-1},f=2},{2,4,3,uv={{61,246},{61,245},{48,245},-1},f=2},{4,8,7,uv={{61,232},{48,232},{48,245},-1},f=2},{8,6,5,uv={{61,246},{61,245},{48,245},-1},f=2},{7,5,1,uv={{61,246},{61,245},{48,245},-1},f=2},{4,2,6,uv={{61,246},{61,245},{48,245},-1},f=2}}
	local f6={{2,3,1,uv={{45,246},{32,245},{32,246},-1},f=2},{4,7,3,uv={{45,232},{32,245},{45,245},-1},f=2},{8,5,7,uv={{45,246},{32,245},{32,246},-1},f=2},{7,1,3,uv={{45,246},{32,245},{32,246},-1},f=2},{4,6,8,uv={{45,246},{32,245},{32,246},-1},f=2},{2,4,3,uv={{45,246},{45,245},{32,245},-1},f=2},{4,8,7,uv={{45,232},{32,232},{32,245},-1},f=2},{8,6,5,uv={{45,246},{45,245},{32,245},-1},f=2},{7,5,1,uv={{45,246},{45,245},{32,245},-1},f=2},{4,2,6,uv={{45,246},{45,245},{32,245},-1},f=2}}
	
	local i2=0
	for i=1,#draw.objects.c  do
		i2=i2+1 unitic.obj[i2]=draw.objects.c [i]
		if draw.objects.c[i].inp then
			i2=i2+1
			unitic.obj[i2]={
				type = draw.objects.c[i].type,
				draw = draw.objects.c[i].draw,
				model= draw.objects.c[i].model,

				x = draw.objects.c[i].x1,
				y = draw.objects.c[i].y1,
				z = draw.objects.c[i].z1,
			
			}
		end
	end


	for i=1,#draw.objects.cd do i2=i2+1 unitic.obj[i2]=draw.objects.cd[i] end
	for i=1,#draw.objects.lb do i2=i2+1 unitic.obj[i2]=draw.objects.lb[i] end
	for i=1,#draw.objects.l  do i2=i2+1 unitic.obj[i2]=draw.objects.l [i] end
	for i=1,#draw.objects.b  do
		if draw.objects.b[i].s and draw.objects.b[i].tick then draw.objects.b[i].model.f=f2 elseif draw.objects.b[i].tick then draw.objects.b[i].model.f=f1 end
		i2=i2+1 unitic.obj[i2]=draw.objects.b[i]
	end
	for i=1,#draw.objects.t do i2=i2+1 unitic.obj[i2]=draw.objects.t[i] end
	for i=1,#draw.objects.fb do
		if draw.objects.fb[i].s and draw.objects.fb[i].tick then draw.objects.fb[i].model.f=f3 elseif draw.objects.fb[i].tick then draw.objects.fb[i].model.f=f4 end
		i2=i2+1 unitic.obj[i2]=draw.objects.fb[i]
	end
	for i=1,#draw.objects.d  do
		if draw.objects.d[i].s then draw.objects.d[i].model.f=f5 else draw.objects.d[i].model.f=f6 end
		i2=i2+1 unitic.obj[i2]=draw.objects.d[i]
	end

	local v = world_size[5] + 1
	local i2=#unitic.poly.f

	for ind1 = 1, #unitic.obj do
		if unitic.obj[ind1].draw then
			local vt=v

			unitic.obj[ind1].model.compiled(
				unitic.obj[ind1].x,
				unitic.obj[ind1].y,
				unitic.obj[ind1].z,
				unitic.obj[ind1].type,
				v
			)

			v = v + #unitic.obj[ind1].model.v
			for ind2=1,#unitic.obj[ind1].model.f do
				i2=i2+1
				unitic.poly.f[i2]={unitic.obj[ind1].model.f[ind2][1]+vt, unitic.obj[ind1].model.f[ind2][2]+vt, unitic.obj[ind1].model.f[ind2][3]+vt, f=unitic.obj[ind1].model.f[ind2].f,uv={x={unitic.obj[ind1].model.f[ind2].uv[1][1],unitic.obj[ind1].model.f[ind2].uv[2][1],unitic.obj[ind1].model.f[ind2].uv[3][1]},y={unitic.obj[ind1].model.f[ind2].uv[1][2],unitic.obj[ind1].model.f[ind2].uv[2][2],unitic.obj[ind1].model.f[ind2].uv[3][2]}}}
			end
		end
	end
	--particles

	for ind = 1, #draw.pr do
		local a1 = draw.pr[ind].x - cam.x
		local b1 = draw.pr[ind].y - cam.y
		local c1 = draw.pr[ind].z - cam.z

		local c2 = c1 * tycos - a1 * tysin

		local x0 = c1 * tysin + a1 * tycos
		local y0 = b1 * txcos - c2 * txsin
		local z0 = b1 * txsin + c2 * txcos

		local dist=math.sqrt(x0 * x0 + y0 * y0 + z0 * z0)

		local draw_p=false
		if z0<0 then draw_p=true end

		local z1 = unitic.fov / z0 --this saves one division (very important optimization)

		local x1 = x0 * z1 + 120
		local y1 = y0 * z1 + 68

		unitic.p[ind]={x1, y1, -z0, draw_p, draw.pr[ind].c, dist}
	end
	--debug points
	for ind = 1, #draw.debug_p do
		local a1 = draw.debug_p[ind].x - cam.x
		local b1 = draw.debug_p[ind].y - cam.y
		local c1 = draw.debug_p[ind].z - cam.z

		local c2 = c1 * tycos - a1 * tysin

		local x0 = c1 * tysin + a1 * tycos
		local y0 = b1 * txcos - c2 * txsin
		local z0 = b1 * txsin + c2 * txcos
		
		local dist=math.sqrt(x0 * x0 + y0 * y0 + z0 * z0)

		local draw_p=false
		if z0<0 then draw_p=true end

		if z0>-0.001 then z0=-0.001 end

		local z1 = unitic.fov / z0 --this saves one division (very important optimization)

		local x1 = x0 * z1 + 120
		local y1 = y0 * z1 + 68

		unitic.debug_p[ind]={x1, y1, draw_p, draw.debug_p[ind].text, dist}

	end
end

function unitic.update_pr() --update particles
	local i=0 if #draw.pr~=0 then
	repeat
		i=i+1

		draw.pr[i].x = draw.pr[i].x+draw.pr[i].vx
		draw.pr[i].y = draw.pr[i].y+draw.pr[i].vy
		draw.pr[i].z = draw.pr[i].z+draw.pr[i].vz

		draw.pr[i].t = draw.pr[i].t+1

		if draw.pr[i].t==draw.pr[i].lt then table.remove(draw.pr,i) i=i-1 end
	until i>=#draw.pr end
end

function unitic.draw(particles)
	for i = 1, #unitic.poly.f do
		local poly = unitic.poly.f[i]

		local uv = poly.uv
		
		local p2d = {
			x = { unitic.poly.v[poly[1]][1], unitic.poly.v[poly[2]][1], unitic.poly.v[poly[3]][1] },
			y = { unitic.poly.v[poly[1]][2], unitic.poly.v[poly[2]][2], unitic.poly.v[poly[3]][2] }
		}
		
		local p3d = {
			x = { unitic.poly.v[poly[1]][4], unitic.poly.v[poly[2]][4], unitic.poly.v[poly[3]][4] },
			y = { unitic.poly.v[poly[1]][5], unitic.poly.v[poly[2]][5], unitic.poly.v[poly[3]][5] }
		}

		if unitic.poly.v[poly[1]][3]>0 and unitic.poly.v[poly[2]][3]>0 and unitic.poly.v[poly[3]][3]>0 then
			if poly.f==3 or (p2d.x[2]-p2d.x[1])*(p2d.y[3]-p2d.y[1])-(p2d.x[3]-p2d.x[1])*(p2d.y[2]-p2d.y[1])<0 == (poly.f == 2) then
				ttri(
					p2d.x[1], p2d.y[1],
					p2d.x[2], p2d.y[2],
					p2d.x[3], p2d.y[3],
					uv.x[1], uv.y[1],
					uv.x[2], uv.y[2],
					uv.x[3], uv.y[3],
					0,
					15,
					unitic.poly.v[poly[1]][3],
					unitic.poly.v[poly[2]][3],
					unitic.poly.v[poly[3]][3]
				)
			end
		elseif unitic.poly.v[poly[1]][3]<0 and unitic.poly.v[poly[2]][3]<0 and unitic.poly.v[poly[3]][3]<0 then
		else
			ttri_clip(
				p2d.x[1], p2d.y[1],
				p2d.x[2], p2d.y[2],
				p2d.x[3], p2d.y[3],
				uv.x[1], uv.y[1],
				uv.x[2], uv.y[2],
				uv.x[3], uv.y[3],
				
				15,

				poly.f,

				p3d.x[1], p3d.y[1],unitic.poly.v[poly[1]][3],
				p3d.x[2], p3d.y[2],unitic.poly.v[poly[2]][3],
				p3d.x[3], p3d.y[3],unitic.poly.v[poly[3]][3]
			)
		end
	end

	if particles and #unitic.p~=0 and st.p then
		for i = 1, #unitic.p do
			if unitic.p[i][4] then
				local p2d = {x=unitic.p[i][1],y=unitic.p[i][2]}

				local color = unitic.p[i][5]
				local color1= color % 4
				local color2= color //4
				local size = 1/unitic.p[i][6]*2.4*unitic.fov

				local z0 = unitic.p[i][3]

				ttri(
					p2d.x-size,p2d.y-size,
					p2d.x-size,p2d.y+size,
					p2d.x+size,p2d.y+size,
					24 + color1*2,248 + color2*2,
					24 + color1*2,249 + color2*2,
					25 + color1*2,248 + color2*2,
					0,-1,z0,z0,z0)
				ttri(
					p2d.x+size,p2d.y-size,
					p2d.x-size,p2d.y-size,
					p2d.x+size,p2d.y+size,
					24 + color1*2,248 + color2*2,
					24 + color1*2,249 + color2*2,
					25 + color1*2,248 + color2*2,
					0,-1,z0,z0,z0)
			end
		end
	end

	for i = 1, #unitic.debug_p do
		if unitic.debug_p[i][3] then
			local p2d = {x = unitic.debug_p[i][1], y = unitic.debug_p[i][2]}
			local text = unitic.debug_p[i][4]

			local size = min(max( 1/unitic.debug_p[i][5]*40*unitic.fov, 5), 20)

			if not text or type(text)~="table" then
				circ (p2d.x, p2d.y,2,7)
				circb(p2d.x, p2d.y,2,1)
				pix  (p2d.x, p2d.y,1)
				
				if text then
					local text_size = print(text,240,0)
					rect(p2d.x - text_size//2-1, p2d.y + 5, text_size + 1, 8, 2)

					print(text, p2d.x - text_size//2, p2d.y + 7, 0)
					print(text, p2d.x - text_size//2, p2d.y + 6, 7)
				end
			else
				circb(p2d.x, p2d.y,size,11)
				circ (p2d.x, p2d.y,3,4)
				circb(p2d.x, p2d.y,3,2)
				pix  (p2d.x, p2d.y,14)
				
				for i2 = 1,#text do
					local text_size = print(text[i2],240,0)
					rect(p2d.x - text_size//2-1, p2d.y - 3 + i2 * 8, text_size + 1, 8, 2)

					print(text[i2], p2d.x - text_size//2, p2d.y - 1 + i2 * 8, 0)
					print(text[i2], p2d.x - text_size//2, p2d.y - 2 + i2 * 8, 7)
				end
			end

		end
	end
end

local wall_coll={[1]=true,[2]=true,[3]=true,[4]=true,[8]=true,[9]=true,[10]=true,[13]=true,[14]=true,[16]=true,[17]=true,[18]=true}

function unitic.player_physics()
	if plr.death then return end
	--control
	plr.lx, plr.ly, plr.lz = plr.x, plr.y, plr.z

	plr.speed = 4

	if (plr.godmode or plr.hp_t_2==0) then
		if key(64) and key(23) then
			plr.speed = 8
		end
	else
		plr.speed = 4
	end

	if plr.noclip then plr.speed = 12 end

	local vec = {x=0, y=0, z=0} --vector

	if (plr.hp_t_2==0 or R()>0.05 or plr.godmode) then
		if key(23) then vec.z = vec.z - 1 end -- W
		if key(19) then vec.z = vec.z + 1 end -- S
		if key(1 ) then vec.x = vec.x + 1 end -- A
		if key(4 ) then vec.x = vec.x - 1 end -- D
		if plr.noclip then
			if key(48) then vec.y = vec.y + 1 end -- space
			if key(63) then vec.y = vec.y - 1 end -- CTRL
		end
	end

	local vec_len = math.sqrt(vec.x^2 + vec.y^2 + vec.z^2)
	if vec_len~=0 then --normalization
		vec.x = vec.x / vec_len * plr.speed * dt
		vec.y = vec.y / vec_len * plr.speed * dt
		vec.z = vec.z / vec_len * plr.speed * dt
	end
	--rotation
	
	local vx =  vec.x * math.cos(plr.ty) + vec.z * math.sin(plr.ty)
	local vz	= -vec.x * math.sin(plr.ty) + vec.z * math.cos(plr.ty)

	vec.x, vec.z = vx,vz

	--jump
	if plr.on_ground then
		plr.vy = -1
		if keyp(48) then plr.vy = 8 end
	end

	plr.vy = max(plr.vy - 0.5 * dt, -20) --gravity

	--horizontal velociy
	if plr.on_ground then
		plr.vx = max_abs(plr.vx * 0.8, vec.x)
		plr.vz = max_abs(plr.vz * 0.8, vec.z)
	else
		if abs(plr.vx) > 9 or abs(plr.vz) > 9 then
			if vec.x~=0 or vec.z~=0 then
				plr.vx = plr.vx * 0.95 + vec.x * 0.05
				plr.vz = plr.vz * 0.95 + vec.z * 0.05
			end
		else
			plr.vx = max_abs(plr.vx * 0.9, vec.x)
			plr.vz = max_abs(plr.vz * 0.9, vec.z)
		end
	end
	--noclip
	if plr.noclip then
		plr.vx = vec.x
		plr.vy = vec.y
		plr.vz = vec.z
	end

	if keyp(7) then plr.vx = 20 end


	plr.vx = max(min(plr.vx, 20), -20)
	plr.vy = max(min(plr.vy, 20), -20)
	plr.vz = max(min(plr.vz, 20), -20)

	plr.x = plr.x + plr.vx
	plr.y = plr.y + plr.vy
	plr.z = plr.z + plr.vz
	
	--cheats
	if keyp(57) or keyp(22) then plr.y = plr.y + 2 plr.noclip = not plr.noclip end
	if keyp(2) then plr.godmode = not plr.godmode end

	--zoom
	if key(65) then
		unitic.fov=min(unitic.fov*1.2*dt,800)
	else
		unitic.fov=max(unitic.fov/1.2/dt,80)
	end
	
	--collision
	local colx = false
	local coly = false
	local colz = false
	local bp=false
	local op=false

	local function plr_collide(x1,y1,z1,x2,y2,z2)
		local ti=false
		if not coll(plr.lx - 16, plr.ly - 64, plr.lz - 16, plr.lx + 16, plr.ly + 16, plr.lz + 16, x1,y1,z1, x2,y2,z2) then
			if coll(plr.x - 16, plr.ly - 64, plr.lz - 16, plr.x + 16, plr.ly + 16, plr.lz + 16, x1,y1,z1, x2,y2,z2) then ti = true colx=true end
			if coll(plr.lx - 16, plr.y - 64, plr.lz - 16, plr.lx + 16, plr.y + 16, plr.lz + 16, x1,y1,z1, x2,y2,z2) then ti = true coly=true end
			if coll(plr.lx - 16, plr.ly - 64, plr.z - 16, plr.lx + 16, plr.ly + 16, plr.z + 16, x1,y1,z1, x2,y2,z2) then ti = true colz=true end
			if not ti and coll(plr.x - 16, plr.y - 64, plr.z - 16, plr.x + 16, plr.y + 16, plr.z + 16, x1,y1,z1, x2,y2,z2) then
				if y1~=y2 and z1~=z2 then colx=true end
				if x1~=x2 and z1~=z2 then coly=true end
				if x1~=x2 and y1~=y2 then colz=true end
			end
		end
		if bp or op then
			local x3,y3,z3,x4,y4,z4
			if bp then
				x3,y3,z3=teleport(2,x1,y1,z1)
				x4,y4,z4=teleport(2,x2,y2,z2)
			elseif op then
				x3,y3,z3=teleport(1,x1,y1,z1)
				x4,y4,z4=teleport(1,x2,y2,z2)
			end
			x3,x4=min(x3,x4),max(x3,x4)
			y3,y4=min(y3,y4),max(y3,y4)
			z3,z4=min(z3,z4),max(z3,z4)
			if not coll(plr.lx - 16, plr.ly - 64, plr.lz - 16, plr.lx + 16, plr.ly + 16, plr.lz + 16, x3,y3,z3, x4,y4,z4) then
				if coll(plr.x - 16, plr.ly - 64, plr.lz - 16, plr.x + 16, plr.ly + 16, plr.lz + 16, x3,y3,z3, x4,y4,z4) then colx=true end
				if coll(plr.lx - 16, plr.y - 64, plr.lz - 16, plr.lx + 16, plr.y + 16, plr.lz + 16, x3,y3,z3, x4,y4,z4) then coly=true end
				if coll(plr.lx - 16, plr.ly - 64, plr.z - 16, plr.lx + 16, plr.ly + 16, plr.z + 16, x3,y3,z3, x4,y4,z4) then colz=true end
			end

		end
	end

	local function obj_collide(id,x,y,z)
		if #model[id].coll==0 then return end
		for i=1,#model[id].coll do
			local col1=model[id].coll[i]
			plr_collide(x+col1[1],y+col1[2],z+col1[3], x+col1[4],y+col1[5],z+col1[6])
		end
	end

	local x1=max((plr.x-17)//96,0)
	local y1=max((plr.y-65)//128,0)
	local z1=max((plr.z-17)//96,0)

	local x2=min((plr.x+16)//96,world_size[1]-1)
	local y2=min((plr.y+16)//128,world_size[2]-1)
	local z2=min((plr.z+16)//96,world_size[3]-1)

	for x0 = x1,x2 do for y0 = y1,y2 do for z0 = z1,z2 do
		-- walls --
		if draw.map[1][x0][y0][z0][2]==2 and draw.p[1] and draw.p[2] and -- portals
			((draw.p[1][1] == x0 and draw.p[1][2] == y0 and draw.p[1][3] == z0 and draw.p[1][4]==1) or
			 (draw.p[2][1] == x0 and draw.p[2][2] == y0 and draw.p[2][3] == z0 and draw.p[2][4]==1))
		then
			plr_collide(x0 * 96, y0 * 128 + 2, z0 * 96 + 2 , x0 * 96, y0 * 128 + 126, z0 * 96 + 2)
			plr_collide(x0 * 96, y0 * 128 + 2, z0 * 96 + 94, x0 * 96, y0 * 128 + 126, z0 * 96 + 94)
			plr_collide(x0 * 96, y0 * 128      , z0 * 96 + 2 , x0 * 96, y0 * 128      , z0 * 96 + 94)
			plr_collide(x0 * 96, y0 * 128 + 128, z0 * 96 + 2 , x0 * 96, y0 * 128 + 128, z0 * 96 + 94)
		elseif wall_coll[draw.map[1][x0][y0][z0][2]] then plr_collide(x0 * 96, y0 * 128 + 2, z0 * 96 + 2, x0 * 96, y0 * 128 + 126, z0 * 96 + 94)
		elseif draw.map[1][x0][y0][z0][2]==11 then plr_collide(x0 * 96, y0 * 128 + 2, z0 * 96 + 62, x0 * 96, y0 * 128 + 126, z0 * 96 + 94) -- doorway (1)
		elseif draw.map[1][x0][y0][z0][2]==12 then plr_collide(x0 * 96, y0 * 128 + 2, z0 * 96 + 2, x0 * 96, y0 * 128 + 126, z0 * 96 + 34) -- doorway (2)
		elseif draw.map[1][x0][y0][z0][2]==7  then if coll(plr.lx - 16, plr.ly - 64, plr.lz - 16, plr.lx + 16, plr.ly + 16, plr.lz + 16, x0 * 96, y0 * 128 + 2, z0 * 96 + 2, x0 * 96, y0 * 128 + 126, z0 * 96 + 94) then plr.bf_t=10 end -- blue field
		elseif draw.map[1][x0][y0][z0][2]==15 then if coll(plr.lx - 16, plr.ly - 64, plr.lz - 16, plr.lx + 16, plr.ly + 16, plr.lz + 16, x0 * 96, y0 * 128 + 2, z0 * 96 + 2, x0 * 96, y0 * 128 + 126, z0 * 96 + 94) then plr.hp=0 sfx_(2,"C-3",-1,1) end -- red field
		end

		-- floors --
		if     draw.map[2][x0][y0][z0][2]==5 then if coll(plr.lx - 16, plr.ly - 64, plr.lz - 16, plr.lx + 16, plr.ly + 16, plr.lz + 16, x0 * 96 + 2, y0 * 128, z0 * 96 + 2, x0 * 96 + 94, y0 * 128, z0 * 96 + 94) then plr.hp=0 sfx_(2,"C-3",-1,1) end -- red field
		elseif draw.map[2][x0][y0][z0][2]==8 or draw.map[2][x0][y0][z0][2]==9 then if coll(plr.lx - 16, plr.ly - 64, plr.lz - 16, plr.lx + 16, plr.ly + 16, plr.lz + 16, x0 * 96 + 2, y0 * 128, z0 * 96 + 2, x0 * 96 + 94, y0 * 128, z0 * 96 + 94) then plr.vy=12 sfx_(0,"C-6",-1,1) end
		elseif draw.map[2][x0][y0][z0][2]~=0 then plr_collide(x0 * 96 + 2, y0 * 128, z0 * 96 + 2, x0 * 96 + 94, y0 * 128, z0 * 96 + 94) end

		-- walls (2) --
		if draw.map[3][x0][y0][z0][2]==2 and draw.p[1] and draw.p[2] and -- portals
			((draw.p[1][1] == x0 and draw.p[1][2] == y0 and draw.p[1][3] == z0 and draw.p[1][4]==3) or
		 	 (draw.p[2][1] == x0 and draw.p[2][2] == y0 and draw.p[2][3] == z0 and draw.p[2][4]==3))
		then
			plr_collide(x0 * 96 + 2 , y0 * 128 + 2, z0 * 96, x0 * 96 + 2, y0 * 128 + 126, z0 * 96)
			plr_collide(x0 * 96 + 94, y0 * 128 + 2, z0 * 96, x0 * 96 + 94, y0 * 128 + 126, z0 * 96)
			plr_collide(x0 * 96 + 2, y0 * 128      , z0 * 96, x0 * 96 + 94, y0 * 128      , z0 * 96)
			plr_collide(x0 * 96 + 2, y0 * 128 + 128, z0 * 96, x0 * 96 + 94, y0 * 128 + 128, z0 * 96)
		elseif wall_coll[draw.map[3][x0][y0][z0][2]] then plr_collide(x0 * 96 + 2, y0 * 128 + 2, z0 * 96, x0 * 96 + 94, y0 * 128 + 126, z0 * 96)
		elseif draw.map[3][x0][y0][z0][2]==11 then plr_collide(x0 * 96 + 62, y0 * 128 + 2, z0 * 96, x0 * 96 + 94, y0 * 128 + 126, z0 * 96)
		elseif draw.map[3][x0][y0][z0][2]==12 then plr_collide(x0 * 96 + 2, y0 * 128 + 2, z0 * 96, x0 * 96 + 34, y0 * 128 + 126, z0 * 96)
		elseif draw.map[3][x0][y0][z0][2]==7  then if coll(plr.lx - 16, plr.ly - 64, plr.lz - 16, plr.lx + 16, plr.ly + 16, plr.lz + 16, x0 * 96 + 2, y0 * 128 + 2, z0 * 96, x0 * 96 + 94, y0 * 128 + 126, z0 * 96) then plr.bf_t=10 end
		elseif draw.map[3][x0][y0][z0][2]==15 then if coll(plr.lx - 16, plr.ly - 64, plr.lz - 16, plr.lx + 16, plr.ly + 16, plr.lz + 16, x0 * 96 + 2, y0 * 128 + 2, z0 * 96, x0 * 96 + 94, y0 * 128 + 126, z0 * 96) then plr.hp=0 sfx_(2,"C-3",-1,1) end
		end
	end end end

	--Is the player in the portal (it is necessary that the player can not go through the objects on the other side of the portal)
	if draw.p[1] and draw.p[2] then
		--Blue portal
		if draw.p[1][4]==1 and coll(plr.x - 16, plr.y - 64, plr.z - 16, plr.x + 16, plr.y + 16, plr.z + 16, draw.p[1][1] * 96, draw.p[1][2] * 128 + 2, draw.p[1][3] * 96 + 2, draw.p[1][1] * 96, draw.p[1][2] * 128 + 126, draw.p[1][3] * 96 + 94) then bp=true end
		if draw.p[1][4]==3 and coll(plr.x - 16, plr.y - 64, plr.z - 16, plr.x + 16, plr.y + 16, plr.z + 16, draw.p[1][1] * 96 + 2, draw.p[1][2] * 128 + 2, draw.p[1][3] * 96, draw.p[1][1] * 96 + 94, draw.p[1][2] * 128 + 126, draw.p[1][3] * 96) then bp=true end
		--orange portal
		if draw.p[2][4]==1 and coll(plr.x - 16, plr.y - 64, plr.z - 16, plr.x + 16, plr.y + 16, plr.z + 16, draw.p[2][1] * 96, draw.p[2][2] * 128 + 2, draw.p[2][3] * 96 + 2, draw.p[2][1] * 96, draw.p[2][2] * 128 + 126, draw.p[2][3] * 96 + 94) then op=true end
		if draw.p[2][4]==3 and coll(plr.x - 16, plr.y - 64, plr.z - 16, plr.x + 16, plr.y + 16, plr.z + 16, draw.p[2][1] * 96 + 2, draw.p[2][2] * 128 + 2, draw.p[2][3] * 96, draw.p[2][1] * 96 + 94, draw.p[2][2] * 128 + 126, draw.p[2][3] * 96) then op=true end
	end
	--collision with objects
	for i=1,#draw.objects.c do
		local x0=draw.objects.c[i].x
		local y0=draw.objects.c[i].y
		local z0=draw.objects.c[i].z
		obj_collide(1, x0, y0, z0)
		if draw.objects.c[i].held and coll(plr.lx - 16, plr.ly - 64, plr.lz - 16, plr.lx + 16, plr.ly + 16, plr.lz + 16, x0 - 24, y0 + 24, z0 - 24, x0 + 24, y0 + 24.1, z0 + 24) then draw.objects.c[i].held=false plr.holding=false end
		if draw.objects.c[i].inp then
			local x0=draw.objects.c[i].x1
			local y0=draw.objects.c[i].y1
			local z0=draw.objects.c[i].z1
			obj_collide(1, x0, y0, z0)
		end
	end

	local object_types = {"cd", "lb", "b", "t", "l"}
	for _,type in ipairs(object_types) do
		for _,obj in ipairs(draw.objects[type]) do
			local x0, y0, z0 = obj.x, obj.y, obj.z
			obj_collide(obj.type, x0, y0, z0)
		end
	end

	if plr.noclip then return end
	if colx then plr.x = plr.lx end
	if coly then plr.y = plr.ly end
	if colz then plr.z = plr.lz end
	plr.on_ground=coly
end

local cube_params={
	portals = true,
	walls = {[1]=true,[2]=true,[3]=true,[4]=true,[5]=true,[6]=true,[7]=true,[8]=true,[9]=true,[10]=true,[13]=true,[14]=true,[15]=true,[16]=true,[17]=true,[18]=true,[19]=true},
	floors = {[1]=true,[2]=true,[3]=true,[4]=true,[5]=true,[6]=true,[7]=true,[8]=true,[9]=true},
	objs = {"c","b","lb","t","l"}
}

local cht=0 --a very important variable for the function below (in other words, a crutch)
function unitic.cube_update() --all physics related to cubes
	-- dispensers
	for i=1,#draw.objects.cd do
		draw.objects.cd[i].t=draw.objects.cd[i].t-1
		if draw.objects.cd[i].t==1 then
			addobj(draw.objects.cd[i].x,draw.objects.cd[i].y,draw.objects.cd[i].z,draw.objects.cd[i].ct,i)
		end
	end
	--cubes
	local i=0
	if #draw.objects.c==0 then return end
	if not plr.holding and keyp(5) then
		local rx=-math.sin(plr.ty)*math.cos(plr.tx)
		local ry=-math.sin(plr.tx)
		local rz=-math.cos(plr.ty)*math.cos(plr.tx)
		local hit = raycast(plr.x, plr.y, plr.z, rx, ry, rz, 100, cube_params)

		if hit and hit.obj and hit.obj.held~=nil then
			hit.obj.held = true
			plr.holding = true
		end
	elseif keyp(5) then
		for i2=1,#draw.objects.c do
			draw.objects.c[i2].held = false
		end
		plr.holding = false
	end

	repeat
		i=i+1

		local clx=draw.objects.c[i].x
		local cly=draw.objects.c[i].y
		local clz=draw.objects.c[i].z

		local cx=draw.objects.c[i].x
		local cy=draw.objects.c[i].y
		local cz=draw.objects.c[i].z
		local portal

		if draw.objects.c[i].held then
			portal=false
			local p={{}} --All points {x, y, z, dx, dy, dz, dist}
			local hold_dist = 100
			local txsin = math.sin(plr.tx)
			local txcos = math.cos(plr.tx)
			local tysin = math.sin(-plr.ty)
			local tycos = math.cos(-plr.ty)
			p[1].x = plr.x + hold_dist * tysin * txcos
			p[1].y = plr.y + hold_dist * -txsin
			p[1].z = plr.z + hold_dist * -tycos * txcos
			--the remaining points (if the segment passes through the portal)
			if (draw.p[1] and draw.p[2]) then
				local ps={x=plr.x,y=plr.y,z=plr.z} --starting point
				local pf={x=p[1].x,y=p[1].y,z=p[1].z} --final point

				for i_=1,10 do --Itteration limit
					local inbp=false
					local inop=false

					local x,y,z,f=raycast_legacy(ps.x,ps.y,ps.z,pf.x,pf.y,pf.z,
					{[1]=true,[2]=true,[3]=true,[4]=true,[5]=true,[6]=true,[7]=true,[8]=true,[9]=true,[10]=true,[13]=true,[14]=true,[15]=true,[16]=true,[17]=true,[18]=true,[19]=true},
					{[1]=true,[2]=true,[3]=true,[4]=true,[5]=true,[6]=true,[7]=true,[8]=true,[9]=true})
					if not x then break end
					local wt=draw.map[f][x][y][z][2] --Type of wall
					if wt==5 and f~=2 then inbp=true end
					if wt==6 and f~=2 then inop=true end

					if not (inbp or inop) then
						p[#p+1]={x=pf.x,y=pf.y,z=pf.z}
						break
					else --We teleport the segment
						portal=true
						if inbp then
							ps.x,ps.y,ps.z=teleport(1,ps.x,ps.y,ps.z)
							pf.x,pf.y,pf.z=teleport(1,pf.x,pf.y,pf.z)
						elseif inop then
							ps.x,ps.y,ps.z=teleport(2,ps.x,ps.y,ps.z)
							pf.x,pf.y,pf.z=teleport(2,pf.x,pf.y,pf.z)
						end
						p[#p+1]={x=pf.x,y=pf.y,z=pf.z}
					end
				end
				if portal then cht=min(cht+1,3) elseif cht>0 then portal=true cht=cht-1 end
				--If there are no portals between the cube and the player, add the point behind the portal
				if #p==1 then
					p[2]={}
					p[3]={}
					p[2].x,p[2].y,p[2].z=teleport(1,p[1].x,p[1].y,p[1].z)
					p[3].x,p[3].y,p[3].z=teleport(2,p[1].x,p[1].y,p[1].z)
				end
			end
			--Point processing
			local p2=p[1] --The nearest point
			for i2=1,#p do
				p[i2].dx=p[i2].x-cx
				p[i2].dy=p[i2].y-cy
				p[i2].dz=p[i2].z-cz
				p[i2].dist = (p[i2].dx^2 + p[i2].dy^2 + p[i2].dz^2)^0.5
				--Search for the nearest point
				if p[i2].dist<p2.dist then
					p2=p[i2]
				end
			end

			if p2.dist ~= 0 then
				local mdist=min(20, p2.dist)
				cx=cx+p2.dx*(mdist/p2.dist)
				cy=cy+p2.dy*(mdist/p2.dist)
				cz=cz+p2.dz*(mdist/p2.dist)
			end

			draw.objects.c[i].vx = min(max(-20,p2.dx),20)
			draw.objects.c[i].vy = min(max(-20,p2.dy),20)
			draw.objects.c[i].vz = min(max(-20,p2.dz),20)
			if p2.dist>500 then
				draw.objects.c[i].held=false
				draw.objects.c[i].vx=0
				draw.objects.c[i].vy=0
				draw.objects.c[i].vz=0
				plr.holding=false
			end
		else
			cx=cx + draw.objects.c[i].vx
			cy=cy + draw.objects.c[i].vy
			cz=cz + draw.objects.c[i].vz

			draw.objects.c[i].vx=draw.objects.c[i].vx*0.9
			draw.objects.c[i].vy=draw.objects.c[i].vy-0.5
			draw.objects.c[i].vz=draw.objects.c[i].vz*0.9

			if     draw.objects.c[i].vx<-20 then draw.objects.c[i].vx=-20
			elseif draw.objects.c[i].vx> 20 then draw.objects.c[i].vx= 20 end
			
			if     draw.objects.c[i].vy<-20 then draw.objects.c[i].vy=-20
			elseif draw.objects.c[i].vy> 20 then draw.objects.c[i].vy= 20 end
			
			if     draw.objects.c[i].vz<-20 then draw.objects.c[i].vz=-20
			elseif draw.objects.c[i].vz> 20 then draw.objects.c[i].vz= 20 end


		end
		
		local bf = false --is the cube in the blue field

		local x1=(cx-25)//96
		local y1=(cy-25)//128
		local z1=(cz-25)//96

		if x1<0 then x1 = 0 end
		if y1<0 then y1 = 0 end
		if z1<0 then z1 = 0 end

		local x2=(cx+25)//96
		local y2=(cy+25)//128
		local z2=(cz+25)//96

		if x2>world_size[1]-1 then x2 = world_size[1]-1 end
		if y2>world_size[2]-1 then y2 = world_size[2]-1 end
		if z2>world_size[3]-1 then z2 = world_size[3]-1 end

		local function collide(x3, y3, z3, x4, y4, z4)
			-- try moving the current amount in each axis, partially cancelling if needed
			if not coll(cx - 24, cy - 24, cz - 24, cx + 24, cy + 24, cz + 24, x3, y3, z3, x4, y4, z4) then return end

			local sx = coll_shift(
				cx - 24, cly - 24, clz - 24, cx + 24, cly + 24, clz + 24,
				x3, y3, z3, x4, y4, z4, 1
			)
			if sx ~= 0 then draw.objects.c[i].vx = 0 end
			cx = cx + sx
			local sy = coll_shift(
				clx - 24, cy - 24, clz - 24, clx + 24, cy + 24, clz + 24,
				x3, y3, z3, x4, y4, z4, 2
			)
			if sy ~= 0 then draw.objects.c[i].vy = 0 end
			cy = cy + sy
			local sz = coll_shift(
				clx - 24, cly - 24, cz - 24, clx + 24, cly + 24, cz + 24,
				x3, y3, z3, x4, y4, z4, 3
			)
			if sz ~= 0 then draw.objects.c[i].vz = 0 end
			cz = cz + sz
		end

		local function obj_collide(id,x,y,z)
			if #model[id].coll==0 then return end
			for i=1,#model[id].coll do
				local col1=model[id].coll[i]
				collide(x+col1[1],y+col1[2],z+col1[3], x+col1[4],y+col1[5],z+col1[6])
			end
		end

		for x0 = x1,x2 do for y0 = y1,y2 do for z0 = z1,z2 do
			-- walls --
			if draw.map[1][x0][y0][z0][2]==2 and draw.p[1] and draw.p[2] and -- portals
				((draw.p[1][1] == x0 and draw.p[1][2] == y0 and draw.p[1][3] == z0 and draw.p[1][4]==1) or
				 (draw.p[2][1] == x0 and draw.p[2][2] == y0 and draw.p[2][3] == z0 and draw.p[2][4]==1))
			then
				collide(x0 * 96, y0 * 128 + 2, z0 * 96 + 2 , x0 * 96, y0 * 128 + 126, z0 * 96 + 2)
				collide(x0 * 96, y0 * 128 + 2, z0 * 96 + 94, x0 * 96, y0 * 128 + 126, z0 * 96 + 94)
				collide(x0 * 96, y0 * 128      , z0 * 96 + 2 , x0 * 96, y0 * 128      , z0 * 96 + 94)
				collide(x0 * 96, y0 * 128 + 128, z0 * 96 + 2 , x0 * 96, y0 * 128 + 128, z0 * 96 + 94)
			elseif wall_coll[draw.map[1][x0][y0][z0][2]] then collide(x0 * 96, y0 * 128 + 2, z0 * 96 + 2, x0 * 96, y0 * 128 + 126, z0 * 96 + 94)
			elseif draw.map[1][x0][y0][z0][2]==7  then if coll(clx - 24,  cly - 24, clz - 24, clx + 24,  cy + 24, clz + 24, x0 * 96, y0 * 128 + 2, z0 * 96 + 2, x0 * 96, y0 * 128 + 126, z0 * 96 + 94) then bf = true end		
			elseif draw.map[1][x0][y0][z0][2]==11 then collide(x0 * 96, y0 * 128 + 2, z0 * 96 + 62, x0 * 96, y0 * 128 + 126, z0 * 96 + 94)
			elseif draw.map[1][x0][y0][z0][2]==12 then collide(x0 * 96, y0 * 128 + 2, z0 * 96 + 2, x0 * 96, y0 * 128 + 126, z0 * 96 + 34)
			end

			-- floors --
			if draw.map[2][x0][y0][z0][2] > 0 and draw.map[2][x0][y0][z0][2]~=5 and draw.map[2][x0][y0][z0][2]~=8 and draw.map[2][x0][y0][z0][2]~=9 then
				collide(x0 * 96 + 2, y0 * 128, z0 * 96 + 2, x0 * 96 + 94, y0 * 128, z0 * 96 + 94)
			elseif draw.map[2][x0][y0][z0][2]==8 or draw.map[2][x0][y0][z0][2]==9 then
				if coll(clx - 24, cly - 24, clz - 24, clx + 24, cly + 24, clz + 24, x0 * 96 + 2, y0 * 128, z0 * 96 + 2, x0 * 96 + 94, y0 * 128, z0 * 96 + 94) then draw.objects.c[i].vy=12 sfx_(0,"C-6",-1,1) end
			end

			-- walls (2) --
			if draw.map[3][x0][y0][z0][2]==2 and draw.p[1] and draw.p[2] and -- portals
				((draw.p[1][1] == x0 and draw.p[1][2] == y0 and draw.p[1][3] == z0 and draw.p[1][4]==3) or
				 (draw.p[2][1] == x0 and draw.p[2][2] == y0 and draw.p[2][3] == z0 and draw.p[2][4]==3))
			then
				collide(x0 * 96 + 2 , y0 * 128 + 2, z0 * 96, x0 * 96 + 2, y0 * 128 + 126, z0 * 96)
				collide(x0 * 96 + 94, y0 * 128 + 2, z0 * 96, x0 * 96 + 94, y0 * 128 + 126, z0 * 96)
				collide(x0 * 96 + 2, y0 * 128      , z0 * 96, x0 * 96 + 94, y0 * 128      , z0 * 96)
				collide(x0 * 96 + 2, y0 * 128 + 128, z0 * 96, x0 * 96 + 94, y0 * 128 + 128, z0 * 96)
			elseif wall_coll[draw.map[3][x0][y0][z0][2]] then collide(x0 * 96 + 2, y0 * 128 + 2, z0 * 96, x0 * 96 + 94, y0 * 128 + 126, z0 * 96)
			elseif draw.map[3][x0][y0][z0][2]==7  then if coll(clx - 24, cly - 24, clz - 24, clx + 24, cly + 24, clz + 24, x0 * 96 + 2, y0 * 128 + 2, z0 * 96, x0 * 96 + 94, y0 * 128 + 126, z0 * 96) then bf=true end
			elseif draw.map[3][x0][y0][z0][2]==11 then collide(x0 * 96 + 62, y0 * 128 + 2, z0 * 96, x0 * 96 + 94, y0 * 128 + 126, z0 * 96)
			elseif draw.map[3][x0][y0][z0][2]==12 then collide(x0 * 96 + 2, y0 * 128 + 2, z0 * 96, x0 * 96 + 34, y0 * 128 + 126, z0 * 96)
			end

		end end end
		--collision with the player
		if not plr.noclip then --Correct the mystical disappearance of cubes when span through them
			local x0=plr.x
			local y0=plr.y
			local z0=plr.z
			collide(x0 - 16, y0 - 64, z0 - 16, x0 + 16, y0 + 16, z0 + 16)
		end

		--collision with objects
		for i2=1,#draw.objects.c do
			if i2~=i then
				local x0=draw.objects.c[i2].x
				local y0=draw.objects.c[i2].y
				local z0=draw.objects.c[i2].z
				obj_collide(1, x0, y0, z0)
				if draw.objects.c[i2].inp and draw.p[1] and draw.p[2] then
					x0=draw.objects.c[i].x1
					y0=draw.objects.c[i].y1
					z0=draw.objects.c[i].z1
					obj_collide(1, x0, y0, z0)
				end
			end
		end

		-- cube special cases

		for i2=1,#draw.objects.lb do
			local x0=draw.objects.lb[i2].x
			local y0=draw.objects.lb[i2].y+5 -- <--
			local z0=draw.objects.lb[i2].z
			obj_collide(draw.objects.lb[i].type , x0, y0, z0)
		end

		for i2=1,#draw.objects.fb do --exception for cubes
			local x0=draw.objects.fb[i2].x
			local y0=draw.objects.fb[i2].y
			local z0=draw.objects.fb[i2].z
			collide(x0 - 37, y0, z0 - 37, x0 + 37, y0 + 7, z0 + 37)
		end

		local object_types = {"b", "t", "l"}
		for _,type in ipairs(object_types) do
			for _,obj in ipairs(draw.objects[type]) do
				local x0, y0, z0 = obj.x, obj.y, obj.z
				obj_collide(obj.type, x0, y0, z0)
			end
		end

		--Duplication of the cube if it is in the portal (NOT to be confused with the movement of the cube to the portal!!)
		local inbp,inop = false, false
		if draw.p[1] and draw.p[2] then
			if draw.p[1][4]==1 and coll(cx - 24, cy - 24, cz - 24, cx + 24, cy + 24, cz + 24, draw.p[1][1] * 96, draw.p[1][2] * 128 + 2, draw.p[1][3] * 96 + 2, draw.p[1][1] * 96, draw.p[1][2] * 128 + 126, draw.p[1][3] * 96 + 94) then inbp=true end
			if draw.p[1][4]==3 and coll(cx - 24, cy - 24, cz - 24, cx + 24, cy + 24, cz + 24, draw.p[1][1] * 96 + 2, draw.p[1][2] * 128 + 2, draw.p[1][3] * 96, draw.p[1][1] * 96 + 94, draw.p[1][2] * 128 + 126, draw.p[1][3] * 96) then inbp=true end
						
			if draw.p[2][4]==1 and coll(cx - 24, cy - 24, cz - 24, cx + 24, cy + 24, cz + 24, draw.p[2][1] * 96, draw.p[2][2] * 128 + 2, draw.p[2][3] * 96 + 2, draw.p[2][1] * 96, draw.p[2][2] * 128 + 126, draw.p[2][3] * 96 + 94) then inop=true end
			if draw.p[2][4]==3 and coll(cx - 24, cy - 24, cz - 24, cx + 24, cy + 24, cz + 24, draw.p[2][1] * 96 + 2, draw.p[2][2] * 128 + 2, draw.p[2][3] * 96, draw.p[2][1] * 96 + 94, draw.p[2][2] * 128 + 126, draw.p[2][3] * 96) then inop=true end
			
			draw.objects.c[i].inp=inbp or inop

			if inbp and inop==false then
				draw.objects.c[i].x1,draw.objects.c[i].y1,draw.objects.c[i].z1=teleport(1,cx,cy,cz)
			elseif inop and inbp==false then
				draw.objects.c[i].x1,draw.objects.c[i].y1,draw.objects.c[i].z1=teleport(2,cx,cy,cz)
			end

			--We move the cube through the portal (not to be confused with duplication of the visual and physical shell)
			--I would be glad if I didn’t have to do the same thing twice, but let it be a separate block
			local bp,op = false, false

			if draw.objects.c[i].inp then
				--Note that we work with a half of the cube collision (having collapsed one of the coordinates from 24 to 0) so that the cube is not in a quantum superposition while in 2 portals at the same time
				if draw.p[1][4]==1 and draw.p[1][5]==1 and coll(cx - 24, cy - 24, cz - 24, cx     , cy + 24, cz + 24, draw.p[1][1] * 96, draw.p[1][2] * 128 + 2, draw.p[1][3] * 96 + 2, draw.p[1][1] * 96, draw.p[1][2] * 128 + 126, draw.p[1][3] * 96 + 94) then bp=true end
				if draw.p[1][4]==3 and draw.p[1][5]==1 and coll(cx - 24, cy - 24, cz     , cx + 24, cy + 24, cz + 24, draw.p[1][1] * 96 + 2, draw.p[1][2] * 128 + 2, draw.p[1][3] * 96, draw.p[1][1] * 96 + 94, draw.p[1][2] * 128 + 126, draw.p[1][3] * 96) then bp=true end
				if draw.p[1][4]==1 and draw.p[1][5]==2 and coll(cx     , cy - 24, cz - 24, cx + 24, cy + 24, cz + 24, draw.p[1][1] * 96, draw.p[1][2] * 128 + 2, draw.p[1][3] * 96 + 2, draw.p[1][1] * 96, draw.p[1][2] * 128 + 126, draw.p[1][3] * 96 + 94) then bp=true end
				if draw.p[1][4]==3 and draw.p[1][5]==2 and coll(cx - 24, cy - 24, cz - 24, cx + 24, cy + 24, cz     , draw.p[1][1] * 96 + 2, draw.p[1][2] * 128 + 2, draw.p[1][3] * 96, draw.p[1][1] * 96 + 94, draw.p[1][2] * 128 + 126, draw.p[1][3] * 96) then bp=true end
							
				if draw.p[2][4]==1 and draw.p[2][5]==1 and coll(cx - 24, cy - 24, cz - 24, cx     , cy + 24, cz + 24, draw.p[2][1] * 96, draw.p[2][2] * 128 + 2, draw.p[2][3] * 96 + 2, draw.p[2][1] * 96, draw.p[2][2] * 128 + 126, draw.p[2][3] * 96 + 94) then op=true end
				if draw.p[2][4]==3 and draw.p[2][5]==1 and coll(cx - 24, cy - 24, cz     , cx + 24, cy + 24, cz + 24, draw.p[2][1] * 96 + 2, draw.p[2][2] * 128 + 2, draw.p[2][3] * 96, draw.p[2][1] * 96 + 94, draw.p[2][2] * 128 + 126, draw.p[2][3] * 96) then op=true end
				if draw.p[2][4]==1 and draw.p[2][5]==2 and coll(cx     , cy - 24, cz - 24, cx + 24, cy + 24, cz + 24, draw.p[2][1] * 96, draw.p[2][2] * 128 + 2, draw.p[2][3] * 96 + 2, draw.p[2][1] * 96, draw.p[2][2] * 128 + 126, draw.p[2][3] * 96 + 94) then op=true end
				if draw.p[2][4]==3 and draw.p[2][5]==2 and coll(cx - 24, cy - 24, cz - 24, cx + 24, cy + 24, cz     , draw.p[2][1] * 96 + 2, draw.p[2][2] * 128 + 2, draw.p[2][3] * 96, draw.p[2][1] * 96 + 94, draw.p[2][2] * 128 + 126, draw.p[2][3] * 96) then op=true end
				
				--teleporting
				local x1, y1, z1 = portalcenter(1)
				local x2, y2, z2 = portalcenter(2)

				-- calculate portal offsets
				local relx1 = cx - 96 * x1
				local rely1 = cy - 128 * y1
				local relz1 = cz - 96 * z1
				local relx2 = cx - 96 * x2
				local rely2 = cy - 128 * y2
				local relz2 = cz - 96 * z2

				-- calculate portal rotation
				local rot1 = draw.p[1][4] // 2 + (draw.p[1][5] - 1) * 2
				local rot2 = draw.p[2][4] // 2 + (draw.p[2][5] - 1) * 2
				local rotd1 = (2 + rot2 - rot1) % 4
				local rotd2 = (2 + rot1 - rot2) % 4

				if bp then
					if     rotd1 == 0 then
					elseif rotd1 == 1 then relx1,relz1=relz1,-relx1  draw.objects.c[i].vx,draw.objects.c[i].vz=draw.objects.c[i].vz,-draw.objects.c[i].vx
					elseif rotd1 == 2 then relx1,relz1=-relx1,-relz1 draw.objects.c[i].vx,draw.objects.c[i].vz=-draw.objects.c[i].vx,-draw.objects.c[i].vz
					elseif rotd1 == 3 then relx1,relz1=-relz1,relx1  draw.objects.c[i].vx,draw.objects.c[i].vz=-draw.objects.c[i].vz,draw.objects.c[i].vx
					end

					cx = 96*x2 + relx1
					cy = 128*y2 + rely1
					cz = 96*z2 + relz1
				elseif op then
					if     rotd2 == 0 then
					elseif rotd2 == 1 then relx2,relz2=relz2,-relx2  draw.objects.c[i].vx,draw.objects.c[i].vz=draw.objects.c[i].vz,-draw.objects.c[i].vx
					elseif rotd2 == 2 then relx2,relz2=-relx2,-relz2 draw.objects.c[i].vx,draw.objects.c[i].vz=-draw.objects.c[i].vx,-draw.objects.c[i].vz
					elseif rotd2 == 3 then relx2,relz2=-relz2,relx2  draw.objects.c[i].vx,draw.objects.c[i].vz=-draw.objects.c[i].vz,draw.objects.c[i].vx
					end

					cx = 96*x1 + relx2
					cy = 128*y1 + rely2
					cz = 96*z1 + relz2
				end
			end
		end
		--
		draw.objects.c[i].x = cx
		draw.objects.c[i].y = cy
		draw.objects.c[i].z = cz
		--
		if bf or draw.objects.c[i].y<-200 then
			sfx_(2)
			--particles
			for i2=1,80 do
				addp(cx-24       ,cy+R(-24,24),cz+R(-24,24),R()*2-1,R()*2-1,R()*2-1,R(30,60),1)
				addp(cx+24       ,cy+R(-24,24),cz+R(-24,24),R()*2-1,R()*2-1,R()*2-1,R(30,60),1)
				addp(cx+R(-24,24),cy-24       ,cz+R(-24,24),R()*2-1,R()*2-1,R()*2-1,R(30,60),1)
				addp(cx+R(-24,24),cy+24       ,cz+R(-24,24),R()*2-1,R()*2-1,R()*2-1,R(30,60),1)
				addp(cx+R(-24,24),cy+R(-24,24),cz-24       ,R()*2-1,R()*2-1,R()*2-1,R(30,60),1)
				addp(cx+R(-24,24),cy+R(-24,24),cz+24       ,R()*2-1,R()*2-1,R()*2-1,R(30,60),1)
			end
			--
			if draw.objects.c[i].held then plr.holding=false end
			local i2=draw.objects.c[i].disp
			draw.objects.cd[i2].t=60
			draw.objects.cd[i2].ct=draw.objects.c[i].type
			--
			table.remove(draw.objects.c,i)
			i=i-1
		end
		--
	until i>=#draw.objects.c
end

function unitic.portal_collision()
	if not draw.p[1] or not draw.p[2] then return end
	local bp=false --does the code need to teleport the player out of the blue portal
	local op=false	--does the code need to teleport the player out of the orange portal
	--Blue portal
	if draw.p[1][4]==1 and draw.p[1][5]==1 and coll(plr.x - 16, plr.y - 64, plr.z - 16, plr.x, plr.y + 16, plr.z + 16, draw.p[1][1] * 96, draw.p[1][2] * 128 + 2, draw.p[1][3] * 96 + 2, draw.p[1][1] * 96, draw.p[1][2] * 128 + 126, draw.p[1][3] * 96 + 94) then bp=true end
	if draw.p[1][4]==3 and draw.p[1][5]==1 and coll(plr.x - 16, plr.y - 64, plr.z, plr.x + 16, plr.y + 16, plr.z + 16, draw.p[1][1] * 96 + 2, draw.p[1][2] * 128 + 2, draw.p[1][3] * 96, draw.p[1][1] * 96 + 94, draw.p[1][2] * 128 + 126, draw.p[1][3] * 96) then bp=true end
	if draw.p[1][4]==1 and draw.p[1][5]==2 and coll(plr.x, plr.y - 64, plr.z - 16, plr.x + 16, plr.y + 16, plr.z + 16, draw.p[1][1] * 96, draw.p[1][2] * 128 + 2, draw.p[1][3] * 96 + 2, draw.p[1][1] * 96, draw.p[1][2] * 128 + 126, draw.p[1][3] * 96 + 94) then bp=true end
	if draw.p[1][4]==3 and draw.p[1][5]==2 and coll(plr.x - 16, plr.y - 64, plr.z - 16, plr.x + 16, plr.y + 16, plr.z, draw.p[1][1] * 96 + 2, draw.p[1][2] * 128 + 2, draw.p[1][3] * 96, draw.p[1][1] * 96 + 94, draw.p[1][2] * 128 + 126, draw.p[1][3] * 96) then bp=true end
	--orange portal
	if draw.p[2][4]==1 and draw.p[2][5]==1 and coll(plr.x - 16, plr.y - 64, plr.z - 16, plr.x, plr.y + 16, plr.z + 16, draw.p[2][1] * 96, draw.p[2][2] * 128 + 2, draw.p[2][3] * 96 + 2, draw.p[2][1] * 96, draw.p[2][2] * 128 + 126, draw.p[2][3] * 96 + 94) then op=true end
	if draw.p[2][4]==3 and draw.p[2][5]==1 and coll(plr.x - 16, plr.y - 64, plr.z, plr.x + 16, plr.y + 16, plr.z + 16, draw.p[2][1] * 96 + 2, draw.p[2][2] * 128 + 2, draw.p[2][3] * 96, draw.p[2][1] * 96 + 94, draw.p[2][2] * 128 + 126, draw.p[2][3] * 96) then op=true end
	if draw.p[2][4]==1 and draw.p[2][5]==2 and coll(plr.x, plr.y - 64, plr.z - 16, plr.x + 16, plr.y + 16, plr.z + 16, draw.p[2][1] * 96, draw.p[2][2] * 128 + 2, draw.p[2][3] * 96 + 2, draw.p[2][1] * 96, draw.p[2][2] * 128 + 126, draw.p[2][3] * 96 + 94) then op=true end
	if draw.p[2][4]==3 and draw.p[2][5]==2 and coll(plr.x - 16, plr.y - 64, plr.z - 16, plr.x + 16, plr.y + 16, plr.z, draw.p[2][1] * 96 + 2, draw.p[2][2] * 128 + 2, draw.p[2][3] * 96, draw.p[2][1] * 96 + 94, draw.p[2][2] * 128 + 126, draw.p[2][3] * 96) then op=true end
	--teleporting
	if bp and op==false then
		--p_g.cd1=15
		plr.x,plr.y,plr.z,
		plr.tx,plr.ty,
		plr.vx, plr.vy, plr.vz=
		teleport(1,
		plr.x,plr.y,plr.z,
		plr.tx,plr.ty,
		plr.vx,plr.vy,plr.vz)
	elseif op and bp==false then
		--p_g.cd2=15
		plr.x,plr.y,plr.z,
		plr.tx,plr.ty,
		plr.vx, plr.vy, plr.vz=
		teleport(2,
		plr.x,plr.y,plr.z,
		plr.tx,plr.ty,
		plr.vx,plr.vy,plr.vz)
	end
end

function unitic.draw_portalgun()
	p_g.x,p_g.y=F(p_g.x),F(p_g.y)
	rect(174+p_g.x,109+p_g.y,10,38,5)
	circ(185+p_g.x,105+p_g.y,11,3)
	circ(189+p_g.x,108+p_g.y,13,4)
	circ(191+p_g.x,110+p_g.y,13,3)
	tri(178+p_g.x,114+p_g.y,194+p_g.x,129+p_g.y,187+p_g.x,132+p_g.y,3)
	tri(178+p_g.x,114+p_g.y,178+p_g.x,112+p_g.y,187+p_g.x,132+p_g.y,3)
	tri(178+p_g.x,114+p_g.y,185+p_g.x,138+p_g.y,187+p_g.x,132+p_g.y,2)
	tri(178+p_g.x,114+p_g.y,185+p_g.x,138+p_g.y,181+p_g.x,138+p_g.y,2)
	circ(195+p_g.x,115+p_g.y,12,2)
	circ(195+p_g.x,115+p_g.y,8,12)
	tri(202+p_g.x,102+p_g.y,209+p_g.x,111+p_g.y,206+p_g.x,111+p_g.y,3)
	tri(187+p_g.x,99 +p_g.y,182+p_g.x,103+p_g.y,185+p_g.x,106+p_g.y,4)
	tri(187+p_g.x,99 +p_g.y,189+p_g.x,103+p_g.y,185+p_g.x,106+p_g.y,4)
	tri(180+p_g.x,107+p_g.y,179+p_g.x,111+p_g.y,183+p_g.x,109+p_g.y,4)
	tri(182+p_g.x,113+p_g.y,179+p_g.x,111+p_g.y,183+p_g.x,109+p_g.y,4)
	tri(193+p_g.x,99 +p_g.y,199+p_g.x,101+p_g.y,199+p_g.x,103+p_g.y,4)
	tri(193+p_g.x,99 +p_g.y,194+p_g.x,102+p_g.y,199+p_g.x,103+p_g.y,4)
	rect(193+p_g.x,99 +p_g.y,3,2,4)
	pix(197+p_g.x,100+p_g.y,4)
	line(202+p_g.x,94 +p_g.y,208+p_g.x,83 +p_g.y,1)
	line(203+p_g.x,94 +p_g.y,209+p_g.x,83 +p_g.y,1)
	line(208+p_g.x,83 +p_g.y,211+p_g.x,86 +p_g.y,1)
	line(209+p_g.x,83 +p_g.y,212+p_g.x,86 +p_g.y,1)
	line(211+p_g.x,86 +p_g.y,213+p_g.x,105+p_g.y,1)
	line(212+p_g.x,86 +p_g.y,214+p_g.x,105+p_g.y,1)
	line(213+p_g.x,105+p_g.y,220+p_g.x,113+p_g.y,1)
	line(214+p_g.x,105+p_g.y,221+p_g.x,113+p_g.y,1)
	tri(204+p_g.x,96 +p_g.y,199+p_g.x,92 +p_g.y,200+p_g.x,100+p_g.y,2)
	trib(204+p_g.x,96 +p_g.y,199+p_g.x,92 +p_g.y,200+p_g.x,100+p_g.y,2)
	tri(224+p_g.x,109+p_g.y,220+p_g.x,113+p_g.y,232+p_g.x,119+p_g.y,4)
	tri(224+p_g.x,109+p_g.y,229+p_g.x,112+p_g.y,232+p_g.x,119+p_g.y,4)
	tri(186+p_g.x,136+p_g.y,241+p_g.x,121+p_g.y,218+p_g.x,112+p_g.y,7)
	tri(186+p_g.x,136+p_g.y,241+p_g.x,121+p_g.y,240+p_g.x,136+p_g.y,7)
	tri(186+p_g.x,136+p_g.y,218+p_g.x,112+p_g.y,212+p_g.x,111+p_g.y,7)
	tri(186+p_g.x,136+p_g.y,212+p_g.x,111+p_g.y,201+p_g.x,112+p_g.y,7)
	tri(186+p_g.x,136+p_g.y,201+p_g.x,112+p_g.y,197+p_g.x,114+p_g.y,7)
	tri(186+p_g.x,136+p_g.y,197+p_g.x,114+p_g.y,191+p_g.x,120+p_g.y,7)
	tri(186+p_g.x,136+p_g.y,191+p_g.x,120+p_g.y,187+p_g.x,127+p_g.y,7)
	tri(174+p_g.x,109+p_g.y,171+p_g.x,123+p_g.y,173+p_g.x,136+p_g.y,7)
	tri(174+p_g.x,109+p_g.y,177+p_g.x,136+p_g.y,173+p_g.x,136+p_g.y,7)
	line(207+p_g.x,111+p_g.y,214+p_g.x,114+p_g.y,2)
	line(214+p_g.x,114+p_g.y,217+p_g.x,117+p_g.y,2)
	line(207+p_g.x,111+p_g.y,213+p_g.x,114+p_g.y,2)
	line(213+p_g.x,114+p_g.y,216+p_g.x,117+p_g.y,2)
	line(223+p_g.x,123+p_g.y,239+p_g.x,135+p_g.y,2)
	line(222+p_g.x,123+p_g.y,238+p_g.x,135+p_g.y,2)
	line(152+p_g.x,125+p_g.y,158+p_g.x,129+p_g.y,3)
	line(152+p_g.x,126+p_g.y,157+p_g.x,129+p_g.y,3)
	trib(156+p_g.x,118+p_g.y,149+p_g.x,125+p_g.y,151+p_g.x,127+p_g.y,3)
	tri(156+p_g.x,118+p_g.y,149+p_g.x,125+p_g.y,151+p_g.x,127+p_g.y,3)
	tri(171+p_g.x,124+p_g.y,156+p_g.x,131+p_g.y,157+p_g.x,133+p_g.y,2)
	tri(171+p_g.x,124+p_g.y,170+p_g.x,129+p_g.y,157+p_g.x,133+p_g.y,2)
	tri(204+p_g.x,81 +p_g.y,202+p_g.x,83 +p_g.y,195+p_g.x,75 +p_g.y,3)
	trib(204+p_g.x,81 +p_g.y,202+p_g.x,83 +p_g.y,195+p_g.x,75 +p_g.y,3)
	tri(202+p_g.x,79 +p_g.y,198+p_g.x,98 +p_g.y,200+p_g.x,100+p_g.y,2)
	trib(202+p_g.x,79 +p_g.y,198+p_g.x,98 +p_g.y,200+p_g.x,100+p_g.y,2)
	tri(202+p_g.x,79 +p_g.y,203+p_g.x,80 +p_g.y,200+p_g.x,100+p_g.y,2)
	trib(202+p_g.x,79 +p_g.y,203+p_g.x,80 +p_g.y,200+p_g.x,100+p_g.y,2)
	trib(196+p_g.x,72 +p_g.y,198+p_g.x,75 +p_g.y,191+p_g.x,80 +p_g.y,3)
	tri(196+p_g.x,72 +p_g.y,198+p_g.x,75 +p_g.y,191+p_g.x,80 +p_g.y,3)
	elli(217+p_g.x,120+p_g.y,6,3,4)
	elli(217+p_g.x,121+p_g.y,5,2,9+p_g.c*2)
end

function unitic.render() -------- 
	--dynamic textures
	if st.d_t then
		--light bridge
		memset(31240,255,24)
		memset(31272,255,24)
		memset(31744,255,24)
		memset(31776,255,24)

		for x0=0,15 do
			local y0=(math.sin((-t%30+x0*2)/5)+1)*6
			local y1=(math.cos((-t%30+x0*2)/5)+1)*6
			local y2=(math.sin(t/20)+1)*6
			setpix(x0,F(y0)+234,11)
			setpix(x0,F(y1)+234,10)
			setpix(x0,F(y2)+234,11)
		end
		--blue / red field
		for y0=0,31,2 do
			if blue_field[y0].d then
				setpix((blue_field[y0][1]+t//2)%24+24,y0+32,blue_field[y0][3])
				setpix((blue_field[y0][2]+t//2)%24+24,y0+32,15)
				--red field
				setpix((blue_field[y0][1]+t//2)%24+96,y0+64,blue_field[y0][3]-2)
				setpix((blue_field[y0][2]+t//2)%24+96,y0+64,15)

				setpix((blue_field[y0][1]+t//2)%24+96,y0+152,blue_field[y0][3]-2)
				setpix((blue_field[y0][2]+t//2)%24+96,y0+152,15)
			end
			if blue_field[y0+1].d then
				setpix((blue_field[y0+1][1]+t//2*23)%24+24,y0+33,15)
				setpix((blue_field[y0+1][2]+t//2*23)%24+24,y0+33,blue_field[y0+1][3])
				--red field
				setpix((blue_field[y0+1][1]+t//2*23)%24+96,y0+65,15)
				setpix((blue_field[y0+1][2]+t//2*23)%24+96,y0+65,blue_field[y0+1][3]-2)

				setpix((blue_field[y0+1][1]+t//2*23)%24+96,y0+153,15)
				setpix((blue_field[y0+1][2]+t//2*23)%24+96,y0+153,blue_field[y0+1][3]-2)
			end
		end
	end
	--particles
	for i=1,#draw.pr_g do
		local  x=draw.pr_g[i][1]*96
		local  y=draw.pr_g[i][2]*128+4
		local  z=draw.pr_g[i][3]*96
		local vx=draw.pr_g[i][4]
		local vz=draw.pr_g[i][5]
		for i=0,15,2 do
			if     vx==-1 then addp(x+96,y,z+i*6, R(1,4),R(-2,2), R(-2,2),R(2,10),R(10,11))
			elseif vx==1  then addp(x   ,y,z+i*6,-R(1,4),R(-2,2), R(-2,2),R(2,10),R(10,11))
			elseif vz==-1 then addp(x+i*6,y,z+96, R(-2,2),R(-2,2), R(1,4),R(2,10),R(10,11))
			elseif vz==1  then addp(x+i*6,y,z   , R(-2,2),R(-2,2),-R(1,4),R(2,10),R(10,11))
			end
		end
	end
	-- portal stuff --
	col_gar = false
	if st.h_q_p then col_gar = true end
	--local distance of portal (on 2d screen)
	local dist12d, dist22d, dist2d = math.huge, math.huge, false
	--global distance of portals (according to 3d coordinates)
	local dist13d, dist23d, dist3d = math.huge, math.huge, false

	local txsin = math.sin( plr.tx)
	local txcos = math.cos( plr.tx)
	local tysin = math.sin(-plr.ty)
	local tycos = math.cos(-plr.ty)
	
	-- calculation of the position of the portal points
	local p3d={} -- 3d coordinates
	local p2d={} -- 2d cooridnates

	for i=1,2 do
		if draw.p[i] then
			p3d[i] = {}
			p2d[i] = {}

			-- X Y Z
			if draw.p[i][4]==1 then
				p3d[i] = {
					{draw.p[i][1]*96, draw.p[i][2] * 128      , draw.p[i][3]*96},
					{draw.p[i][1]*96, draw.p[i][2] * 128 + 128, draw.p[i][3]*96},
					
					{draw.p[i][1]*96, draw.p[i][2] * 128      , draw.p[i][3]*96 + 96},
					{draw.p[i][1]*96, draw.p[i][2] * 128 + 128, draw.p[i][3]*96 + 96},
				}
			elseif draw.p[i][4]==3 then
				p3d[i] = {
					{draw.p[i][1]*96, draw.p[i][2] * 128      , draw.p[i][3]*96},
					{draw.p[i][1]*96, draw.p[i][2] * 128 + 128, draw.p[i][3]*96},
					
					{draw.p[i][1]*96 + 96, draw.p[i][2] * 128      , draw.p[i][3]*96},
					{draw.p[i][1]*96 + 96, draw.p[i][2] * 128 + 128, draw.p[i][3]*96},
				}
			end


			for i2 = 1, #p3d[i] do
				-- rotating
				local a1 = p3d[i][i2][1] - plr.x
				local b1 = p3d[i][i2][2] - plr.y
				local c1 = p3d[i][i2][3] - plr.z
		
				local c2 = c1 * tycos - a1 * tysin
		
				local a3 = c1 * tysin + a1 * tycos
				local b3 = b1 * txcos - c2 * txsin
				local c3 = b1 * txsin + c2 * txcos
				
				p3d[i][i2] = {a3, b3, c3}

				-- 3d into 2d

				local z0 = unitic.fov / c3

				local x0 = a3 * z0 + 120
				local y0 = b3 * z0 + 68

				p2d[i][i2] = {x0, y0, -c3, a3, b3}
			end
		end
	end
	--distance calculating
	if draw.p[1] then
		local x1, y1, z1 = portalcenter(1)

		local a1 = x1*96  - plr.x
		local b1 = y1*128 - plr.y
		local c1 = z1*96  - plr.z

		local c2 = c1 * tycos - a1 * tysin

		local a3 = c1 * tysin + a1 * tycos
		local b3 = b1 * txcos - c2 * txsin
		local c3 = b1 * txsin + c2 * txcos

		if c3>-0.001 then c3=-0.001 end
		local z0 = unitic.fov / c3

		local x0 = a3 * z0
		local y0 = b3 * z0

		dist12d=math.sqrt(x0^2 + y0^2)
		dist13d=math.sqrt(a1^2 + b1^2 + c1^2)
	end

	if draw.p[2] then
		local x2, y2, z2 = portalcenter(2)

		local a1 = x2*96  - plr.x
		local b1 = y2*128 - plr.y
		local c1 = z2*96  - plr.z

		local c2 = c1 * tycos - a1 * tysin

		local a3 = c1 * tysin + a1 * tycos
		local b3 = b1 * txcos - c2 * txsin
		local c3 = b1 * txsin + c2 * txcos

		if c3>-0.001 then c3=-0.001 end
		local z0 = unitic.fov / c3

		local x0 = a3 * z0
		local y0 = b3 * z0

		dist22d=(x0^2 + y0^2)^0.5
		dist23d=(a1^2 + b1^2 + c1^2)^0.5
		dist2d = true
		dist3d = true
	end

	if draw.p[1] and draw.p[2] then
		dist2d=dist12d < dist22d
		dist3d=dist13d < dist23d

		if dist13d < 32 then dist2d = true  end
		if dist23d < 32 then dist2d = false end
	end

	if min(dist13d,dist23d)<96 then col_gar = true end
	if t&1 == 1 then col_gar = true end

	vbank(0)
	cls(1)

	--rendering world behind portals
	if st.r_p and draw.p[1] and draw.p[2] then
		local x1, y1, z1 = portalcenter(1)
		local x2, y2, z2 = portalcenter(2)

		-- calculate portal offsets
		local relx1 = plr.x - 96 * x1
		local rely1 = plr.y - 128 * y1
		local relz1 = plr.z - 96 * z1

		local relx2 = plr.x - 96 * x2
		local rely2 = plr.y - 128 * y2
		local relz2 = plr.z - 96 * z2

		-- calculate portal rotation
		local XZ_rot1 = draw.p[1][4] // 2 + (draw.p[1][5] - 1) * 2
		local XY_rot1 = 2
		local XZ_rot2 = draw.p[2][4] // 2 + (draw.p[2][5] - 1) * 2
		local XY_rot2 = 2
		if draw.p[1][4]==2 then
			XZ_rot1 = draw.p[1][6] + (draw.p[1][5] - 1) * 2
			XY_rot1 = 1 + (draw.p[1][5] - 1) * 2
		end
		if draw.p[2][4]==2 then
			XZ_rot2 = draw.p[2][6] + (draw.p[2][5] - 1) * 2
			XY_rot2 = 1 + (draw.p[2][5] - 1) * 2
		end

		local XZ_rotd1 = (2 + XZ_rot2 - XZ_rot1) % 4
		local XZ_rotd2 = (2 + XZ_rot1 - XZ_rot2) % 4

		local XY_rotd1 = (XY_rot2 + XY_rot1) % 4
		local XY_rotd2 = (XY_rot1 + XY_rot2) % 4

		if     XY_rotd1 == 0 then
		elseif XY_rotd1 == 1 then relx1,rely1= rely1,-relx1
		elseif XY_rotd1 == 2 then relx1,rely1=-relx1,-rely1
		elseif XY_rotd1 == 3 then relx1,rely1=-rely1, relx1
		end

		if     XY_rotd2 == 0 then
		elseif XY_rotd2 == 1 then relx2,rely2= rely2,-relx2
		elseif XY_rotd2 == 2 then relx2,rely2=-relx2,-rely2
		elseif XY_rotd2 == 3 then relx2,rely2=-rely2, relx2
		end
		------

		if     XZ_rotd1 == 0 then
		elseif XZ_rotd1 == 1 then relx1,relz1= relz1,-relx1
		elseif XZ_rotd1 == 2 then relx1,relz1=-relx1,-relz1
		elseif XZ_rotd1 == 3 then relx1,relz1=-relz1, relx1
		end
		
		if     XZ_rotd2 == 0 then
		elseif XZ_rotd2 == 1 then relx2,relz2= relz2,-relx2
		elseif XZ_rotd2 == 2 then relx2,relz2=-relx2,-relz2
		elseif XZ_rotd2 == 3 then relx2,relz2=-relz2, relx2
		end

		if st.h_q_p or min(dist13d,dist23d)<96 or t%2==0 then
				if (dist2d and not st.r_both) or (dist3d and st.r_both) then
					cam.x = 96*x2 + relx1
					cam.y = 128*y2 + rely1
					cam.z = 96*z2 + relz1
					cam.ty = plr.ty + math.pi * XZ_rotd1 / 2
					cam.tx = plr.tx
					unitic.update(true,1) unitic.draw(false) --blue portal
				else
					cam.x = 96*x1 + relx2
					cam.y = 128*y1 + rely2
					cam.z = 96*z1 + relz2
					cam.ty = plr.ty + math.pi * XZ_rotd2 / 2
					cam.tx = plr.tx
					unitic.update(true,2) unitic.draw(false) --orange portal
				end

				if st.r_both and draw.p[1] and draw.p[2] then
				vbank(1) do
					cls(0)
					local portal = dist3d and p2d[1] or p2d[2]

					local mz1, mz2, mz3, mz4 = portal[1][3], portal[2][3], portal[3][3], portal[4][3]
					local minz = min(mz1, mz2, mz3, mz4)
					if minz > 1e-10 then
						local div = minz/1e-10
						mz1,mz2,mz3,mz4=mz1/div,mz2/div,mz3/div,mz4/div
					end
					if not (portal[1][4] and portal[2][4] and portal[3][4] and portal[4][4]) then
						ttri(
							portal[1][1],portal[1][2],
							portal[2][1],portal[2][2],
							portal[3][1],portal[3][2],
							24,232,
							0,232,
							24,200,
							0,15,
							mz1,
							mz2,
							mz3
						)
						ttri(
							portal[2][1],portal[2][2],
							portal[4][1],portal[4][2],
							portal[3][1],portal[3][2],
							0,232,
							0,200,
							24,200,
							0,15,
							mz2,
							mz4,
							mz3
						)
					end
				end vbank(0)
				if dist3d then
					cam.x = 96*x1 + relx2
					cam.y = 128*y1 + rely2
					cam.z = 96*z1 + relz2
					cam.ty = plr.ty + math.pi * XZ_rotd2 / 2
					cam.tx = plr.tx
					unitic.update(true,2) unitic.draw(false) --orange portal
				else
					cam.x = 96*x2 + relx1
					cam.y = 128*y2 + rely1
					cam.z = 96*z2 + relz1
					cam.ty = plr.ty + math.pi * XZ_rotd1 / 2
					cam.tx = plr.tx
					unitic.update(true,1) unitic.draw(false) --blue portal
				end
			end
			memcpy(0x8000,0x0,240*136/2)
		else
			memcpy(0x0,0x8000,240*136/2)
		end
	end

	cam.x = plr.x
	cam.y = plr.y
	cam.z = plr.z
	
	cam.tx = plr.tx
	cam.ty = plr.ty
	cam.tz = plr.tz

	
	vbank(1)
	cls(1)

	frame_ms[3] = time()

	unitic.update_pr()
	unitic.update()
	frame_ms[4]=time()
	unitic.draw(true)

	--portal overlays
	if draw.p[1] or draw.p[2] then
		for i=1,2 do
			if draw.p[i] then
				--portal border
				if i==1 then
					ttri_clip(p2d[i][1][1],p2d[i][1][2],p2d[i][2][1],p2d[i][2][2],p2d[i][3][1],p2d[i][3][2],120,32,120,0,96,32,15, 3,  p2d[i][1][4],p2d[i][1][5],p2d[i][1][3] ,p2d[i][2][4],p2d[i][2][5],p2d[i][2][3] ,p2d[i][3][4],p2d[i][3][5],p2d[i][3][3], 0.999)
					ttri_clip(p2d[i][4][1],p2d[i][4][2],p2d[i][2][1],p2d[i][2][2],p2d[i][3][1],p2d[i][3][2],96 ,0 ,120,0,96,32,15, 3,  p2d[i][4][4],p2d[i][4][5],p2d[i][4][3] ,p2d[i][2][4],p2d[i][2][5],p2d[i][2][3] ,p2d[i][3][4],p2d[i][3][5],p2d[i][3][3], 0.999)
				else
					ttri_clip(p2d[i][1][1],p2d[i][1][2],p2d[i][2][1],p2d[i][2][2],p2d[i][3][1],p2d[i][3][2],24,64,24,32,0,64,15, 3,  p2d[i][1][4],p2d[i][1][5],p2d[i][1][3] ,p2d[i][2][4],p2d[i][2][5],p2d[i][2][3] ,p2d[i][3][4],p2d[i][3][5],p2d[i][3][3], 0.999)
					ttri_clip(p2d[i][4][1],p2d[i][4][2],p2d[i][2][1],p2d[i][2][2],p2d[i][3][1],p2d[i][3][2],0 ,32,24,32,0,64,15, 3,  p2d[i][4][4],p2d[i][4][5],p2d[i][4][3] ,p2d[i][2][4],p2d[i][2][5],p2d[i][2][3] ,p2d[i][3][4],p2d[i][3][5],p2d[i][3][3], 0.999)
				end

				--portal center
				if (not st.r_p or dist2d ~= (i==1)) and not st.r_both then
					if i==1 then
						ttri_clip(p2d[i][1][1],p2d[i][1][2],p2d[i][2][1],p2d[i][2][2],p2d[i][3][1],p2d[i][3][2],24,232,24,200,0,232,15, 3,  p2d[i][1][4],p2d[i][1][5],p2d[i][1][3] ,p2d[i][2][4],p2d[i][2][5],p2d[i][2][3] ,p2d[i][3][4],p2d[i][3][5],p2d[i][3][3], 0.995)
						ttri_clip(p2d[i][4][1],p2d[i][4][2],p2d[i][2][1],p2d[i][2][2],p2d[i][3][1],p2d[i][3][2],0 ,200,24,200,0,232,15, 3,  p2d[i][4][4],p2d[i][4][5],p2d[i][4][3] ,p2d[i][2][4],p2d[i][2][5],p2d[i][2][3] ,p2d[i][3][4],p2d[i][3][5],p2d[i][3][3], 0.995)
					else
						ttri_clip(p2d[i][1][1],p2d[i][1][2],p2d[i][2][1],p2d[i][2][2],p2d[i][3][1],p2d[i][3][2],48,232,48,200,24,232,15, 3,  p2d[i][1][4],p2d[i][1][5],p2d[i][1][3] ,p2d[i][2][4],p2d[i][2][5],p2d[i][2][3] ,p2d[i][3][4],p2d[i][3][5],p2d[i][3][3], 0.995)
						ttri_clip(p2d[i][4][1],p2d[i][4][2],p2d[i][2][1],p2d[i][2][2],p2d[i][3][1],p2d[i][3][2],24,200,48,200,24,232,15, 3,  p2d[i][4][4],p2d[i][4][5],p2d[i][4][3] ,p2d[i][2][4],p2d[i][2][5],p2d[i][2][3] ,p2d[i][3][4],p2d[i][3][5],p2d[i][3][3], 0.995)
					end
				end
			end
		end
	end

	--cross
	if not plr.holding then
		pix(120,68,7)
		if plr.pg_lvl>0 then
			if draw.p[1] or draw.p[2] then spr(498,117,65,1) end
			if draw.p[1] then spr(496, 117, 65, 1) end
			if draw.p[2] then spr(497, 117, 65, 1) end
		end
	end
	frame_ms[5]=time()
end

local turrets_params={
	portals = true,
	walls = {[1]=true,[2]=true,[4]=true,[5]=true,[6]=true,[8]=true,[9]=true,[10]=true,[13]=true,[14]=true,[16]=true,[17]=true,[18]=true,[19]=true},
	floors = {[1]=true,[2]=true,[4]=true,[6]=true,[7]=true,[8]=true,[9]=true},
	objs = {"c","b","lb","l"},
	player = true
}
function unitic.turret_update()
	for i=1,#draw.objects.t do
		local t_ang = 0
		if     draw.objects.t[i].type == 12 then t_ang=pi2
		elseif draw.objects.t[i].type == 13 then t_ang=-pi2
		elseif draw.objects.t[i].type == 14 then t_ang=0
		elseif draw.objects.t[i].type == 15 then t_ang=-math.pi end

		local x0 = draw.objects.t[i].x
		local y0 = draw.objects.t[i].y
		local z0 = draw.objects.t[i].z

		local hits = false --did at least one ray hit the player

		local v={
			{plr.x, plr.y, plr.z}
		}

		if draw.p[1] and draw.p[2] then
			v[2]=table.pack(teleport(1,plr.x,plr.y,plr.z))
			v[3]=table.pack(teleport(2,plr.x,plr.y,plr.z))
		end

		for i2=1,#v do
			local ang = math.atan(x0-v[i2][1], z0-v[i2][3])-t_ang

			if abs(ang)<pi2*0.7 or abs(ang-(math.pi*2))<pi2*0.7 then
				local hit = raycast(x0,y0+35,z0, v[i2][1],v[i2][2],v[i2][3], nil, turrets_params)
				if hit and hit.player then hits = true end
			end
		end

		if hits then draw.objects.t[i].cd=min(draw.objects.t[i].cd+1,41)
			if draw.objects.t[i].cd>40 then
				plr.hp=plr.hp-R(1,2)
				if plr.hp_t_2<2 then plr.hp_t_2=5 sfx_(4,"C-3",-1,1) end
				if draw.objects.t[i].type==14 or draw.objects.t[i].type==15 then
					for _=1,2 do
						if R()>0.75 then addp(x0+16,y0+32,z0,R()-0.5,R()-0.5,R()-0.5,10,13+R(0,1)) end
						if R()>0.75 then addp(x0+16,y0+48,z0,R()-0.5,R()-0.5,R()-0.5,10,13+R(0,1)) end
						if R()>0.75 then addp(x0-16,y0+32,z0,R()-0.5,R()-0.5,R()-0.5,10,13+R(0,1)) end
						if R()>0.75 then addp(x0-16,y0+48,z0,R()-0.5,R()-0.5,R()-0.5,10,13+R(0,1)) end
					end
				else
					for _=1,2 do
						if R()>0.75 then addp(x0,y0+32,z0+16,R()-0.5,R()-0.5,R()-0.5,10,13+R(0,1)) end
						if R()>0.75 then addp(x0,y0+48,z0+16,R()-0.5,R()-0.5,R()-0.5,10,13+R(0,1)) end
						if R()>0.75 then addp(x0,y0+32,z0-16,R()-0.5,R()-0.5,R()-0.5,10,13+R(0,1)) end
						if R()>0.75 then addp(x0,y0+48,z0-16,R()-0.5,R()-0.5,R()-0.5,10,13+R(0,1)) end
					end
				end
			end
		else
			draw.objects.t[i].cd=max(draw.objects.t[i].cd-1,0)
		end
	end
end

function unitic.button_update()
	for i=1,#draw.objects.b do --Pressing buttons
		draw.objects.b[i].tick=false
		if draw.objects.b[i].t~=-1 and draw.objects.b[i].s then
			draw.objects.b[i].t1=draw.objects.b[i].t1+1
			if draw.objects.b[i].t~=math.huge and draw.objects.b[i].t1>=draw.objects.b[i].t then
				if draw.objects.b[i].t~=0 then sfx_(17) end draw.objects.b[i].s=false draw.objects.b[i].t1=0 draw.objects.b[i].tick=true
			end
		end

		local dist=((draw.objects.b[i].x-plr.x)^2 + (draw.objects.b[i].y-plr.y)^2 + (draw.objects.b[i].z-plr.z)^2) ^ 0.5
		local rc=raycast_legacy(
			draw.objects.b[i].x,draw.objects.b[i].y+26,draw.objects.b[i].z,
			plr.x,plr.y,plr.z,
			{[1]=true,[2]=true,[3]=true,[4]=true,[5]=true,[6]=true,[7]=true,[8]=true,[9]=true,[10]=true,[13]=true,[14]=true,[15]=true,[16]=true,[17]=true,[18]=true,[19]=true},
			{[1]=true,[2]=true,[3]=true,[4]=true,[5]=true,[6]=true,[7]=true,[8]=true,[9]=true})

		local ang=math.atan(draw.objects.b[i].x-plr.x,draw.objects.b[i].z-plr.z)-plr.ty

		if keyp(5) and dist<128 and not rc and ang<-2.5 and ang>-3.8 then
			s.t1=15 sfx_(16)
			draw.objects.b[i].tick=true
			if draw.objects.b[i].t==-1 then
				draw.objects.b[i].s=not draw.objects.b[i].s if not draw.objects.b[i].s then s.t1=15 sfx_(17)end
			else
				draw.objects.b[i].s=true draw.objects.b[i].t1=0
			end
		end
	end


	for i=1,#draw.objects.fb do --floor buttons
		x0=draw.objects.fb[i].x
		y0=draw.objects.fb[i].y
		z0=draw.objects.fb[i].z

		local last_s=draw.objects.fb[i].s

		draw.objects.fb[i].tick=false
		--Checking the collision of the upper scriptbox with cubes (perhaps not the best method, but still fast)
		local activate=false
		for i=1,#draw.objects.c do
			local x1=draw.objects.c[i].x
			local y1=draw.objects.c[i].y
			local z1=draw.objects.c[i].z
			if coll(x1-24,y1-24,z1-24,x1+24,y1+24,z1+24, x0-37, y0+7, z0-37, x0+37, y0+8, z0+37) then activate=true end
		end
		--collision with the player
			if coll(plr.x - 16, plr.y - 64, plr.z - 16, plr.x, plr.y + 16, plr.z + 16, x0-37, y0+7, z0-37, x0+37, y0+8, z0+37) then activate=true end
		--
		draw.objects.fb[i].s=activate
		if activate~=last_s then
			draw.objects.fb[i].tick=true
			if activate then s.t1=15 sfx_(16) else s.t1=15 sfx_(17) end
		end
	end
end

local function portal_check(p_id) --portal id
	if not draw.p[p_id] then return end
	if draw.p[p_id][4]==1 and coll(plr.x - 16, plr.y - 64, plr.z - 16, plr.x + 16, plr.y + 16, plr.z + 16, draw.p[p_id][1] * 96, draw.p[p_id][2] * 128 + 2, draw.p[p_id][3] * 96 + 2, draw.p[p_id][1] * 96, draw.p[p_id][2] * 128 + 126, draw.p[p_id][3] * 96 + 94)
	then
		if draw.p[p_id][5]==1 then plr.x = draw.p[p_id][1] * 96 - 17 end
		if draw.p[p_id][5]==2 then plr.x = draw.p[p_id][1] * 96 + 17 end
	end
	
	if draw.p[p_id][4]==3 and coll(plr.x - 16, plr.y - 64, plr.z - 16, plr.x + 16, plr.y + 16, plr.z + 16, draw.p[p_id][1] * 96 + 2, draw.p[p_id][2] * 128 + 2, draw.p[p_id][3] * 96, draw.p[p_id][1] * 96 + 94, draw.p[p_id][2] * 128 + 126, draw.p[p_id][3] * 96)
	then
		if draw.p[p_id][5]==1 then plr.z = draw.p[p_id][3] * 96 + 17 end
		if draw.p[p_id][5]==2 then plr.z = draw.p[p_id][3] * 96 - 17 end
	end

end

local function portal_gun()
	local x1,y1,z1=plr.x,plr.y,plr.z --player coordinates

	local x2=x1-math.sin(plr.ty)*10000*math.cos(plr.tx)
	local y2=y1-math.sin(plr.tx)*10000
	local z2=z1-math.cos(plr.ty)*10000*math.cos(plr.tx)

	local x,y,z,f=raycast_legacy(x1,y1,z1,x2,y2,z2,{[1]=true,[2]=true,[4]=true,[5]=true,[6]=true,[7]=true,[8]=true,[9]=true,[10]=true,[13]=true,[14]=true,[16]=true,[17]=true,[18]=true,[19]=true},{[1]=true,[2]=true,[4]=true,[6]=true,[7]=true,[8]=true,[9]=true})
	
	local x3,y3,z3 = raycast_legacy(x1,y1,z1,x2,y2,z2,{[1]=true,[2]=true,[4]=true,[5]=true,[6]=true,[7]=true,[8]=true,[9]=true,[10]=true,[13]=true,[14]=true,[16]=true,[17]=true,[18]=true,[19]=true},{[1]=true,[2]=true,[4]=true,[6]=true,[7]=true,[8]=true,[9]=true},true)
	
	--portal gun texture
	if clp1 and plr.pg_lvl>0 then p_g.c=1 p_g.t2=1 end
	if clp2 and plr.pg_lvl>1 then p_g.c=2 p_g.t2=1 end

	p_g.cd1=max(p_g.cd1-1,0)
	p_g.cd2=max(p_g.cd2-1,0)

	--portal gun (portals)
	if x and f~=2 and draw.map[f][x][y][z][2]==2 then
		if clp1 and plr.pg_lvl>0 and not (draw.p[2] and draw.p[2][1]==x and draw.p[2][2]==y and draw.p[2][3]==z and draw.p[2][4]==f) then
			p_g.cd1=10
			portal_check(1)
			draw.p[1]={x,y,z,f,draw.map[f][x][y][z][1],0}
			update_world()
		elseif clp2 and plr.pg_lvl>1 and not (draw.p[1] and draw.p[1][1]==x and draw.p[1][2]==y and draw.p[1][3]==z and draw.p[1][4]==f) then
			p_g.cd2=10
			portal_check(2)
			draw.p[2]={x,y,z,f,draw.map[f][x][y][z][1],0}
			update_world()
		end
		draw_particles = false
	elseif x then
		if (clp1 and plr.pg_lvl>0) or (clp2 and plr.pg_lvl>1) then
			for i=0,50 do
				addp(x3,y3,z3,
				(R()-0.5)*5,
				(R()-0.5)*5,
				(R()-0.5)*5,
				R(5,25),
				clp1 and R(10,11) or R(13,14))
			end
		end
	end


	--portal reset
	if debug and (keyp(6) or (plr.bf_t>1 and save.lvl~=3 and save.lvl2~=1)) then
		if draw.p[1] then
			portal_check(1)
			draw.p[1]=nil
			update_world()
		end
		-----------------
		if draw.p[2] then
			portal_check(2)
			draw.p[2]=nil
			update_world()
		end
	end

	--portal gun texture (2)
	p_g.t2=max(p_g.t2-0.1,0)

	p_g.x=    math.sin(p_g.t1/10) *5+p_g.t2^0.5*10
	p_g.y=abs(math.cos(p_g.t1/10))*5+p_g.t2^0.5*7
	if unitic.fov>80 then
		p_g.x=p_g.x+(unitic.fov-80)/8.5
		p_g.y=p_g.y+(unitic.fov-80)/15
	end

	if p_g.t1>0 then p_g.x=p_g.x+5 p_g.y=p_g.y+5 end
end

--map
function addwall(x, y, z, angle, face, type)
	draw.map[angle][x][y][z]={face,type}
end

function addobj(x, y, z, type,t1) --objects
	if type==1 or type==2 then --cubes
		draw.objects.c[#draw.objects.c+1]=
		{type=type, --type
		id=#draw.objects.c+1, --id
		x=x,y=y,z=z, --object coordinates
		x1=0,y1=0,z1=0, --Coordinates relative to the portal
		inp=false, --whether the cube is located in the portal
		held=false,
		vx=0, vy=0, vz=0, --velocity
		draw=true, --whether to display the model
		disp=t1, -- cube dispenser ID
		model=model[type]}
	elseif type==3 then --cube dispenser
		draw.objects.cd[#draw.objects.cd+1]=
		{type=type,
		id=#draw.objects.cd+1,
		x=x,y=y,z=z,
		draw=true,
		t=0,ct=0, --cube type
		model=model[type]}
	elseif type==4 or type==5 or type==6 or type==7 then --light bridges
		draw.objects.lb[#draw.objects.lb+1]=
		{type=type,
		id=#draw.objects.lb+1,
		x=x,y=y,z=z,
		draw=true,
		model=model[type]}
	elseif type==8 or type==9 or type==10 or type==11 then --buttons
		draw.objects.b[#draw.objects.b+1]=
		{type=type,
		id=#draw.objects.b+1,
		x=x,y=y,z=z,
		t=t1 or (math.huge), --button press time (math.huge for a constant signal, -1 to switch the signal)
		t1=0,
		tick=false, --sends a signal 1 tick long while pressing the button
		s=false, --button signal
		draw=true,model={v=model[type].v,f=model[type].f, compiled = model[type].compiled}}
	elseif type==12 or type==13 or type==14 or type==15 then --turrets
		draw.objects.t[#draw.objects.t+1]=
		{type=type,
		id=#draw.objects.t+1,
		x=x,y=y,z=z,
		cd=0,
		draw=true,model=model[type]}
	elseif type==16 then --floor button
		draw.objects.fb[#draw.objects.fb+1]=
		{type=type,
		id=#draw.objects.fb+1,
		x=x,y=y,z=z,
		tick=false,
		s=false,
		draw=true,model={v=model[type].v,f=model[type].f, compiled = model[type].compiled}}
	elseif type==17 or type==18 or type==19 or type==20 then --lifts
		draw.objects.l[#draw.objects.l+1]=
		{type=type,
		id=#draw.objects.l+1,
		x=x,y=y,z=z,
		draw=true,model=model[type]}
	elseif type==21 or type==22 or type==23 or type==24 then --display
		draw.objects.d[#draw.objects.d+1]=
		{type=type,
		id=#draw.objects.d+1,
		x=x,y=y,z=z,
		s=false, --signal
		draw=true,model={v=model[type].v,f=model[type].f, compiled = model[type].compiled}}

	elseif type<=#model and type>0 then error("unknown object | "..type) else error("unknown type | "..type) end
end

function update_world()
	draw.world.f={}
	draw.world_bp.f={}
	draw.world_op.f={}
	draw.pr_g={}

	for i=0,(world_size[1]-1)*(world_size[2]-1)*(world_size[3]-1) do draw.world.v[i+1][4] = false end

	for angle=1,3 do for x0=0,world_size[1]-1 do for y0=0,world_size[2]-1 do for z0=0,world_size[3]-1 do
		local face = draw.map[angle][x0][y0][z0][1]
		local type = draw.map[angle][x0][y0][z0][2]-1

		local type1 = type%5  --4
		local type2 = type//5 --0
		------
		if type~=-1 then
			if angle==1 then
				table.insert(draw.world.f,{w={face,angle,x0,y0,z0},x0+y0*world_size[3]+z0*world_size[4]+1,x0+y0*world_size[3]+z0*world_size[4]+world_size[4]+1,x0+y0*world_size[3]+z0*world_size[4]+world_size[3]+1,f=face,uv={x={24+type1*24,type1*24,24+type1*24},y={32+type2*32,32+type2*32,0+type2*32}}})
				table.insert(draw.world.f,{w={face,angle,x0,y0,z0},x0+y0*world_size[3]+z0*world_size[4]+world_size[4]+1,x0+y0*world_size[3]+z0*world_size[4]+world_size[4]+world_size[3]+1,x0+y0*world_size[3]+z0*world_size[4]+world_size[3]+1,f=face,uv={x={type1*24,type1*24,24+type1*24},y={32+type2*32,0+type2*32,0+type2*32}}})
				--
				draw.world.v[x0+y0*world_size[3]+z0*world_size[4]+1][4]=true
				draw.world.v[x0+y0*world_size[3]+z0*world_size[4]+world_size[4]+1][4]=true
				draw.world.v[x0+y0*world_size[3]+z0*world_size[4]+world_size[3]+1][4]=true
				draw.world.v[x0+y0*world_size[3]+z0*world_size[4]+world_size[4]+world_size[3]+1][4]=true
			end

			if angle==2 then
				table.insert(draw.world.f,{w={face,angle,x0,y0,z0},x0+y0*world_size[3]+z0*world_size[4]+1,x0+y0*world_size[3]+z0*world_size[4]+2,x0+y0*world_size[3]+z0*world_size[4]+world_size[4]+1,f=face,uv={x={0+type1*24,0+type1*24,24+type1*24},y={152+type2*24,176+type2*24,152+type2*24}}})
				table.insert(draw.world.f,{w={face,angle,x0,y0,z0},x0+y0*world_size[3]+z0*world_size[4]+2,x0+y0*world_size[3]+z0*world_size[4]+world_size[4]+2,x0+y0*world_size[3]+z0*world_size[4]+world_size[4]+1,f=face,uv={x={0+type1*24,24+type1*24,24+type1*24},y={176+type2*24,176+type2*24,152+type2*24}}})
				draw.world.v[x0+y0*world_size[3]+z0*world_size[4]+1][4]=true
				draw.world.v[x0+y0*world_size[3]+z0*world_size[4]+2][4]=true
				draw.world.v[x0+y0*world_size[3]+z0*world_size[4]+world_size[4]+1][4]=true
				draw.world.v[x0+y0*world_size[3]+z0*world_size[4]+world_size[4]+2][4]=true
			end

			if angle==3 then
				table.insert(draw.world.f,{w={face,angle,x0,y0,z0},x0+y0*world_size[3]+z0*world_size[4]+1,x0+y0*world_size[3]+z0*world_size[4]+2,x0+y0*world_size[3]+z0*world_size[4]+world_size[3]+1,f=face,uv={x={24+type1*24,type1*24,24+type1*24},y={32+type2*32,32+type2*32,0+type2*32}}})
				table.insert(draw.world.f,{w={face,angle,x0,y0,z0},x0+y0*world_size[3]+z0*world_size[4]+2,x0+y0*world_size[3]+z0*world_size[4]+world_size[3]+2,x0+y0*world_size[3]+z0*world_size[4]+world_size[3]+1,f=face,uv={x={type1*24,type1*24,24+type1*24},y={32+type2*32,0+type2*32,0+type2*32}}})
				draw.world.v[x0+y0*world_size[3]+z0*world_size[4]+1][4]=true
				draw.world.v[x0+y0*world_size[3]+z0*world_size[4]+2][4]=true
				draw.world.v[x0+y0*world_size[3]+z0*world_size[4]+world_size[3]+2][4]=true
				draw.world.v[x0+y0*world_size[3]+z0*world_size[4]+world_size[3]+1][4]=true
			end


			if face == 2 and (angle == 1 or angle == 3) then
				local idx = #draw.world.f
				for i = 1, 3 do
					draw.world.f[idx - 1].uv.x[i] = (2 * type1 + 1) * 24 - draw.world.f[idx - 1].uv.x[i]
					draw.world.f[idx].uv.x[i] = (2 * type1 + 1) * 24 - draw.world.f[idx].uv.x[i]
				end
			end
		end
		------
	end end end end
	--the world for blue and orange portals
	if draw.p[1] and draw.p[2] then
		for i=1,#draw.world.f do
			--blue portal
			local draw_wall=true

			if draw.p[2][4]==1 and draw.p[2][5]==1 then
				if (draw.world.f[i].w[3]>=draw.p[2][1]) --X
				or (draw.world.f[i].w[2]==1 and draw.world.f[i].w[1]==1) --X
				or (draw.world.f[i].w[2]==3 and draw.world.f[i].w[1]==1 and draw.world.f[i].w[5]>draw.p[2][3]) --Z
				or (draw.world.f[i].w[2]==3 and draw.world.f[i].w[1]==2 and draw.world.f[i].w[5]<draw.p[2][3]) --Z
				then draw_wall=false end

			elseif draw.p[2][4]==1 and draw.p[2][5]==2 then
				if (draw.world.f[i].w[3]<draw.p[2][1]) --X
				or (draw.world.f[i].w[2]==1 and draw.world.f[i].w[1]==2) --X
				or (draw.world.f[i].w[2]==3 and draw.world.f[i].w[1]==1 and draw.world.f[i].w[5]>draw.p[2][3]) --Z
				or (draw.world.f[i].w[2]==3 and draw.world.f[i].w[1]==2 and draw.world.f[i].w[5]<draw.p[2][3]) --Z
				then draw_wall=false end

			elseif draw.p[2][4]==3 and draw.p[2][5]==1 then
				if (draw.world.f[i].w[5]<draw.p[2][3]) --Z
				or (draw.world.f[i].w[2]==3 and draw.world.f[i].w[1]==1) --Z
				or (draw.world.f[i].w[2]==1 and draw.world.f[i].w[1]==1 and draw.world.f[i].w[3]<draw.p[2][1]) --X
				or (draw.world.f[i].w[2]==1 and draw.world.f[i].w[1]==2 and draw.world.f[i].w[3]>draw.p[2][1]) --X
				then draw_wall=false end

			elseif draw.p[2][4]==3 and draw.p[2][5]==2 then
				if (draw.world.f[i].w[5]>=draw.p[2][3]) --Z
				or (draw.world.f[i].w[2]==3 and draw.world.f[i].w[1]==2) --Z
				or (draw.world.f[i].w[2]==1 and draw.world.f[i].w[1]==1 and draw.world.f[i].w[3]<draw.p[2][1]) --X
				or (draw.world.f[i].w[2]==1 and draw.world.f[i].w[1]==2 and draw.world.f[i].w[3]>draw.p[2][1]) --X
				then draw_wall=false end
			end


			if (draw.world.f[i].w[2]==2 and draw.world.f[i].w[1]==2 and draw.world.f[i].w[4]>draw.p[2][2]) --Y
			or (draw.world.f[i].w[2]==2 and draw.world.f[i].w[1]==1 and draw.world.f[i].w[4]<draw.p[2][2]) --Y
			then draw_wall=false end

			if draw_wall then draw.world_bp.f[#draw.world_bp.f+1]=draw.world.f[i] end

			--orange portal
			local draw_wall=true

			if draw.p[1][4]==1 and draw.p[1][5]==1 then
				if (draw.world.f[i].w[3]>=draw.p[1][1]) --X
				or (draw.world.f[i].w[2]==1 and draw.world.f[i].w[1]==1) --X
				or (draw.world.f[i].w[2]==3 and draw.world.f[i].w[1]==1 and draw.world.f[i].w[5]>draw.p[1][3]) --Z
				or (draw.world.f[i].w[2]==3 and draw.world.f[i].w[1]==2 and draw.world.f[i].w[5]<draw.p[1][3]) --Z
				then draw_wall=false end

			elseif draw.p[1][4]==1 and draw.p[1][5]==2 then
				if (draw.world.f[i].w[3]<draw.p[1][1]) --X
				or (draw.world.f[i].w[2]==1 and draw.world.f[i].w[1]==2) --X
				or (draw.world.f[i].w[2]==3 and draw.world.f[i].w[1]==1 and draw.world.f[i].w[5]>draw.p[1][3]) --Z
				or (draw.world.f[i].w[2]==3 and draw.world.f[i].w[1]==2 and draw.world.f[i].w[5]<draw.p[1][3]) --Z
				then draw_wall=false end

			elseif draw.p[1][4]==3 and draw.p[1][5]==1 then
				if (draw.world.f[i].w[5]<draw.p[1][3]) --Z
				or (draw.world.f[i].w[2]==3 and draw.world.f[i].w[1]==1) --Z
				or (draw.world.f[i].w[2]==1 and draw.world.f[i].w[1]==1 and draw.world.f[i].w[3]<draw.p[1][1]) --X
				or (draw.world.f[i].w[2]==1 and draw.world.f[i].w[1]==2 and draw.world.f[i].w[3]>draw.p[1][1]) --X
				then draw_wall=false end

			elseif draw.p[1][4]==3 and draw.p[1][5]==2 then
				if (draw.world.f[i].w[5]>=draw.p[1][3]) --Z
				or (draw.world.f[i].w[2]==3 and draw.world.f[i].w[1]==2) --Z
				or (draw.world.f[i].w[2]==1 and draw.world.f[i].w[1]==1 and draw.world.f[i].w[3]<draw.p[1][1]) --X
				or (draw.world.f[i].w[2]==1 and draw.world.f[i].w[1]==2 and draw.world.f[i].w[3]>draw.p[1][1]) --X
				then draw_wall=false end
			end


			if (draw.world.f[i].w[2]==2 and draw.world.f[i].w[1]==2 and draw.world.f[i].w[4]>draw.p[1][2]) --Y
			or (draw.world.f[i].w[2]==2 and draw.world.f[i].w[1]==1 and draw.world.f[i].w[4]<draw.p[1][2]) --Y
			then draw_wall=false end

			if draw_wall then draw.world_op.f[#draw.world_op.f+1]=draw.world.f[i] end
		end
	end
	--light bridge generator
	draw.objects.lb={}
	draw.world.sp={}
	if draw.lg~=0 then
		for i=1,#draw.lg do
			local lx,ly,lz=draw.lg[i][1],draw.lg[i][2],draw.lg[i][3]
			local vx,vz=0,0
			if     draw.lg[i][4]==1 and draw.lg[i][5]==1 then vx=-1 lx=lx-1
			elseif draw.lg[i][4]==1 and draw.lg[i][5]==2 then vx=1
			elseif draw.lg[i][4]==3 and draw.lg[i][5]==1 then vz=1
			elseif draw.lg[i][4]==3 and draw.lg[i][5]==2 then vz=-1 lz=lz-1 else error(draw.lg[i][4].." | "..draw.lg[i][5])
			end
			for _=1,100 do --bridge lenght limiter
				if     vx==-1 then addobj(48+lx*96,ly*128,48+lz*96,4)
				elseif vx==1  then addobj(48+lx*96,ly*128,48+lz*96,5)
				elseif vz==-1 then addobj(48+lx*96,ly*128,48+lz*96,6)
				elseif vz==1  then addobj(48+lx*96,ly*128,48+lz*96,7)
				end

				lx=lx+vx
				lz=lz+vz

				local bp=false
				local op=false
				--going through portals
				if draw.p[1] and draw.p[2] then
					--blue portal
				   if     vx==1  and draw.p[1][4]==1 and draw.p[1][5]==1 and lx  ==draw.p[1][1] and ly==draw.p[1][2] and lz  ==draw.p[1][3] then bp=true
					elseif vx==-1 and draw.p[1][4]==1 and draw.p[1][5]==2 and lx+1==draw.p[1][1] and ly==draw.p[1][2] and lz  ==draw.p[1][3] then bp=true
					elseif vz==1  and draw.p[1][4]==3 and draw.p[1][5]==2 and lx  ==draw.p[1][1] and ly==draw.p[1][2] and lz  ==draw.p[1][3] then bp=true
					elseif vz==-1 and draw.p[1][4]==3 and draw.p[1][5]==1 and lx  ==draw.p[1][1] and ly==draw.p[1][2] and lz+1==draw.p[1][3] then bp=true
					--orange portal
					elseif vx==1  and draw.p[2][4]==1 and draw.p[2][5]==1 and lx  ==draw.p[2][1] and ly==draw.p[2][2] and lz  ==draw.p[2][3] then op=true
					elseif vx==-1 and draw.p[2][4]==1 and draw.p[2][5]==2 and lx+1==draw.p[2][1] and ly==draw.p[2][2] and lz  ==draw.p[2][3] then op=true
					elseif vz==1  and draw.p[2][4]==3 and draw.p[2][5]==2 and lx  ==draw.p[2][1] and ly==draw.p[2][2] and lz  ==draw.p[2][3] then op=true
					elseif vz==-1 and draw.p[2][4]==3 and draw.p[2][5]==1 and lx  ==draw.p[2][1] and ly==draw.p[2][2] and lz+1==draw.p[2][3] then op=true
					end
					--teleporting
					if op then
						lx,ly,lz=draw.p[1][1],draw.p[1][2],draw.p[1][3]
						if     draw.p[1][4]==1 and draw.p[1][5]==2 then vz=0 vx=1
						elseif draw.p[1][4]==1 and draw.p[1][5]==1 then vz=0 vx=-1 lx=lx-1
						elseif draw.p[1][4]==3 and draw.p[1][5]==2 then vx=0 vz=-1 lz=lz-1
						elseif draw.p[1][4]==3 and draw.p[1][5]==1 then vx=0 vz=1
						end
					elseif bp then
						lx,ly,lz=draw.p[2][1],draw.p[2][2],draw.p[2][3]
						if     draw.p[2][4]==1 and draw.p[2][5]==2 then vz=0 vx=1
						elseif draw.p[2][4]==1 and draw.p[2][5]==1 then vz=0 vx=-1 lx=lx-1
						elseif draw.p[2][4]==3 and draw.p[2][5]==2 then vx=0 vz=-1 lz=lz-1
						elseif draw.p[2][4]==3 and draw.p[2][5]==1 then vx=0 vz=1
						end
					end
				end
				--if the bridge collides with a wall, we stop the loop
				if lx<0 or lx>world_size[1]-1 or lz<0 or lz>world_size[3]-1 then draw.pr_g[#draw.pr_g+1]={lx,ly,lz,vx,vz} break end
				if not (bp or op) then
				if     (vx==1  and draw.map[1][lx  ][ly][lz  ][2]~=0 and draw.map[1][lx  ][ly][lz  ][2]~=3 and draw.map[1][lx  ][ly][lz  ][2]~=15)
				or (vx==-1 and draw.map[1][lx+1][ly][lz  ][2]~=0 and draw.map[1][lx+1][ly][lz  ][2]~=3 and draw.map[1][lx+1][ly][lz  ][2]~=15)
				or (vz==1  and draw.map[3][lx  ][ly][lz  ][2]~=0 and draw.map[3][lx  ][ly][lz  ][2]~=3 and draw.map[3][lx  ][ly][lz  ][2]~=15)
				or (vz==-1 and draw.map[3][lx  ][ly][lz+1][2]~=0 and draw.map[3][lx  ][ly][lz+1][2]~=3 and draw.map[3][lx  ][ly][lz+1][2]~=15) then draw.pr_g[#draw.pr_g+1]={lx,ly,lz,vx,vz} break
				end end
			end
		end
	end
end

local function load_world(set_id,world_id) --Loads the world from ROM memory (from the 'Maps' table)
	--init
	draw.map={}
	draw.world={v={},f={},sp={}}
	draw.p[1]=nil
	draw.p[2]=nil
	draw.pr={}
	draw.pr_g={}
	draw.lg={}
	draw.objects={
		c={}, --cubes
		cd={}, --cube dispensers
		lb={}, --light bridges
		b={}, --buttons
		t={}, --turrets
		fb={}, --floor button
		l={}, --lifts
		d={} --displays
	}

	for z=0,world_size[1]-1 do for y=0,world_size[2]-1 do for x=0,world_size[3]-1 do
		table.insert(draw.world.v,{x*96,y*128,z*96,false}) --this boolead is resposible for whether the point needs to be updated or not
	end end end

	for i=1,3 do
		draw.map[i] = {}
		for x=0,world_size[1]-1 do
			draw.map[i][x] = {}
			for y=0,world_size[2]-1 do
				draw.map[i][x][y] = {}
				for z=0,world_size[3]-1 do
					draw.map[i][x][y][z]={0,0}
				end
			end
		end
	end

	--foolproof
	if maps[set_id]==nil then
		error("Unknown ID set of levels: "..set_id)
	elseif maps[set_id][world_id]==nil then
		error("Unknown ID of the world: "..set_id.." "..world_id)
	end
	----
	for i=1,#maps[set_id][world_id].w do
		addwall(maps[set_id][world_id].w[i][1],maps[set_id][world_id].w[i][2],maps[set_id][world_id].w[i][3],maps[set_id][world_id].w[i][4],maps[set_id][world_id].w[i][5],maps[set_id][world_id].w[i][6])
	end
	for i=1,#maps[set_id][world_id].o do
		addobj(maps[set_id][world_id].o[i][1],maps[set_id][world_id].o[i][2],maps[set_id][world_id].o[i][3],maps[set_id][world_id].o[i][4],maps[set_id][world_id].o[i][5])
	end
	for i=1,#maps[set_id][world_id].lg do
		draw.lg[i] = maps[set_id][world_id].lg[i]
	end

	for i=1,#maps[set_id][world_id].p do
		draw.p[i] = maps[set_id][world_id].p[i]
	end
	--lift
	for i=1,2 do
		if maps[set_id][world_id].lift[i] then
			local x0, y0, z0, angle=maps[set_id][world_id].lift[i][1], maps[set_id][world_id].lift[i][2], maps[set_id][world_id].lift[i][3], maps[set_id][world_id].lift[i][4]
			if angle>4 or angle<0 then error() end
			addobj(x0*96,y0*128,z0*96,angle+17)
		end
	end
	----
	update_world()
end

local function load_world_from_cart()
	--init
	draw.map={}
	draw.world={v={},f={},sp={}}
	draw.p[1]=nil
	draw.p[2]=nil
	draw.pr={}
	draw.pr_g={}
	draw.lg={}
	draw.objects={
		c={}, --cubes
		cd={}, --cube dispensers
		lb={}, --light bridges
		b={}, --buttons
		t={}, --turrets
		fb={}, --floor button
		l={}, --lifts
		d={} --displays
	}

	for z=0,world_size[1]-1 do for y=0,world_size[2]-1 do for x=0,world_size[3]-1 do
		table.insert(draw.world.v,{x*96,y*128,z*96,false}) --this boolead is resposible for whether the point needs to be updated or not
	end end end

	for i=1,3 do
		draw.map[i] = {}
		for x=0,world_size[1]-1 do
			draw.map[i][x] = {}
			for y=0,world_size[2]-1 do
				draw.map[i][x][y] = {}
				for z=0,world_size[3]-1 do
					draw.map[i][x][y][z]={0,0}
				end
			end
		end
	end

	
	--walls
	local adr = 0
	while true do
		local bytes = (peek(0x08000 + adr * 3)<<16) + (peek(0x08000 + adr * 3 + 1)<<8) + peek(0x08000 + adr * 3 + 2)

		if bytes == 0 or adr>5440 then break end
		local type  = bytes % (1<<6)   bytes = bytes >> 6
		local face  = bytes % (1<<2)   bytes = bytes >> 2
		local angle = bytes % (1<<2)   bytes = bytes >> 2
		local z = bytes % (1<<4)   bytes = bytes >> 4
		local y = bytes % (1<<4)   bytes = bytes >> 4
		local x = bytes % (1<<4)   bytes = bytes >> 4

		adr = adr + 1

		addwall(x, y, z, angle, face, type)
	end
	
	local walls = adr
	--objects
	adr = 0
	while true do
		local bytes = 0
		for i = 0, 5 do
			bytes = (bytes<<8) + peek(0x08000 + 3 + walls * 3 + adr * 6 + i)
		end

		if bytes == 0 or adr > 2968 then break end

		adr = adr + 1

		bytes = bytes >> 4
		local t1   = bytes % (1<<5) bytes = bytes >> 5
		local type = bytes % (1<<5) bytes = bytes >> 5
		local z = bytes % (1<<12) - 1520 bytes = bytes >> 12
		local y = bytes % (1<<10) - 116  bytes = bytes >> 10
		local x = bytes % (1<<12) - 1520 bytes = bytes >> 12

		addobj(x, y, z, type, t1)

	end
	----
	update_world()
end
--palette
local pal="0000001c181c3838385d5d5d7d7d7dbababad6d6d6fffffff21018ff55553499ba65eef6b2f6faff8d18ffbe3c283040"

function savepal()
	local pal_1={}
	for i=0,48 do
		local val=peek(0x3FC0+i)
		pal_1[i]=val
	end
	return pal_1
end

function loadpal(pal_1)
	for i=0,48 do
		poke(0x3FC0+i,pal_1[i])
	end
end

function respal()
	for i=1,#pal,2 do
		poke(0x3FC0+i//6*3+i//2%3,tonumber(pal:sub(i,i+1),16))
	end
end

function updpal(r,g,b)
	for i=0,47,3 do
		poke(0x03FC0+i,peek(0x03FC0+i)*r) --RLUE
		poke(0x03FC1+i,peek(0x03FC1+i)*g) --BREEN
		poke(0x03FC2+i,peek(0x03FC2+i)*b) --GED
	end
end

function darkpal(c)
	for i=0,47 do --RGB
		poke(0x03FC0+i,peek(0x03FC0+i)*c)
	end
end

--init
local state
local tm1,tm2 = 0,0
local pause={t=0} --pause
local start_scr={t=1,time={1,2,0,0},i=0,t2=0,sl=50,q=1,y=0,n=0} --start screen
local achievement={t=0,y=0,t2=0} --achievement (easter egg)
local darkening=0 --darkening
local logo={t=0,p={}} --logo
local main_screen={t=0,b={}} --main screen | Table with current buttons
local setting_hint_i=-1 --settings hint

--buttons
local menu_options --It must be separate, otherwise local variables inside this table may not see each other

menu_options = {
	ms = { --main screen
		{draw = true , y = 65, t=1, text = "Continue", func = function() vbank(0)cls(0)vbank(1)cls(0) state="load lvl" save.lvl2=1 end},
		{draw = true , y = 75, t=1, text = "New game", func = function() if save.i then state="load lvl" save.lvl2=1 music() else state="main|newgame" main_screen.b = menu_options.mn sfx_(16) end end},
		{draw = true , y = 95, t=1, text = "Settings", func = function() state="main|settings" sfx_(16) main_screen.b = menu_options.s end},
		{draw = true , y =105, t=1, text = "Authors" , func = function() state="main|authors" main_screen.b = menu_options.ma sfx_(16) end},
		{draw = true , y =125, t=1, text = "Exit"    , func = function() exit() end},
	},
	mn = { --main | newgame
		{draw = true, y = 85, t=1, text = "Accept", func = function() state="load lvl" save.lvl=0 save.cur_t=0 pmem(0,0)pmem(2,0)pmem(3,0)pmem(4,0) end},
		{draw = true, y =105, t=1, text = "Cancel", func = function() sfx_(17) state="main" main_screen.b = menu_options.ms end},
	},
	ma = { --main|authors
		{draw = true, y=125, t=1, text = "Back", func = function() sfx_(17) state="main" main_screen.b = menu_options.ms end}
	},
	s = { --settings
		{draw = true, y = 25 , t=1, text="", func = function() sfx_(18) if state=="main|settings" then music(2)else music(3,7,0,true,true,160)end st.music=not st.music end},
		{draw = true, y = 35 , t=1, text="", func = function() sfx_(18) st.sfx   =not st.sfx    end},
		{draw = true, y = 45 , t=1, text="", func = function() sfx_(18) st.pcm   =not st.pcm    end},
		{draw = true, y = 55 , t=1, text="", func = function() sfx_(18) st.r_p   =not st.r_p    end},
		{draw = true, y = 65 , t=1, text="", func = function() sfx_(18) st.h_q_p =not st.h_q_p  end},
		{draw = true, y = 75 , t=1, text="", func = function() sfx_(18) st.r_both=not st.r_both end},
		{draw = true, y = 85 , t=1, text="", func = function() sfx_(18) st.p     =not st.p      end},
		{draw = true, y = 95 , t=1, text="", func = function() sfx_(18) st.d_t   =not st.d_t    end},
		{draw = true, y = 105, t=1, text="", func = function() sfx_(18) st.dt_c  =not st.dt_c   end},

		{draw = true, y = 115, t=1, text="", func = function() sfx_(18) end},
		{draw = true, y = 125, t=1, text="", func = function() sfx_(18) end},
		{draw = true, y = 135, t=1, text="", func = function() sfx_(18) end},

		{draw = true, y = 115, t=1, text="", func = function() sfx_(16) music(3,7,0,true,true,160)state="calibration" end},
		{draw = true, y = 125, t=1, text="", func = function() sfx_(17) if state=="main|settings" then state="main" main_screen.b = menu_options.ms else state="pause" main_screen.b = menu_options.p end end},
	},
	p = { --pause
		{draw = true, y = 65, t=1, text = "Resume"       , func = function() state="game" sfx_(17) poke(0x7FC3F,1,1) if s.n[1]~=255 then music(s.n[1],s.n[2],s.n[3]) elseif st.music then music(maps[save.lvl2][save.lvl].music) end lctp=ctp or 0 ctp=0 st_t=tstamp() end},
		{draw = true, y = 75, t=1, text = "Restart level", func = function() state="load lvl" if s.n[1]~=255 then music(s.n[1],s.n[2],s.n[3]) elseif st.music then music(maps[save.lvl2][save.lvl].music) end plr.x=0 plr.y=64 plr.z=0 plr.tx=0 plr.ty=0 for x=0,19 do for y=0,28 do setpix(93-x,y+99,5) end end end},
		{draw = true, y = 95, t=1, text = "Settings"     , func = function() state="pause|settings" sfx_(16) main_screen.b = menu_options.s end},
		{draw = true, y =125, t=1, text = "Exit"         , func = function() state="pause|accept" sfx_(16) main_screen.b = menu_options.pa end},
	},
	pa = { --pause|accept
		{draw = true, y = 85, t=1, text = "Accept", func = function() state="main" main_screen.b=menu_options.ms poke(0x7FC3F,1,0) music(2) load_world(0,1) plr.x=0 plr.y=64 plr.z=0 plr.tx=0 plr.ty=0 end},
		{draw = true, y =105, t=1, text = "Back"  , func = function() state="pause" sfx_(17) main_screen.b = menu_options.p end},
	},
}

local function upd_buttons()
	setting_hint_i=-1
	for i = 1, #main_screen.b do
		local b = main_screen.b[i]
		if b.draw then
			print(b.text, min(min(main_screen.t*2-20,4)+(1-b.t)*20), b.y, 7)

			if my > b.y - 3 and my < b.y + 8 then
				if not (state=="main|settings" or state=="pause|settings") or (i<13 and my<110 and my>19) or i>=13 then
					if (state=="main|settings" or state=="pause|settings") then setting_hint_i = i end
					b.t = max(b.t-0.05,0.5)
					cid = 1
					if clp1 then b.func() break end
				else
					b.t = min(1,b.t+0.05)
				end
			else
				b.t = min(1,b.t+0.05)
			end
		end
	end
end

local function upd_buttons_bdr(bdr_y,orig_pal)
	if bdr_y == 0 then
		orig_pal()
	end
	for i = 1, #main_screen.b + 1 do
		local b
		local lb
		if i<=#main_screen.b then b = main_screen.b[i] end
		if i>1 then lb = main_screen.b[i-1] end

		if lb and lb.draw and lb.y == bdr_y - 8 then
			orig_pal()
		end
		
		if b and b.draw and b.y == bdr_y + 2 then
			darkpal(b.t)
		end

	end
end

local init_setting={t=0,t1=0,t2=0} --init setting
local snake={s={{0,0},{0,1},{0,2}},u=1,a={5,5},t=0,state="-",b=1} --snake
local snake_keys={3,1,11,5}

--[[each line is 5 text variables.
if there is "1" after the text it means this text in the small font]]
local surv_t={{"Enter the current time."},{"Is this the exact time?"},{"How accurate is this time?"},{"Pull the slider until the given number becomes prime",1},{"Pull the slider until the number becomes more than 50",1},
{"How many numbers from 0 to 100 have 3 divisors exist?",1},{"Pull the slider until the number becomes completely by chance",1},{"Do you know the authors of this game?"},{"Do the authors of this game know you?"},{""},
{"Have you just answered   yes   to the last empty question?",1},{"Why did you answer   yes\n\n to the last question?"},{"Do you consider yourself happy?"},{"Have you ever thought that you have mental disorders?",1},{"Do you think you have a lot of friends?"},
{"How many friends do you have?"},{"Do you really like this game?"},{"Have you answered the truth?"},{"Do you want to start the game?"},{"Do you like this survey?"},
{"Are you positive to the chairs?"},{"Is there a Chinese layout on your keyboard?"},{"Why?"},{"_"},{""},
{""},{"Have you ever found HanamileH\n\n   rather cute and pretty?"},{" Have you ever had dreams with\n\nthe participation of HanamileH?"},{"Would you like to ever meet HanamileH live?"},{"Why are you still answering this survey?"},
{"Do you want me to help you?"},{"Press any button to start the game"},{""},{""},{""}}

--lets define global table with lengths of text
local len_t={}
for i in ipairs(surv_t) do
	local size=1
	local small=surv_t[i][2]~=nil

	--to get the text lenght we can't just use string.len, we need it in pixels and output of print() function will help us
	len_t[i]=print(surv_t[i][1],0,-100,0,false,size,small)
end

local authors_text = {
	"3D engine: Unitic v 1.3 (MIT license)",
	"",
	"Coders:",
	"HanamileH, soxfox42",
	"",
	"Level designers:",
	"HamamileH, BuoYancy_dabl",
	"",
	"Beta testers:",
	"BuoYancy_dabl, tan4iq",
	"",
	"Music composers:",
	"HanamileH",
	"",
	"Lorem ipsum",
	"Dolor sit amet"
}
local at = { --authors text data
	scroll=30,
	vy    =40, --Y velocity
}

if load_map_from_cart then
	state="load from cart"
	if map_bank_id == 0 then error("Do not use Bank 0 to import maps!") end
	if map_bank_id<0 or map_bank_id>7 then error("Out of range") end

	sync(4, map_bank_id,false)
else
	state="logo"
	sync(25 ,1,false)
end
music(0)

compile_code()
collectgarbage("collect")

function TIC()
	if st.dt_c then
		dt=1
	else
		dt = min(max((frame.mean)/ 33.333, 1), 2.5)
	end

	if keyp(38) and replay.mode == "rec" then -- "="
		save_replay()
	end

	if replay.mode == "rec" then
		saveinput()
	elseif replay.mode == "play" then
		nextinput()
	end

	--fps counter
	frame_t = time()
	t = t + 1
	--mouse
	mx, my, cl1, _, cl2, _, whl = mouse()
	cid=0 --cursor id

	if cl1 then tm1 = tm1 + 1 else tm1 = 0 end
	if cl2 then tm2 = tm2 + 1 else tm2 = 0 end

	clp1 = tm1 == 1
	clp2 = tm2 == 1
	--------------------------
	-- logo ------------------
	--------------------------
	if state=="logo" then
		logo.t=logo.t+1
		--css content
		if css_content_path == nil then
			trace("Something creates script errors!",3)
		end
		--GUI
		vbank(0)
		cls(1)
		vbank(1)
		cls(0)
		--particles
		if t%2==0 then
			logo.p[#logo.p+1]={x=R(-120,239), y=135, v=R()+0.5} --X, Y, velocity
		end

		for i = 1,#logo.p do
			logo.p[i].x = logo.p[i].x + logo.p[i].v
			logo.p[i].y = logo.p[i].y - logo.p[i].v*0.9

			pix(logo.p[i].x,logo.p[i].y, 7*logo.p[i].y/135 )
		end
		
		spr(112,88,24,0,1,0,0,8,9)
		print("Powered by Unitic 1.3",66,113,7)
		--pal
		for i=0,1 do
			vbank(i)
			respal()
			if logo.t<60 then darkpal(min(logo.t/40,1))
			elseif logo.t>100 then darkpal((140-logo.t)/40)
			else respal()
			end
		end
		vbank(0)
		darkpal(0.4)
		if logo.t>=140 or (keyp() and logo.t>10) then
			sync(25,0,false)
			vbank(0) respal()
			vbank(1) respal() cls()
			load_world(0,1)
			if save.st&2^31==0 then state="init setting" else
				state="main"
				music(2)
				--buttons
				main_screen.b = menu_options.ms
			end
		end
	end
	--------------------------
	-- Initial setting -------
	--------------------------
	if state=="init setting" then respal()
		vbank(0)
		init_setting.t=init_setting.t+1
		if init_setting.t==2 then
			init_setting.t1=time()
			for i=1,300 do
				cam.x=R(-999,999)
				cam.y=R(-999,999)
				cam.z=R(-999,999)
				cam.tx=R(-99,99)
				cam.ty=R(-99,99)
				unitic.update()
				unitic.draw()
				if time()-init_setting.t1>4000 then init_setting.t1=init_setting.t1 - 5000 break end
			end
			init_setting.t1=time()-init_setting.t1
		end
		if init_setting.t<3 then
			cls(0)
			print("please wait...",1,1,2)
			logo.p={}
			music(-1)
		else
			vbank(0)
			respal()
			darkpal(0.6)
			cls(1)
			vbank(1)
			cls(0)
			
			--particles
			if t%2==0 then
				logo.p[#logo.p+1]={x=R(-120,239), y=135, v=R()+0.5} --X, Y, velocity
				if logo.p[1].y<0 then table.remove(logo.p,1) end
			end

			for i = 1,#logo.p do
				logo.p[i].x = logo.p[i].x + logo.p[i].v
				logo.p[i].y = logo.p[i].y - logo.p[i].v*0.9

				pix(logo.p[i].x,logo.p[i].y, max(7*logo.p[i].y/135, 1) )
			end
			--
			print("The following recommended",47,5,7)
			print("parameters were selected:",47,15,7)
			local pt=F(1/init_setting.t1*200000) --points
			local text_size=print("Your result: "..pt.." points.",240,0)
			-- print("Your result: "..pt.." points.",120-text_size//2,105,2)
			
			rect(0,28,240,21,1)
			if pt>250 then
				for i=0,1 do
					print("Rendering of both portals is chosen",23,36-i,i*7)
				end
				st.d_r=true
				st.r_both=true
			elseif pt>165 then
				for i=0,1 do
					print("Rendering of one portal is chosen",30,36-i,i*7)
				end
				st.d_r=true
				st.r_both=false
			elseif pt>45 then
				for i=0,1 do
					print("The rendering of portals is disabled",23,36-i,i*7)
				end
				st.d_r=false
				st.r_both=false
			else
				for i=0,1 do
					print("You have a potato pc",63,36-i,i*7)
				end
				st.d_r=false
				st.r_both=false
			end
			
			print("You can always configure this",41,65,4)
			print("later in the settings menu",49,75,4)

			rect(94,122,41,9,2)
			for i=0,1 do
				print("Accept",97,124-i,i*7)
			end
			vbank(0)
			if mx>93 and my>121 and mx<135 and my<131 then cid=1 if clp1 then music(2) state="main" main_screen.b = menu_options.ms clp1=false save_settings() end end
		end
	end
	--------------------------
	-- main screen -----------
	--------------------------
	if state=="main" or state=="main|newgame" or state=="main|authors" or state=="main|settings" then
		main_screen.t=main_screen.t+1
		--camera
		vbank(0)
		cam.x=40
		cam.y=96
		cam.z=525
		cam.tx=math.sin(main_screen.t/50)*0.05+0.2
		cam.ty=math.sin(main_screen.t/100)*0.1-math.pi/4
		unitic.update()
		unitic.draw()
		--portal drawing
		do
			local v_id={{},{}}
			local p2d={{},{}}
			local tri_face={}

			for i = 1,2 do
				if draw.p[i] then
					v_id[i][1] = draw.p[i][1] + draw.p[i][2]*world_size[3] + draw.p[i][3]*world_size[4] + 1
					v_id[i][2] = draw.p[i][1] + draw.p[i][2]*world_size[3] + draw.p[i][3]*world_size[4] + world_size[3]+1

					if draw.p[i][4]==1 then
						v_id[i][3] = draw.p[i][1] + draw.p[i][2]*world_size[3] + draw.p[i][3]*world_size[4] + world_size[4]+1
						v_id[i][4] = draw.p[i][1] + draw.p[i][2]*world_size[3] + draw.p[i][3]*world_size[4] + world_size[4]+world_size[3]+1
					else
						v_id[i][3] = draw.p[i][1] + draw.p[i][2]*world_size[3] + draw.p[i][3]*world_size[4] + 2
						v_id[i][4] = draw.p[i][1] + draw.p[i][2]*world_size[3] + draw.p[i][3]*world_size[4] + world_size[3]+2
					end

					p2d[i] = {x={},y={},z={},z2={}}

					for i2 = 1,4 do
						p2d[i].x [i2]=unitic.poly.v[v_id[i][i2]][1]
						p2d[i].y [i2]=unitic.poly.v[v_id[i][i2]][2]
						p2d[i].z [i2]=unitic.poly.v[v_id[i][i2]][3]
						p2d[i].z2[i2]=unitic.poly.v[v_id[i][i2]][4]
					end
					
					tri_face[i] = (p2d[i].x[2] - p2d[i].x[1]) * (p2d[i].y[3] - p2d[i].y[1]) - (p2d[i].x[3] - p2d[i].x[1]) * (p2d[i].y[2] - p2d[i].y[1]) < 0
				end
			end
			for i=1,2 do
				if draw.p[i] and (tri_face[i] == (draw.p[i][5]==1)) and not (p2d[i].z2[1] and p2d[i].z2[2] and p2d[i].z2[3] and p2d[i].z2[4]) then
					--portal border
					if i==1 then
						ttri(p2d[i].x[1],p2d[i].y[1],p2d[i].x[2],p2d[i].y[2],p2d[i].x[3],p2d[i].y[3],120,32,120,0,96,32,0,15,p2d[i].z[1]*0.99,p2d[i].z[2]*0.99,p2d[i].z[3]*0.99)
						ttri(p2d[i].x[4],p2d[i].y[4],p2d[i].x[2],p2d[i].y[2],p2d[i].x[3],p2d[i].y[3],96 ,0 ,120,0,96,32,0,15,p2d[i].z[4]*0.99,p2d[i].z[2]*0.99,p2d[i].z[3]*0.99)
						ttri(p2d[i].x[1],p2d[i].y[1],p2d[i].x[2],p2d[i].y[2],p2d[i].x[3],p2d[i].y[3],24,232,24,200,0,232,0,15,p2d[i].z[1]*0.98,p2d[i].z[2]*0.98,p2d[i].z[3]*0.98) --blue
						ttri(p2d[i].x[4],p2d[i].y[4],p2d[i].x[2],p2d[i].y[2],p2d[i].x[3],p2d[i].y[3],0 ,200,24,200,0,232,0,15,p2d[i].z[4]*0.98,p2d[i].z[2]*0.98,p2d[i].z[3]*0.98)
					else
						ttri(p2d[i].x[1],p2d[i].y[1],p2d[i].x[2],p2d[i].y[2],p2d[i].x[3],p2d[i].y[3],24,64,24,32,0,64,0,15,p2d[i].z[1]*0.99,p2d[i].z[2]*0.99,p2d[i].z[3]*0.99)
						ttri(p2d[i].x[4],p2d[i].y[4],p2d[i].x[2],p2d[i].y[2],p2d[i].x[3],p2d[i].y[3],0 ,32,24,32,0,64,0,15,p2d[i].z[4]*0.99,p2d[i].z[2]*0.99,p2d[i].z[3]*0.99)
						ttri(p2d[i].x[1],p2d[i].y[1],p2d[i].x[2],p2d[i].y[2],p2d[i].x[3],p2d[i].y[3],48,232,48,200,24,232,0,15,p2d[i].z[1]*0.98,p2d[i].z[2]*0.98,p2d[i].z[3]*0.98) --orange
						ttri(p2d[i].x[4],p2d[i].y[4],p2d[i].x[2],p2d[i].y[2],p2d[i].x[3],p2d[i].y[3],24,200,48,200,24,232,0,15,p2d[i].z[4]*0.98,p2d[i].z[2]*0.98,p2d[i].z[3]*0.98)
					end
				end
			end

		end
		--GUI
		vbank(1) cls(0)
		if state~="main|settings" and state~="main|authors" then spr(256,min(-104+main_screen.t*6,8),4,0,1,0,0,13,3) upd_buttons() end

		if state=="main" then
			menu_options.ms[1].draw = not save.i
			--nothing
		elseif state=="main|newgame" then
			print("Warning",4,35,8)
			print("Your current save",4,45,7)
			print("will be removed.",4,55,7)
			print("Continue?",4,65,7)
		elseif state=="main|authors" then
			upd_buttons()
			
			--scrolling
			if btn(0) or key(54) or key(58) or key(23) then whl = 1 end
			if btn(1) or key(55) or key(59) or key(19) then whl =-1 end
			
			if whl~=0 then at.vy = whl * 3 else at.vy = at.vy * 0.85 end
			
			at.scroll = at.scroll - min(max(at.vy, -3),3)

			local max_y = #authors_text * 10 - 117

			if at.scroll<0     then at.scroll = max(min(at.scroll+1.1 ,0),-10) end
			if at.scroll>max_y then at.scroll = min(max(at.scroll-1.1 ,max_y),max_y+10) end
			--text
			clip(0,4,240,116)
			for i = 1, #authors_text do
				print(authors_text[i],4, -5 + i * 10 - F(at.scroll),7)
			end
			clip()
			--slider
			rect(239, 5, 1, 114, 1)
			clip(239, 5, 1, 114)
			rect(239, 5 + max(at.scroll/max_y*94, -15) , 1, 20, 7)
			clip()
		end
	end
	--------------------------
	-- calibration -----------
	--------------------------
	if state=="calibration" then vbank(1) cls() respal() vbank(0) respal()
		if start_scr.t2>0 then start_scr.t2=start_scr.t2-1 end
		cls(1)
		--
		if start_scr.t==1 then
			print(start_scr.time[1]..start_scr.time[2]..":"..start_scr.time[3]..start_scr.time[4],80,50,6,true,2)
			if start_scr.i<2 then
			line(79+start_scr.i*12,61,91+start_scr.i*12,61,7)
			else
			line(79+start_scr.i*12+12,61,91+start_scr.i*12+12,61,7)
			end

			if keyp(1) or btnp(2) then start_scr.i=start_scr.i-1 end
			if keyp(4) or btnp(3) then start_scr.i=start_scr.i+1 end
			start_scr.i=start_scr.i%4

			if keyp(23) or btnp(0) then start_scr.time[start_scr.i+1]=start_scr.time[start_scr.i+1]+1 end
			if keyp(19) or btnp(1) then start_scr.time[start_scr.i+1]=start_scr.time[start_scr.i+1]-1 end

			start_scr.time[1]=start_scr.time[1]%3 start_scr.time[1]=start_scr.time[1]*10+start_scr.time[2]
			start_scr.time[1]=start_scr.time[1]%24 start_scr.time[2]=start_scr.time[1]%10 start_scr.time[1]=start_scr.time[1]//10
			start_scr.time[3]=start_scr.time[3]%6 start_scr.time[4]=start_scr.time[4]%10
		end
		--confirm button
		if start_scr.t2==0 and start_scr.t~=2 and (start_scr.t<8  or start_scr.t==16) then
			rect(94,122,40,8,2)
			print("Confirm",95,123,7)
			if mx>93 and my>121 and mx<134 and my<131 then cid=1 if clp1 then sfx_(16) start_scr.t=start_scr.t+1 start_scr.t2=60 start_scr.sl=R(0,99) end end
		end
		--Yes/no button
		if start_scr.t2==0 and (start_scr.t==2 or start_scr.t>7) and start_scr.t~=16 and start_scr.t~=32 then
			rect(67,122,18,8,2)
			rect(143,122,13,8,2)
			print("Yes",68,123,7)
			print("No",144,123,7)
			if mx>66  and my>121 and mx<85  and my<131 then cid=1 if clp1 then sfx_(16) start_scr.y=start_scr.y+1 start_scr.q=1 start_scr.t=start_scr.t+1 start_scr.t2=60 start_scr.sl=R(0,99) end end
			if mx>143 and my>121 and mx<156 and my<131 then cid=1 if clp1 then sfx_(17) start_scr.n=start_scr.n+1 start_scr.q=2 start_scr.t=start_scr.t+1 start_scr.t2=60 start_scr.sl=R(0,99) end end
		end
		--slider
		if (start_scr.t>2 and start_scr.t<8) or start_scr.t==16 then
			rect(20,88,180,2,2)
			rect(20+start_scr.sl*1.8,85,2,8,6)
			if mx>19 and my>85 and mx<200 and my<93 then cid=1 if clp1 then sfx_(18) end if cl1 then start_scr.sl=(mx-20)/1.8 end end
		end
		--Number on the slider
		if (start_scr.t>3 and start_scr.t<8) or start_scr.t==16 then
			print(F(start_scr.sl+0.5),100,68,7,false,2)
		end

		------------
		if start_scr.t==2 then
			print(start_scr.time[1]..start_scr.time[2]..":"..start_scr.time[3]..start_scr.time[4],98,65,6,true,1)
		end

		if start_scr.t==3 then
			print(start_scr.time[1]..start_scr.time[2]..":"..start_scr.time[3]..start_scr.time[4],98,65,6,true,1)
			print("not accurate",12,76,7)
			print("accurate",160,76,7)
			local text = F(start_scr.sl/99*100+0.5) .."%"
			local text_size=print(text,240,0)
			print(text,120-text_size//2,76,7)
		end

		local yn='"no"'
		if start_scr.t>=11 and start_scr.t<=12 then
 			if start_scr.q==1 then
				yn='"yes"'
			end
			surv_t[11][1]='Have you just answered '..yn..' to the last empty question?'
			surv_t[12][1]='Why did you answer '..yn..'\n\n  to the last question?'
		end

		--[[We're no strangers to love
			⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
			⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⠤⠞⣋⠉⣿⣯⣿⢿⣖⠦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
			⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠿⣶⣾⣿⣾⣿⣹⣿⣶⣿⣿⣾⢧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
			⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣧⣰⣿⣿⣿⣿⣿⣿⡿⠿⠿⣿⣿⡟⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀
			⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠟⣠⣿⠟⠋⠉⠀⠈⠀⠀⠀⠀⠘⣿⣧⢣⠀⠀⠀⠀⠀⠀⠀⠀⠀
			⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⠀⠀⠀⢀⡀⠀⠀⣀⡀⠀⣾⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀
			⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⡏⠀⢻⣯⡽⢿⡄⠘⢿⡯⠵⢻⣟⡋⠀⠀⠀⠀⠀⠀⠀⠀⠀
			⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⠼⣧⠀⠉⠀⠀⠀⠁⠀⠀⠀⠀⢨⣿⢳⠀⠀⠀⠀⠀⠀⠀⠀⠀
			⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢌⢧⣬⠇⠀⠀⠀⠸⠛⠂⠘⠆⢎⡴⣻⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀
			⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠉⣿⡆⠀⠀⢾⣯⢿⣗⣀⣼⣹⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
			⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠸⡟⠀⠀⠀⠟⢲⣶⠶⣿⠍⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
			⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⠰⡇⠀⠀⠀⠴⢺⣿⣤⢿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
			⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣾⣿⣿⣿⡆⢧⡀⠀⢀⣀⣼⣿⣟⡇⢿⣷⣶⣤⣄⣀⠀⠀⠀⠀⠀⠀
			⠀⠀⠀⠀⠀⣀⣴⣶⣿⣿⣿⣿⣿⣿⣿⣷⠀⠳⣄⠀⠉⢿⣿⣿⠇⠸⣿⣿⣿⣿⣿⣿⣷⣦⣄⡀⠀
			⠀⢀⣤⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡷⠆⠙⢦⣀⣨⠗⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀
			⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣀⣠⣤⣀⣉⠀⠀⡀⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡆
			⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⢁⣼⠿⢿⣿⣿⣿⠲⠶⠶⠯⢤⣠⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇
			⠀⡿⣿⣿⣿⣿⣿⣿⣿⡟⣰⢹⣁⡀⠈⠙⣻⣿⣍⣉⣙⣒⣻⠓⢾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏
			⠀⣷⣾⣿⣿⣿⣿⣿⣿⠁⡇⠀⠉⡀⠙⢿⣿⣿⡧⠤⠤⠭⠭⣌⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇
			⢀⣿⣿⣿⣿⣿⣿⣿⣿⡟⠁⠀⠀⣇⣤⣾⣿⣿⣗⠒⠒⠲⣶⠦⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇
		]]--You know the rules and so do I
		if start_scr.t==32 then

			clip(1,10,238,125)
			for x=0,240,23 do for y=0,135,13 do
				local dx,dy=x-mx+10,y-my+5
				local d=(dx^2+dy^2)^0.5

				local px,py=mx+dx*(20/d+1),my+dy*(20/d+1)

				rect(px-1,py-1,19,9,4)
				print("any",px,py+1,0)
				print("any",px,py,7)
			end end
			clip()
			rectb(1,10,238,125,2)

			if mx>54 and my>2 and mx<75 and my<10 then cid=1 if clp1 then start_scr.t=33 start_scr.t2=60 end end
		end
		if start_scr.t==33 then
			print("Your statistics:",73,3,7,false,1,false)
			print("Press the buttons \"yes\": "..start_scr.y.." times",31,34,7)
			print("Press the buttons \"no\" : "..start_scr.n.." times",31,44,7)
			print("Are you satisfied with your results?",20,97,7)
		end

		--check if the text supposed to be small font
		small=surv_t[start_scr.t][2]~=nil
		--print all the survey text from the table
		print(surv_t[start_scr.t][1],120-len_t[start_scr.t]/2,3,7,false,1,small)

		if start_scr.t==35 then state="main|settings" music(2) end
	end
	--------------------------
	-- load lvl --------------
	--------------------------
	if state=="load lvl" then
		sync(2,0,false)
		snake={s={{0,0},{0,1},{0,2}},u=1,a={5,5},t=0,state="-",b=1} --snake
		if st_t then save.cur_t=save.cur_t+(tstamp()-st_t) end
		if load_lvl then
			assert(maps[load_lvl[1]], "Level "..load_lvl[1].." "..load_lvl[2].." does not exist")
			assert(maps[load_lvl[1]][load_lvl[2]], "Level "..load_lvl[1].." "..load_lvl[2].." does not exist")

			save.lvl2 = load_lvl[1]
			save.lvl  = load_lvl[2]
		else
			save.lvl2=1
		end
		pmem(4,save.cur_t)

		if save.lvl==0 then save.lvl=1 end
		pmem(0,save.lvl)
		if save.lvl>#maps[save.lvl2] then
			state="darkening"
		else
			load_world(save.lvl2,save.lvl)
			plr.hp=100
			plr.l_hp=100
			if not maps[save.lvl2][save.lvl].lift[1] then
				plr.x=32
				plr.y=64
				plr.z=32
				plr.tx=0
				plr.ty=0
			else
				local x0=maps[save.lvl2][save.lvl].lift[1][1]*96
				local y0=maps[save.lvl2][save.lvl].lift[1][2]*128
				local z0=maps[save.lvl2][save.lvl].lift[1][3]*96
				
				--We shift the player regarding the rotation of the elevator
				local rot1,rot2
				rot2=rot1 or 0

				if maps[save.lvl2][save.lvl].lift[1][4]==0 then rot1=3 end
				if maps[save.lvl2][save.lvl].lift[1][4]==1 then rot1=1 end
				if maps[save.lvl2][save.lvl].lift[1][4]==2 then rot1=2 end
				if maps[save.lvl2][save.lvl].lift[1][4]==3 then rot1=0 end

				local rot=(2 + rot1 - rot2)%4

				if rot==0 then --do something (plz)
				elseif rot==1 then plr.x,plr.z=plr.z,-plr.x
				elseif rot==2 then plr.x,plr.z=-plr.x,-plr.z
				elseif rot==3 then plr.x,plr.z=-plr.z,plr.x
				end
				
				plr.x=plr.x+x0
				plr.y=plr.y+y0
				plr.z=plr.z+z0
				--
				if     maps[save.lvl2][save.lvl].lift[1][4]==0 then plr.x=plr.x-144 plr.ty=plr.ty-pi2
				elseif maps[save.lvl2][save.lvl].lift[1][4]==1 then plr.x=plr.x+144 plr.ty=plr.ty+pi2
				elseif maps[save.lvl2][save.lvl].lift[1][4]==2 then plr.z=plr.z+144 plr.ty=plr.ty
				elseif maps[save.lvl2][save.lvl].lift[1][4]==3 then plr.z=plr.z-144 plr.ty=plr.ty+math.pi end

			end

			if save.lvl2==1 and save.lvl==1 then music(0)
			elseif peek(0x13FFC)~=3 then music(3)
			end
			--Updating the texture of the level boards
			local n1=save.lvl//10
			local n2=save.lvl%10
			for x=0,6 do
				for y=0,10 do
					setpix(100+x,35+y,lvl_board[n1][x][y])
					setpix(109+x,35+y,lvl_board[n2][x][y])
				end
			end
			--
			mx,my=0,0
			poke(0x7FC3F,1,1)
			plr.death=false
			plr.pg_lvl=maps[save.lvl2][save.lvl].pg_lvl
			plr.holding=false
			achievement.t2=0
			maps[save.lvl2][save.lvl].init()
			state="game"
			lvl_t=0
			st_t=tstamp() --The start time of this level
		end
	end
	--------------------------
	-- load lvl from cart ----
	--------------------------
	if state=="load from cart" then
		cls(0)
		if t>2 then
			load_world_from_cart()
			plr.x = (world_size[1] + 48) / 2
			plr.y = 64
			plr.z = (world_size[3] + 48) / 2
			plr.noclip = true
			mx,my = 0,0
			poke(0x7FC3F,1,1)
			plr.death = false
			plr.pg_lvl = 2
			plr.holding = false
			achievement.t2 = 0
			lvl_text_2.draw = false
			state = "game"
			lvl_t = 0
		end
	end
	--------------------------
	-- pause -----------------
	--------------------------
	if state=="pause" or state=="pause|settings" or state=="pause|accept" then
		pause.t=pause.t+1
		--GUI
		vbank(0)
		memcpy(0x0,0x8000,240*136/2)
		vbank(1)
		cls(0)
		--logo
		if state~="pause|settings" then spr(256,min(-104+pause.t*6,8),4,0,1,0,0,13,3) end

		if state=="pause" then
			print("Pause",min(pause.t*2,37),35,7)
			upd_buttons()
		elseif state=="pause|accept" then
			print("Do you really want to leave the game?",4,45,7)
			print("Your current game will not be saved",4,55,7)
			upd_buttons()
		end

		--Resume
		if (keyp(44) and pause.t>1) or (my>52 and my<63 and clp1 and state=="pause") then
			state="game"
			sfx_(17)
			poke(0x7FC3F,1,1)
			if s.n[1]~=255 then
				music(s.n[1],s.n[2],s.n[3])
			elseif st.music then
				music(maps[save.lvl2][save.lvl].music)
			end
			lctp=ctp or 0
			ctp=0
			st_t=tstamp()
		 end
	end
	--------------------------
	-- game ------------------
	--------------------------
	if state=="game" then
		if lvl_t~=120 then lvl_t=lvl_t+1 end
		frame_ms[1]=time()
		plr.bf_t=max(plr.bf_t-1,0)
		plr.hp_t_2=max(plr.hp_t_2-1,0)
	 --palette
		do
			local r = 1
			local g = 1
			local b = 1

			if lvl_t<50 and save.lvl == 1 and save.lvl2 ==1 then
				local val = lvl_t/50
				r = r * val
				g = g * val
				b = b * val
			end

			if plr.hp<40 then
				local val = max(abs(math.sin(time()/200))*0.7+0.3,plr.hp/50)
				r = r
				g = g * val
				b = b * val
			end
			--
			if plr.bf_t>0 then
				r = r * (10-plr.bf_t)/10*0.7+0.3
				g = g
				b = b
			end
			--
			if plr.hp_t_2>0 and not plr.godmode then
				local val = 0.2*(3-plr.hp_t_2*0.2)
				r = r
				g = g * val
				b = b * val
			end
			
			r = max(min(r, 1 ), 0)
			g = max(min(g, 1 ), 0)
			b = max(min(b, 1 ), 0)
			
			for i = 0,1 do
				vbank(i)
				respal()
				updpal(r,g,b)
			end
		end
	 --camera rotation
	 	if pause.t==0 and lvl_t>2 then
			if key(65) then --zoom
				plr.tx = plr.tx + my/(140-st.m_s)/10
				plr.ty = plr.ty + mx/(140-st.m_s)/10
			else
				plr.tx = plr.tx + my/(140-st.m_s)
				plr.ty = plr.ty + mx/(140-st.m_s)
			end
	 	end
		plr.ty = plr.ty%(math.pi*2)
		plr.tx = max(min(plr.tx, pi2), -pi2)
	 --update + collision
		if not plr.death then unitic.player_physics() end
		unitic.portal_collision()
		unitic.cube_update()
		unitic.button_update()
		unitic.turret_update()
		portal_gun()
    --snake
	 	do
			local u=true
			for i=1,65 do
				if keyp(i) then if snake_keys[snake.b]==i and u then snake.b=snake.b+1 else u=false snake.b=1 end end
			end
			if snake.b>#snake_keys then
				--game init
				snake={s={{0,0},{0,1},{0,2}},u=1,a={5,5},t=0,state="game",b=1}
			end
			--
			if snake.state=="game" then
				snake.t=snake.t+1
				--update
				if snake.t%5==0 then
					if snake.s[#snake.s][1]==snake.a[1] and snake.s[#snake.s][2]==snake.a[2] then
						snake.a={R(0,10),R(0,10)}
						sfx_(7)
					else
						table.remove(snake.s,1)
					end
					local x,y=snake.s[#snake.s][1],snake.s[#snake.s][2]
					if     snake.u==0 then y=(y-1)%11
					elseif snake.u==1 then y=(y+1)%11
					elseif snake.u==2 then x=(x-1)%11
					elseif snake.u==3 then x=(x+1)%11 end
					for i=1,#snake.s do
						if snake.s[i][1]==x and snake.s[i][2]==y then snake.state="game over" sfx_(6) snake.t=120 break end
					end
					snake.s[#snake.s+1]={x,y}
				end
				for i=0,3 do if btn(i) then snake.u=i end end
				--display
				for x=33,43 do for y=233,243 do
					setpix(x,y,1) --background
					setpix(x+16,y,1)
				end end
				setpix(snake.a[1]+33,snake.a[2]+233,8) --apple
				setpix(snake.a[1]+49,snake.a[2]+233,8)
				for i=1,#snake.s do --snake
					local x,y=snake.s[i][1],snake.s[i][2]
					setpix(x+33,y+233,7)
					setpix(x+49,y+233,7)
				end
			elseif snake.state=="game over" then
				snake.t=snake.t-1
				for x=33,43 do for y=233,243 do
					local color=(x+y+snake.t//5)%2*6+1
					setpix(x,y,color)
					setpix(x+16,y,color)
				end end
				if snake.t==0 then snake.state="-" sync(2,0,false) end
			end
		end
	 --render
		frame_ms[2]=time()
		unitic.render()
		if plr.pg_lvl>0 and not plr.death then unitic.draw_portalgun() end
	 --achievement
		if achievement.t>0 then
			achievement.t=achievement.t+1
			if achievement.t<128 then
				achievement.y=achievement.y-0.8
			else
				achievement.y=achievement.y+0.8
			end
			achievement.y=max(achievement.y,0)
			if achievement.y>17 then achievement.t=0 end
			--
			vbank(1)
			rect(75 ,120+achievement.y,110,15,2)
			circ(75 ,127+achievement.y,7,2)
			circ(185,127+achievement.y,7,2)
			spr(380+achievement.t//30%2*2,75-5,122+achievement.y,0,1,0,0,2,2)
			for i=0,1 do  --shadows for the text
				print("achievement unlocked!",82,122+achievement.y-i,i*6+1,false,1,true)
				print("150G - Come back to the start",82,129+achievement.y-i,i*5+1,false,1,true)
			end
		end
	 --sounds
		s.t1=max(s.t1-1,0)
		if (key(23) or key(19) or key(1) or key(4)) then p_g.t1=p_g.t1+1*dt  if s.t1==0 then sfx_(1) if key(64) then s.t1=15 else s.t1=20 end end end
		if plr.bf_t==8 then sfx_(3,"B-4",-1,1) end
	 --hp
		if plr.l_hp == plr.hp then plr.hp_t=plr.hp_t+1 else plr.hp_t=0 end
		if plr.hp_t>120 then plr.hp=min(plr.hp+1,100) end
		if plr.y<-400 then plr.hp=max(plr.hp-2,0) end
		plr.l_hp = plr.hp
		if plr.godmode then plr.hp=100 end
	 --Level scripts
		if not load_map_from_cart then maps[save.lvl2][save.lvl].scripts() end
	 --init lift
		if not load_map_from_cart and maps[save.lvl2][save.lvl].lift[1] then
			local x0=maps[save.lvl2][save.lvl].lift[1][1]*96
			local y0=maps[save.lvl2][save.lvl].lift[1][2]*128
			local z0=maps[save.lvl2][save.lvl].lift[1][3]*96
			local x1=plr.x
			local y1=plr.y
			local z1=plr.z
			if lvl_t<41 then
				--Do not let the player out of the elevator
				plr.y=min(max(y1,y0+64),y0+112)
				if     maps[save.lvl2][save.lvl].lift[1][4]==0 then plr.z=min(max(z1,z0-48),z0+48) plr.x=min(max(x1,x0-192),x0-144)
				elseif maps[save.lvl2][save.lvl].lift[1][4]==1 then plr.z=min(max(z1,z0-48),z0+48) plr.x=min(max(x1,x0+144),x0+192)
				elseif maps[save.lvl2][save.lvl].lift[1][4]==2 then plr.x=min(max(x1,x0-48),x0+48) plr.z=min(max(z1,z0+144),z0+192)
				elseif maps[save.lvl2][save.lvl].lift[1][4]==3 then plr.x=min(max(x1,x0-48),x0+48) plr.z=min(max(z1,z0-192),z0-144) end

				--Updating the texture of the elevator door
				local x=(40-lvl_t)//2
				if lvl_t%2==1 then for y=0,28 do
					setpix(93-x,y+99,15)
					if x>0 then setpix(94-x,y+99,4) end
				end end
			end
			--Easter egg
			if maps[save.lvl2][save.lvl].lift[1][4]==0 and coll(x1-16,y1-64,z1-16,x1+16,y1+16,z1+16, x0-192,y0,z0-48 , x0-144,y0+128,z0+48 )
			or maps[save.lvl2][save.lvl].lift[1][4]==1 and coll(x1-16,y1-64,z1-16,x1+16,y1+16,z1+16, x0+144,y0,z0-48 , x0+192,y0+128,z0+48 )
			or maps[save.lvl2][save.lvl].lift[1][4]==2 and coll(x1-16,y1-64,z1-16,x1+16,y1+16,z1+16, x0-48 ,y0,z0+144, x0+48 ,y0+128,z0+192)
			or maps[save.lvl2][save.lvl].lift[1][4]==3 and coll(x1-16,y1-64,z1-16,x1+16,y1+16,z1+16, x0-48 ,y0,z0-192, x0+48 ,y0+128,z0-144) 
			then
				if achievement.t2>120 then achievement.t=1 achievement.y=16 end
				achievement.t2=0
			else
				achievement.t2=achievement.t2+1
			end
		end
	 --finish lift
		if not load_map_from_cart and not plr.death and maps[save.lvl2][save.lvl].lift[2] then
			local x0=maps[save.lvl2][save.lvl].lift[2][1]*96
			local y0=maps[save.lvl2][save.lvl].lift[2][2]*128
			local z0=maps[save.lvl2][save.lvl].lift[2][3]*96
			local x1=plr.x
			local y1=plr.y
			local z1=plr.z

			if (maps[save.lvl2][save.lvl].lift[2][4]==0 and coll(x1-16,y1-64,z1-16,x1+16,y1+16,z1+16, x0-192,y0,z0-48 , x0-144,y0+128,z0+48 ))
			or (maps[save.lvl2][save.lvl].lift[2][4]==1 and coll(x1-16,y1-64,z1-16,x1+16,y1+16,z1+16, x0+144,y0,z0-48 , x0+192,y0+128,z0+48 ))
			or (maps[save.lvl2][save.lvl].lift[2][4]==2 and coll(x1-16,y1-64,z1-16,x1+16,y1+16,z1+16, x0-48 ,y0,z0+144, x0+48 ,y0+128,z0+192))
			or (maps[save.lvl2][save.lvl].lift[2][4]==3 and coll(x1-16,y1-64,z1-16,x1+16,y1+16,z1+16, x0-48 ,y0,z0-192, x0+48 ,y0+128,z0-144))
			then lvl_t=max(lvl_t,121) end
			if lvl_t>120 then
				--Do not let the player out of the elevator
				plr.y=min(max(y1,y0+64),y0+112)
				if     maps[save.lvl2][save.lvl].lift[2][4]==0 then plr.z=min(max(z1,z0-48),z0+48) plr.x=min(max(x1,x0-192),x0-144)
				elseif maps[save.lvl2][save.lvl].lift[2][4]==1 then plr.z=min(max(z1,z0-48),z0+48) plr.x=min(max(x1,x0+144),x0+192)
				elseif maps[save.lvl2][save.lvl].lift[2][4]==2 then plr.x=min(max(x1,x0-48),x0+48) plr.z=min(max(z1,z0+144),z0+192)
				elseif maps[save.lvl2][save.lvl].lift[2][4]==3 then plr.x=min(max(x1,x0-48),x0+48) plr.z=min(max(z1,z0-192),z0-144) end
				--Updating the texture of the elevator door
				local x=(lvl_t-121)//2
				if lvl_t%2==1 and x<20 then for y=0,28 do
					setpix(93-x,y+99,5)
					if x>0 and x<19 then setpix(92-x,y+99,4) end
				end end
			end
			if lvl_t>190 then
				plr.x=plr.x-x0
				plr.y=plr.y-y0
				plr.z=plr.z-z0
				if     maps[save.lvl2][save.lvl].lift[2][4]==0 then plr.x=plr.x+144 plr.ty=plr.ty+pi2
				elseif maps[save.lvl2][save.lvl].lift[2][4]==1 then plr.x=plr.x-144 plr.ty=plr.ty-pi2
				elseif maps[save.lvl2][save.lvl].lift[2][4]==2 then plr.z=plr.z-144 plr.ty=plr.ty
				elseif maps[save.lvl2][save.lvl].lift[2][4]==3 then plr.z=plr.z+144 plr.ty=plr.ty-math.pi end

				state="load lvl"
				save.lvl=save.lvl+1
			end
		end

	 --death
	 	if plr.hp<=0 and maps[save.lvl2][save.lvl].lift[1] then
			plr.death=true
			lvl_t=max(lvl_t,121)
		end
		if lvl_t>120 and plr.death then
			darkpal(1-(lvl_t-120)/30)
			if lvl_t>150 then
				plr.x,plr.y,plr.z=0,64,0
				if     maps[save.lvl2][save.lvl].lift[2][4]==0 then plr.ty=pi2
				elseif maps[save.lvl2][save.lvl].lift[2][4]==1 then plr.ty=-pi2
				elseif maps[save.lvl2][save.lvl].lift[2][4]==2 then plr.ty=0
				elseif maps[save.lvl2][save.lvl].lift[2][4]==3 then plr.ty=-math.pi end

				state="load lvl"
			end
		end
	 --text
	 	do
			local text="Level "..save.lvl
			local text_size=print(text,240,0)
			if lvl_t<60 then
				for i=0,1 do
					print(text:sub(1,lvl_t//4),120-text_size/2,130-i,i*6+1)
				end
			elseif lvl_t<120 then
				for i=0,1 do
					print(text:sub(1,(59-lvl_t)//4),120-text_size/2,130-i,i*6+1)
				end
			end
			--
			if lvl_text_2.draw then
				local text=lvl_text[lvl_text_2.id][lvl_text_2.i]
				local text_size=print(text,240,0,1,false,1,true)
				if not lvl_text_2.pause then lvl_text_2.t=lvl_text_2.t+0.25 if keyp(26,20,1) then lvl_text_2.t=lvl_text_2.t+0.5 end if (lvl_text_2.t%1==0 or lvl_text_2.t%1~=0 and keyp(26,20,2)) and lvl_text_2.t//1<#text then sfx_(19)end end
				rect(120-text_size/2-1,113,text_size+2,8,2)
				for i=0,1 do
					print(text:sub(1,F(lvl_text_2.t)),120-text_size/2,115-i,i*6+1,false,1,true)
				end
				if lvl_text_2.t>#text+10 then
					lvl_text_2.t=0
					lvl_text_2.i=lvl_text_2.i+1
					if lvl_text_2.i>#lvl_text[lvl_text_2.id] then lvl_text_2.draw=false end
				end
			end
		end
	 --
		if not load_map_from_cart then pmem(4,save.cur_t+(tstamp()-st_t)) end
	 --pause
		if keyp(44) and pause.t==0 then
			vbank(1)
			memcpy(0x8000,0x0000,240*136/2)
			vbank(0)
			state="pause"
			main_screen.b = menu_options.p
			for i=1,3 do
				s.n[i]=peek(0x13FFB+i)
			end
			music(3,7,0,true,true,160)
			poke(0x7FC3F,0,1)
		end
		pause.t=0
	 --debug
	 	do
			frame_ms[6]  = time()
			if draw.p[1] and draw.p[2] and st.r_p then
				if col_gar then
					collectgarbage("collect")
				else
					collectgarbage("stop")
				end
			else
				collectgarbage("collect")
			end
			frame_ms[7] = time()

			local FPS =  {1000 / frame.mean, 1000 / frame.median}
			local FRAME = {frame.mean, (frame.max+frame.min)/2}

			-- Yes, I am aware of the existence of %i, but this requires rounding the number, which will make the code more huge
			local debug_text={
				{
					string.format("FPS:  %.1f",FPS[2]),
					string.format("dt:   %.2f", dt)
				},
				{
					string.format("FPS:  %.1f | %.1f", FPS[2], FPS[1]),
					string.format("Frame: %.0f|%.0f ms.",FRAME[1],FRAME[2]),
				},
				{
					string.format("FPS:  %.1f | %.1f Frame: %.1f ms.", FPS[2], FPS[1], fr_draw_t),
					string.format("mean: %.0f|%.0f ms. min: %.0f ms. max: %.0f ms.", FRAME[1], FRAME[2], frame.min, frame.max),
					string.format("Stuff: %.0f ms. portals: %.0f ms.",frames_ms.stuff, frames_ms.portals),
					string.format("Update: %.0f ms. draw: %.0f ms.", frames_ms.update, frames_ms.draw),
					string.format("Collectgarbage: %.0f ms. | RAM: %.2f kb.",frames_ms.collectgarbage,collectgarbage("count")/1024),
				},
				{
					string.format("FPS:  %.1f | %.1f Frame: %.1f ms.", FPS[2], FPS[1], fr_draw_t),
					string.format("mean: %.0f ms. min: %.0f ms. max: %.0f ms.", FRAME[1], frame.min, frame.max),
					string.format("mode: %.0f ms.", frame.mode),
					string.format("median: %.0f ms.", frame.median),
					string.format("std dev: %.2f",frame.std_dev),
					string.format("coef of var: %.3f",frame.coef_var)
				},

				{
					string.format("v: %i f: %i sp: %i p: %i | obj:%i", #unitic.poly.v, #unitic.poly.f, #unitic.poly.sp, #unitic.p, #unitic.obj),
					string.format("camera X: %.0f  Y: %.0f  Z: %.0f", plr.x, plr.y, plr.z)
				}
			}

			if keyp(49) then plr.debug_text=(plr.debug_text+1)%(#debug_text+1) end

			vbank(1)
			if plr.debug_text~=0 and debug then
				for i=1,#debug_text[plr.debug_text] do
					local text_size=print(debug_text[plr.debug_text][i], 240,0)
					rect(0,7*(i-1),text_size+2,8,2)
					for j=0,1 do
						print(debug_text[plr.debug_text][i], 1, 7*(i-1)+ 2 - j, j*6+1)
					end
				end
			end

			if plr.godmode then print("Godmode" ,1,130,7) else print("HP: "..max(plr.hp ,0),1,130,7) end
			if plr.noclip then print("Noclip", 104, 85, 7) end
		end
		vbank(0)
	end
	--------------------------
	-- settings menu ---------
	--------------------------
	if state=="main|settings" or state=="pause|settings" then vbank(1) cls(0)
		--scrolling
		if btn(0) or key(54) or key(58) or key(23) then whl = 1 end
		if btn(1) or key(55) or key(59) or key(19) then whl =-1 end

		if whl~=0 then st.vy = whl * 3 else st.vy = st.vy * 0.8 end

		st.scroll = st.scroll - min(max(st.vy, -3),3)

		local max_y = 12 * 10 - 90 --constant

		if st.scroll<0 then st.scroll = max(min(st.scroll+1.1 ,0),-10) end
		
		if st.scroll> max_y then st.scroll = min(max(st.scroll-1.1 ,max_y),max_y+10) end

		for i = 1, 12 do
			menu_options.s[i].y = 12 + i * 10 - F(st.scroll)
		end
		
		--GUI
		--slider
		rect(239, 21, 1, 88, 1)
		clip(239,21,1,88)
		rect(239, 21 + max(st.scroll/max_y*68, -15) , 1, 20, 7)
		clip()
		--buttons
		print("Back",4,125,7)
		if state=="main|settings" then print("Calibration",4,115,7) end
		print("Mouse sensitivity: "..F(st.m_s),4,5,7)
		
		clip(0,20, 240, 90)

		local texts = {
			{"music" , "Music:"               , {"Background music is always good", "but not everyone likes it"}},
			{"sfx"   , "Sfx:"                 , {"Sounds of walking, pressing buttons,","shooting turrets, etc."}},
			{"pcm"   , "PCM sample playback:" , {"Uses PCM technology to play some","melodies, sometimes sounds better"}},

			{"r_p"   , "Rendering portals: "  , {"Allows the world to be drawn through portals",""}},
			{"h_q_p" , "High quality portals:", {"using a different method of drawing portals,","which works faster but reduces their quality"}},
			{"r_both", "Render both poratls: ", {"allows you to see through both","portals at the same time"}},
			{"p"     , "Particles:"           , {"enables particle visibility",""}},
			{"d_t"   , "Dynamic textures:"    , {"allows some textures to change in real time","(for example, the texture of a light bridge)"}},
			
			{"dt_c","Time delta constant:",{"When turned off, the player moves at","the same speed regardless of the fps"}},
			{"","Test:",{"Lorem ipsum","dolor sit amet"}},
			{"","Test:",{"Lorem ipsum","dolor sit amet"}},
			{"","Test:",{"Lorem ipsum","dolor sit amet"}},
		}

		for i = 1, #texts do
			if not st.r_p and (i==5 or i==6) then
				print(texts[i][2],4,12+i*10 - F(st.scroll),3)
				if st[texts[i][1]] then
					print("On",140,12+i*10 - F(st.scroll),4)
				else
					print("Off",140,12+i*10 - F(st.scroll),4)
				end
			else
				print(texts[i][2],4,12+i*10 - F(st.scroll),7)
				if st[texts[i][1]]==true then
					print("On",140,12+i*10 - F(st.scroll),13)
				elseif st[texts[i][1]]==false then
					print("Off",140,12+i*10 - F(st.scroll),11)
				else
					print(st[texts[i][1]],140,12+i*10 - F(st.scroll),4)
				end
			end
		end

		clip()
		--mouse sensitivity slider
		rect(4,45-30,100,2,3)
		rect(4+st.m_s-20,43-30,2,6,6)

		if my>10 and my<24 then cid=1 if cl1 then st.m_s=max(min(mx+20-4,120),20) end end

		--settings hints
		if setting_hint_i ~= -1 and setting_hint_i<13 then
			print(texts[setting_hint_i][3][1],70,115,7,false,1,true)
			print(texts[setting_hint_i][3][2],70,125,7,false,1,true)
		end


		menu_options.s[13].draw = state=="main|settings" --calibration button
		--saving the settings
		save_settings()
		upd_buttons()

	end
	--------------------------
	-- darkening -------------
	--------------------------
	if state=="darkening" then
		darkening=darkening+1
		for vb=0,1 do
			vbank(vb)
			respal()
			darkpal(1-darkening/30)
		end
		if darkening==30 then
			state="still alive"
			music(7)
			vbank(0)cls()respal()
			vbank(1)cls()respal()
		end
	end
	--------------------------
	-- still alive -----------
	--------------------------
	if state=="still alive" then
		vbank(0)
		--pal
		darkening=max(darkening-1,0)
		respal()darkpal(1-darkening/30)
		--GUI
		cls(0)
		rectb(1,1,120,133,13)
		rectb(122,1,117,65,13)
		print("music by HanamileH",124,3,13)
		print("midi by Marioverehrer",124,10,13)
		print("game by HanamileH",124,17,13)
		print("& soxfox42",124,24,13)
		print("I hope you",124,38,13)
		print("liked the game",124,45,13)

		circ(195,101,33,13)
		circ(195,101,20,0)

		line(207,70 ,213,92 ,0)
		line(225,87 ,213,109,0)
		line(227,110,204,119,0)
		line(216,127,190,121,0)
		line(190,134,177,111,0)
		line(166,117,176,95 ,0)
		line(163,91 ,193,81 ,0)
		line(182,70 ,203,84 ,0)
		--text
		if t%3==0 then
			song_text_2[1]=song_text_2[1]+1
			if song_text_2[1]>#song_text[song_text_2[2]] then song_text_2[2]=song_text_2[2]+1 song_text_2[1]=0 end
			if song_text_2[2]>#song_text then song_text_2[2]=#song_text song_text_2[1]=#song_text[#song_text] end
		end

		for i=max(song_text_2[2]-17,1),song_text_2[2] do
			if i~=song_text_2[2] then
				print(song_text[i],3,(i-max(song_text_2[2]-15,1))*7+3,13)
			else
				if t%20<10 then
					print(song_text[i]:sub(1,song_text_2[1]).."_",3,(i-max(song_text_2[2]-17,1))*7+3,13)
				else
					print(song_text[i]:sub(1,song_text_2[1]),3,(i-max(song_text_2[2]-17,1))*7+3,13)
				end
			end
		end
		line(0,0,240,0,0)
	end
	--------------------------
	-- easter egg ------------
	--------------------------
	if (state=="easter egg decryption" or state=="easter egg output") and false then --activated only manually
		local adr = 0x08000 + 240*136/2
		
		if state=="easter egg decryption" then
			local key_str = "[key]"
			--[[
				Good luck cracking this (yes, it is possible).

				And no, these is no clue anywhere in the code
				about which key it is, (except for finding weak
				points of the encryption algorithm).

				Who will crack this, write to me on my
				mail [hanamileh@gmail.com] how did you do it,
				it will be interesting for me to read. :)
			]]

			--foolproof
			assert(type(key_str) == "string", "The key must be a string!")
	
			--Turning the key into numbers (nothing special here)
			local key_int = 0  --the first key (unlimited length)
			local key_int2 = 0 --the second key (1 byte)
	
			for i = 1,#key_str do local val = string.byte(key_str:sub(i,i)) key_int = (key_int<<8) + val key_int2 = key_int2 ~ ((val+i) & 0xFF) end
			--pseudo random numbers generator
			local prng={seed=0}
			function prng.random() prng.seed=765*prng.seed+5 return ((prng.seed&0xFF00)>>8)+(prng.seed&0x00FF) end
			
			--Decryption function
			--data is a table with a data to decrypt (1 byte int)
			--key_1, key_2 are decryption keys (generated above)

			--[[
				The encryption algorithm was invented
				by me, you can not even try to google it.
			]]
			local function decrypt(data,key_1,key_2)
				--foolproof
				assert(type(key_1)=="number", "the key_1 must be a number!")
				assert(type(key_2)=="number", "the key_2 must be a number!")
				assert(key_1%1==0, "the key_1 must be a integer!")
				assert(key_2%1==0, "the key_2 must be a integer!")
				assert(not (key_2>255 or key_2<0), "the key_2 must be a 8-bit value!")

				--decryption
				local ec={} --local decryption table

				--step 1
				for i = 1,#data do
					ec[i] = data[i] ~ data[i-1]
				end

				prng.seed = key_2

				--step 2
				local id = 0
				for i = 1,240*136/2 do
					id = (id + prng.random()) % (240*136/2) + 1 --value in the range from 1 to 240*136/2

					ec[id] = (ec[id] - prng.random() + id*i) & 0xFF
				end

				--step 3
				prng.seed = key_1
				for i = 1,240*136/2 do
					ec[i] = (ec[i] - prng.random() - i) & 0xFF
				end

				--decryption output
				return ec
			end
			
			--output of the decrypted image
			local map_data_1={[0]=0} --this zero is really needed

			for i = 1,240*136/2 do map_data_1[i] = peek(adr + i-1) end
			local map_data=decrypt(map_data_1,key_int,key_int2)
			for i = 1,240*136/2 do poke(adr + i-1,map_data[i]) end
			vbank(0) memcpy(0x0000, adr, 240*136/2)
			state="easter egg output"

			-- checking whether the decrypted data is correct
			-- (just so you can make sure if its been decrypted correctly)

			if false then --disabled by default

				--we check the quantity of each color and check it with a predefined table
				local c = {} --colors
				for i = 1,16 do c[i] = 0 end

				for i = 1,240*136 do
					local c2 = peek4(i-1) + 1 -- [1 - 16]
					c[c2] = c[c2] + 1
				end
				local c2={14711 ,3463 ,5430 ,872 ,420 ,23 ,49 ,8 ,307 ,70 ,0 ,0 ,1172 ,1735 ,2944 ,1436}

				local correct = true
				for i = 1,16 do
					if c[i] ~= c2[i] then correct = false end
				end

				if correct then
					trace("The check was successfully passed!",6)
				else
					trace("The check was failed!",2)
				end
			end
		------------------------
		elseif state=="easter egg output" then
			pal = "1a1c2c5d275db13e53ef7d57ffcd75a7f07038b76425717929366f3b5dc941a6f673eff7f4f4f494b0c2566c86333c57"
			respal()
			vbank(1) cls(0) vbank(0)
			memcpy(0x0000, adr, 240*136/2)
		end
	end
	-------------------------------------------
	--settings
	if not st.music then music(-1) end
	--cursor id
	vbank(0)
	poke4(0x07FF6,cid)
	--fps graph
	local fps_graph = {
		function() -- mode / median (briefly)
			scale = 24 / frames_2[frame.mode]
			rect(187, 49, 50, 26, 2)
			rectb(186,48,52,27,1)

			for x = 0, 49 do
				local p_x = x + 187
				--interpolation
				if x&1 == 1 then
					local p_y = ((frames_2[x//2] or 0) * scale + (frames_2[x//2+1] or 0) * scale) / 2
					if     p_y > 4 then line(p_x, 73 - p_y,p_x, 73, 5)
					elseif p_y > 2 then line(p_x, 73 - p_y,p_x, 73, 6)
					else line(p_x, 73 - p_y, p_x, 73, 7) end
				else
					local p_y = (frames_2[x//2] or 0) * scale

					if x//2 == frame.median then line(p_x, 73 - p_y,p_x, 73, 11)
					elseif x//2 == frame.mode then line(p_x, 73 - p_y,p_x, 73, 13)
					elseif p_y > 4 then line(p_x, 73 - p_y,p_x, 73, 5)
					elseif p_y > 2 then line(p_x, 73 - p_y,p_x, 73, 6)
					else line(p_x, 73 - p_y, p_x, 73, 7) end
				end
			end

			local text_size = print(frame.mode,240,0, 1,false,1,true)
			local text_x = frame.mode*2 + 188 - text_size / 2
			
			rect(text_x - 1, 75, text_size + 1, 7, 2)
			
			rectb(text_x - 2, 74, text_size + 3, 9, 1)
			print(frame.mode, text_x, 76, 7, false, 1 , true)

			rect(186,40, 52, 9, 2)
			rectb(186,40, 52, 9, 1)
			print("mode/median",188, 42, 7,false,1,true)
		end,

		function() -- mode / median (detail)

			rect (25,125,193,9,2)
			rectb(25,125,193,9,1)

			scale = 104 / frames_2[frame.mode]

			for x = 5, 25 do
				local text_x = x * 9 - 15
				
				if x~=5 and x~=25 then
					if x == frame.mode then
						line(text_x, 11, text_x, 124, 14)
					elseif frames_2[x] > 5 then
						line(text_x, 11, text_x, 124, 5)

					end
				end

				if x == frame.mode then
					print(x, text_x- 2, 127, 7, false, 1, true)
				else
					print(x, text_x- 2, 127, 4, false, 1, true)
				end

				if x<25 then
					local point_y_1 = 124 - (frames_2[x  ] or 0) * scale
					local point_y_2 = 124 - (frames_2[x+1] or 0) * scale
					line(text_x, point_y_1, text_x + 9, point_y_2, 11)
				end
			end

			rectb(30, 10, 181, 116, 1)

			rect (30,2,181,9,2)
			rectb(30,2,181,9,1)
			print("mode : "..frame.mode.." ms.",32,4,7)
		end,

		function() -- framerate
			rect (177, 52, 62, 32, 2)
			rectb(177, 52, 62, 32, 1)
			clip(177,52,62,32)
			for x = 0, 59 do
				local i = x%60 + 1
				if frames[i] then
					local val = frames[i]

					line(178 + x, 82 - val, 178 + x, 82, 5)
					if t > 60 then
						local val_2 = min((frames[max(i-1,1)] + frames[min(i+1,60)])/2 , 29)
						line(178 + x, 82 - min(val,val_2), 178 + x, 82, 7)
					end
				end
			end
			clip()
			rect (177,44, 62, 9, 2)
			rectb(177,44, 62, 9, 1)

			print("framerate",179,46,7)
		end,

		
		function() -- framerate (layers)
			rect (177, 52, 62, 32, 2)
			rectb(177, 52, 62, 32, 1)
			clip(177,52,62,32)
			local pallete = {9, 12, 14, 10, 8}
			local text = {"stuff","portals","update","draw","collectgarbage"}
			for x = 0, 59 do
				local i = x%60 + 1
				if frames[i] then
					local val = frames[i]
					local val_2 = frames_detalied[i]

					line(178 + x, 82 - val, 178 + x, 82, 5)
					if state == "game" then
						local pix_y = 82
						for i2 = 5,1,-1 do
							for i3 = 1,val_2[i2] do
								if pix_y < 82 - val then break end

								pix(178 + x,pix_y,pallete[i2])
								pix_y = pix_y - 1
							end
						end
					end
				end
			end
			clip()
			rect (177,44, 62, 9, 2)
			rectb(177,44, 62, 9, 1)

			print("framerate",179,46,7)

			if state == "game" then
				if key(9) then
					rect (177,83,62,33,2)
					rectb(177,83,62,33,1)
					for i = 1,5 do
						print(text[i],179,79 + i * 6, pallete[i], false,1,true)
					end
				else
					rect (177,83,62,9,2)
					rectb(177,83,62,9,1)
					print("hold [i] for info",181,85,7,false,1,true)
				end
			end
		end
	}

	
	if keyp(41) then plr.fps_graph =(plr.fps_graph +1)%(#fps_graph +1) end
	if plr.fps_graph ~=0 and t>5 and debug then
		vbank(1)
		fps_graph[plr.fps_graph]()
	end
	--fps (2)
	do
		frames_ms.stuff          = (frame_ms[2] - frame_ms[1]) + (frame_ms[6] - frame_ms[5])
		frames_ms.portals        =  frame_ms[3] - frame_ms[2]
		frames_ms.update         =  frame_ms[4] - frame_ms[3]
		frames_ms.draw           =  frame_ms[5] - frame_ms[4]
		frames_ms.collectgarbage =  frame_ms[7] - frame_ms[6]

		frames_2 = {}

		frames_sorted = {}

		for i = 0, 100 do frames_2[i] = 0 end

		fr_draw_t = time() - frame_t

		frame.min = math.huge
		frame.max = 0
		frame.mean = 0
		frame.mode = 0

		for i = 1,#frames do
			local ms = frames[i]
			frame.mean = frame.mean + ms
			frames_sorted[i] = ms
			if ms < frame.min then frame.min = ms end
			if ms > frame.max then frame.max = ms end

			frames_2[ms] = (frames_2[ms] or 0) + 1
		end

		frame.mean = frame.mean / #frames

		table.sort(frames_sorted)
		-- mode
		local max_val = -1
		for i,k in pairs(frames_2) do
			if k > max_val then max_val, frame.mode = k, i end
		end
		-- median
		frame.median = frames_sorted[#frames_sorted//2 + 1]
		-- std dev
		local sum_dev = 0
		for i = 1,#frames do
			sum_dev = sum_dev + (frames[i] - frame.mean)^2
		end

		frame.std_dev = math.sqrt(sum_dev / #frames)

		-- coef of var
		frame.coef_var = frame.std_dev / frame.mean

		-- Now complex statistical calculations are also taken into account in the frame rendering time
		if t>60 then table.remove(frames,1) table.remove(frames_detalied,1) end
		frames[min(t,60)] = F(fr_draw_t)
		frames_detalied[min(t,60)] = {
			frames_ms.stuff,
			frames_ms.portals,
			frames_ms.update,
			frames_ms.draw,
			frames_ms.collectgarbage}
	end
end

local game_pal={[0]="",[1]=""}

function BDR(scn_y) scn_y=scn_y-4
	vbank(0)
	if state=="pause" then
		vbank(1)poke(0x03FF9,0)respal()vbank(0)poke(0x03FF9,0)
		upd_buttons_bdr(scn_y, function()respal()darkpal(max(1-pause.t/30,0.4))if lvl_t<60 then darkpal(lvl_t/60)end end)
	end

	if state=="pause|accept" then
		upd_buttons_bdr(scn_y, function()respal()darkpal(0.2)if lvl_t<60 then darkpal(lvl_t/60)end end)
	end

	if state=="main" then
		upd_buttons_bdr(scn_y, function()respal()darkpal(min(main_screen.t/60,0.5)) end)
	end
	if state=="main|newgame" then
		upd_buttons_bdr(scn_y, function()respal()darkpal(0.2) end)
	end
	if state=="main|authors" then
		local function reset_pal()
			respal()darkpal(0.2)
		end
		upd_buttons_bdr(scn_y, reset_pal)

		if scn_y == 3 then darkpal(0.7) end
		if scn_y == 4 then reset_pal()  end
		
		if scn_y == 120 then darkpal(0.7) end
		if scn_y == 121 then reset_pal()  end
	end

	if state=="main|settings" or state=="pause|settings" then
		local function reset_pal()
			respal()darkpal(0.2)if state=="pause|settings" and lvl_t<60 then darkpal(lvl_t/60) end
		end

		if scn_y==0 or scn_y==20 or scn_y==111 or scn_y==123 or scn_y==133 then reset_pal()end
		if scn_y==19 or scn_y==110 then reset_pal() darkpal(0.7)end

		for i = 1, 13 do
			if scn_y==max(F(10 + i*10 - st.scroll), 20) and scn_y<110 then reset_pal() if i<13 then darkpal(main_screen.b[i].t) end end
		end

		if scn_y==113 then darkpal(main_screen.b[13].t) end
		if scn_y==123 then darkpal(main_screen.b[14].t) end
	end
	

	if state=="game" then
		local disp=256 +R(-1,1) * R(0, plr.bf_t//2)
		for vb=0,1 do
			vbank(vb)

			if scn_y==-4 then game_pal[vb]=savepal() end
			loadpal(game_pal[vb])

			if R()>0.4 then
				if p_g.cd1>0 then
					local val=(10-p_g.cd1)/10*0.5+0.5
					updpal(val, 1, 1)
				end
				if p_g.cd2>0 then
					local val=(10-p_g.cd2)/10*0.5+0.5
					updpal(1,0.5 + val*0.5, val)
				end
			end
			if R()>0.8 then
				if p_g.cd1>0 or p_g.cd2>0 then
					disp=disp+R(-1,1)
				end
			end
			poke(0x03FF9,disp)
		end
	end
end


-- <TILES>
-- 000:4444444443333333434333334333333343333433433333334343334343333333
-- 001:4444444433333333433343333333333334333334333333333333333333333333
-- 002:4444444333333332433343323333333233343232333333323333333233333332
-- 003:6666666665555555656555556555555565555655655555556565556565555555
-- 004:6666666655555555655565555555555556555556555555555555555555555555
-- 005:6666666555555554655565545555555455565454555555545555555455555554
-- 006:555555555f4f4f4f54fff4ff5f4f4f4f5ff4fff45f4f4f4f54fff4ff5f4f4f4f
-- 007:555555554f4f4f4ff4fff4ff4f4f4f4ffff4fff44f4f4f4ff4fff4ff4f4f4f4f
-- 008:555555554f4f4f43f4fff4f34f4f4f43fff4fff34f4f4f43f4fff4f34f4f4f43
-- 009:555555555fffffff5fffffff5fffffff5fffffff5fffffff5fffffff5fffffbf
-- 010:55555555ffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 011:55555555fffffff5fffffff5fffffff4fffffff4fffffff4fffffff4fffffff4
-- 012:fffffffffffffffaffffffaafffffaa0ffffaa00fffaa000ffaa0000ffaa0000
-- 013:faaaaaafaaaaaaaaa000000a0000000000000000000000000000000000000000
-- 014:ffffffffafffffffaaffffff0aafffff00aaffff000aafff0000aaff0000aaff
-- 015:0000000010101010000000001010101000000000101010100000000010101010
-- 016:4333333343333333434333334333333343333333433333334343334343333333
-- 017:3433343333333333333333333333333333343333333333333333333333333333
-- 018:3332323233333332333333323333333232333332333323323333333233333332
-- 019:6555555565555555656555556555555565555555655555556565556565555555
-- 020:5655565555555555555555555555555555565555555555555555555555555555
-- 021:5554545455555554555555545555555454555554555545545555555455555554
-- 022:5ff4fff45f4f4f4f54fff4ff5f4f4f4f5ff4fff45f4f4f4f54fff4ff5f4f4f4f
-- 023:fff4fff44f4f4f4ff4fff4ff4f4f4f4ffff4fff44f4f4f4ff4fff4ff4f4f4f4f
-- 024:fff4fff34f4f4f43f4fff4f34f4f4f43fff4fff34f4f4f43f4fff4f34f4f4f43
-- 025:5ffffbcf5fffbcff5fffcfff5fffffff5fffffff5fffffff5fffffff5fffffff
-- 026:fffffffffffffffbffffffbcfffffbcffffffcfffffbffffffbcffffffcfffff
-- 027:fffffff4fffffff4fffffff4fffffff4fffffff4fffffff4fffffff4fffffff4
-- 028:ffaa0000faa00000faa00000faa00000aa000000aa000000aa000000aa000000
-- 030:0000aaff00000aaf00000aaf00000aaf000000aa000000aa000000aa000000aa
-- 031:0000000010101010000000001010101000000000101010100000000010101010
-- 032:4333333343333333434333334333333343333333433333334333433343333333
-- 033:3433333333333233433333333333333333333233333333333323333333333333
-- 034:3332333233333332333333323333333232333232333333323333333233333332
-- 035:6555555565555555656555556555555565555555655555556555655565555555
-- 036:5655555555555455655555555555555555555455555555555545555555555555
-- 037:5554555455555554555555545555555454555454555555545555555455555554
-- 038:5ff4fff45f4f4f4f54fff4ff5f4f4f4f5ff4fff45f4f4f4f54fff4ff5f4f4f4f
-- 039:fff4fff44f4f4f4ff4fff4ff4f4f4f4ffff4fff44f4f4f4ff4fff4ff4f4f4f4f
-- 040:fff4fff34f4f4f43f4fff4f34f4f4f43fff4fff34f4f4f43f4fff4f34f4f4f43
-- 041:5fffffff5fffffff5fffffff5fffffff5fffffff5ffffffb5fffffbc5fffffcf
-- 042:fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb
-- 043:fffffff4fffffff4fffffff4fffffff4fffffff4fbfffff4bcfffff4cffffff4
-- 044:aa000000aa000000aa000000aa000000faa00000faa00000faa00000ffaa0000
-- 046:000000aa000000aa000000aa000000aa00000aaf00000aaf00000aaf0000aaff
-- 047:0000000010101010000000001010101000000000101010100000000010101010
-- 048:4333333343333333433333334333333343343333433333334333333332222222
-- 049:3333333333333332233323333333333333333332333333333333333322222222
-- 050:3332333233333332333333323333333233233232333333323333333222222222
-- 051:6555555565555555655555556555555565565555655555556555555554444444
-- 052:5555555555555554455545555555555555555554555555555555555544444444
-- 053:5554555455555554555555545555555455455454555555545555555444444444
-- 054:5ff4fff45f4f4f4f54fff4ff5f4f4f4f5ff4fff45f4f4f4f54fff4ff33333333
-- 055:fff4fff44f4f4f4ff4fff4ff4f4f4f4ffff4fff44f4f4f4ff4fff4ff33333333
-- 056:fff4fff34f4f4f43f4fff4f34f4f4f43fff4fff34f4f4f43f4fff4f333333333
-- 057:5fffffff5fffffff5fffffff5fffffff5fffffff5fffffff5555555554444444
-- 058:fffffffcffffffffffffffffffffffffffffffffffffffff5554444444444444
-- 059:fffffff4fffffff4fffffff4fffffff4fffffff4fffffff44444444444444444
-- 060:ffaa0000ffaa0000fffaa000ffffaa00fffffaa0ffffffaafffffffaffffffff
-- 061:0000000000000000000000000000000000000000a000000aaaaaaaaafaaaaaaf
-- 062:0000aaff0000aaff000aafff00aaffff0aafffffaaffffffafffffffffffffff
-- 063:0000000010101010000000001010101000000000101010100000000010101010
-- 064:fffffffffffffffdffffffddfffffdd0ffffdd00fffdd000ffdd0000ffdd0000
-- 065:fddddddfddddddddd000000d0000000000000000000000000000000000000000
-- 066:ffffffffdfffffffddffffff0ddfffff00ddffff000ddfff0000ddff0000ddff
-- 067:ffffffffffaaaffffffffffffffffffffffffffffffffffaffffffffffffffff
-- 068:fffffffffffffffffffffffbffffffffffffffffaafffffffffffffffffffffa
-- 069:ffffffffffffffffbbffffffffffffffffffffffffffffffffffffffaaffffff
-- 070:6666666665555555656555556555555565555655655555556565556565555555
-- 071:6666666655555555655565555555555556555556555555555555555555555555
-- 072:6666666555555554655565545555555455565454555555545555555455555554
-- 073:4444444443333333434333334333333343333433433333334343334343333333
-- 074:4444444433333333433343333333333334333334333333333333333333333333
-- 075:4444444333333332433343323333333233343232333333323333333233333332
-- 076:6666666665671111656777776567711165671111656711776567117765671177
-- 077:6666666611111111777777771177771111177111711771177117711771177117
-- 078:6666666511117654777776541117765411117654771176547711765477117654
-- 079:0000000010101010000000001010101000000000101010100000000010101010
-- 080:ffdd0000fdd00000fdd00000fdd00000dd000000dd000000dd000000dd000000
-- 082:0000ddff00000ddf00000ddf00000ddf000000dd000000dd000000dd000000dd
-- 083:ffffbbbfffffffffffffffffffffffffffffffffffffffffffffffffffaaafff
-- 084:fffffffffffffffffbbbfffffffffffffffffffffffffffabbbfffffffffffff
-- 085:ffffffffffffffffffffffffffffffffffffffffaaffffffffffffffffffffff
-- 086:6555555565555555656555556555555565555555655555556565556565555555
-- 087:5655565555555555555555555555555555565555555555555555555555555555
-- 088:5554545455555554555555545555555454555554555545545555555455555554
-- 089:4333333343333333434333334333333343333333433333334343334343333333
-- 090:3433343333333333333333333333333333343333333333333333333333333333
-- 091:3332323233333332333333323333333232333332333323323333333233333332
-- 092:6567117765671177656711776567117765671111656771116567777765671111
-- 093:7117711171177711711777777117711711177111117777117777777711111111
-- 094:1111765411117654771176547711765411117654111776547777765411117654
-- 095:0000000010101010000000001010101000000000101010100000000010101010
-- 096:dd000000dd000000dd000000dd000000fdd00000fdd00000fdd00000ffdd0000
-- 098:000000dd000000dd000000dd000000dd00000ddf00000ddf00000ddf0000ddff
-- 099:fffffffffffffffffffffffffffbbbffffffffffffffffffffffffffffffffaa
-- 100:fffffffffffffffffffaaafffffffffffffffffbffffffffffffffffafffffff
-- 101:ffffffffffffffffffffffffffffffffbbffffffffffffffffffffffffffffff
-- 102:6555555565555555656555556555555565555555655555556555655565555555
-- 103:5655555555555455655555555555555555555455555555555545555555555555
-- 104:5554555455555554555555545555555454555454555555545555555455555554
-- 105:4333333343333333434333334333333343333333433333334333433343333333
-- 106:3433333333333233433333333333333333333233333333333323333333333333
-- 107:3332333233333332333333323333333232333232333333323333333233333332
-- 108:6567777765671717656717176567777765677117656771176567777765677117
-- 109:7777777717177777171777777777777711733711117337117777777733733733
-- 110:7777765477777654777776547777765473377654733776547777765471177654
-- 111:0000000010101010000000001010101000000000101010100000000010101010
-- 112:ffdd0000ffdd0000fffdd000ffffdd00fffffdd0ffffffddfffffffdffffffff
-- 113:0000000000000000000000000000000000000000d000000dddddddddfddddddf
-- 114:0000ddff0000ddff000ddfff00ddffff0ddfffffddffffffdfffffffffffffff
-- 115:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 116:ffffffffffffffffffffffaafffffffffbbbffffffffffffffffffffffffffff
-- 117:ffffffffffffffffaffffffffffffffffffffffffbbbffffffffffffffffffff
-- 118:6555555565555555655555556555555565565555622222222311111152322222
-- 119:5555555555555554455545555555555555555554222ed2221111111122222222
-- 120:5554555455555554555555545555555455455454222222241111112322222234
-- 121:4333333343333333433333334333333343343333422222222311111132322222
-- 122:3333333333333332233323333333333333333332222ed2221111111122222222
-- 123:3332333233333332333333323333333233233232222222221111111322222232
-- 124:6567711765677777656666666555555565565555655556556555555554444444
-- 125:3373373377777777666666665555555555555554555545556555555544444444
-- 126:7117765477777654666666545555555455455454455555545555555444444444
-- 127:0000000010101010000000001010101000000000101010100000000010101010
-- 128:6666666665555555656555556555555565555655655555556565556565555555
-- 129:666666665555555565556555555555555655555655555552555555225555522f
-- 130:666666655555555465552222552222222222ffff22ffffffffffffffffffffff
-- 131:66666666655555552222555522222255ffff2222ffffff22ffffffffffffffff
-- 132:66666666555555556555655555555555565555562555555522555555f2255555
-- 133:6666666555555554655565545555555455565454555555545555555455555554
-- 134:6666666665555555656555556555555565555655655555556565556565555555
-- 135:6666666655555555655565555555555556555556555555525555552255555227
-- 136:6666666555555554655522225522222222227776227777767777777677777776
-- 137:6666666665555555222255552222225577772222777777227777777777777777
-- 138:6666666655555555655565555555555556555556255555552255555572255555
-- 139:6666666555555554655565545555555455565454555555545555555455555554
-- 140:ffffffffff888ffffffffffffffffffffffffffffffffff8ffffffffffffffff
-- 141:fffffffffffffffffffffff9ffffffffffffffff88fffffffffffffffffffff8
-- 142:ffffffffffffffff99ffffffffffffffffffffffffffffffffffffff88ffffff
-- 143:0000000010101010000000001010101000000000101010100000000010101010
-- 144:6555555565555555656555556555555565555555655555556565556565555555
-- 145:565522ff55522fff55222fff5522ffff522fffff522fffff22ffffff22ffffff
-- 146:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 147:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 148:ff225655fff22555fff22255ffff2255fffff225fffff225ffffff22ffffff22
-- 149:5554545455555554555555545555555454555554555545545555555455555554
-- 150:6555555565555555656555556555555565555555655555556565556565555555
-- 151:5655227755522777552227775522777752277777522777772277777722777777
-- 152:7777777677777776777777767777777677777776777777767777777677777776
-- 153:7777777777777777aaaaaaaaaaaabbbaaaabbbbbaabbbbbbaabbbbbbaabbbbbb
-- 154:7722565577722555aaaa2255aaaa2255aaaaa225baaaa225baaaaa22baaaaa22
-- 155:5554545455555554555555545555555454555554555545545555555455555554
-- 156:ffff999fffffffffffffffffffffffffffffffffffffffffffffffffff888fff
-- 157:fffffffffffffffff999fffffffffffffffffffffffffff8999fffffffffffff
-- 158:ffffffffffffffffffffffffffffffffffffffff88ffffffffffffffffffffff
-- 159:0000000010101010000000001010101000000000101010100000000010101010
-- 160:6555555565555555656555556555555265555552655555526555655265555552
-- 161:22ffffff22ffffff22ffffff2fffffff2fffffff2fffffff2fffffff2fffffff
-- 162:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 163:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 164:ffffff22ffffff22ffffff22fffffff2fffffff2fffffff2fffffff2fffffff2
-- 165:5554555455555554555555542555555424555454255555542555555425555554
-- 166:6555555565555555656555556555555265555552655555526555655265555552
-- 167:2277777722777777227777772777777727777777277777772777777727777777
-- 168:7777777677777766777776767777677677776776777767767777767677777766
-- 169:baabbbbbbbaabbbabbbaaaaabbbbaaaabbbbbaaabbbbbaaabbabbbaabaaabbbb
-- 170:aaaaaa22aaaaaa22aaaaaa22aaaaaaa2aaaaaaa2aaaaaaa2aaaaaaa2baaaaaa2
-- 171:5554555455555554555555542555555424555454255555542555555425555554
-- 172:fffffffffffffffffffffffffff999ffffffffffffffffffffffffffffffff88
-- 173:fffffffffffffffffff888fffffffffffffffff9ffffffffffffffff8fffffff
-- 174:ffffffffffffffffffffffffffffffff99ffffffffffffffffffffffffffffff
-- 175:0000000010101010000000001010101000000000101010100000000010101010
-- 176:6555555265555552655555526555555265565555655555556555555554444444
-- 177:2fffffff2fffffff2fffffff2fffffff22ffffff22ffffff22ffffff422fffff
-- 178:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 179:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 180:fffffff2fffffff2fffffff2fffffff2ffffff22ffffff22ffffff22fffff224
-- 181:2554555425555554255555542555555455455454555555545555555444444444
-- 182:6555555265555552655555526555555265565555655555556555555554444444
-- 183:2777777727777777277777772777777722777777227777772277777742277777
-- 184:7777777677777776777777767777777677777776777777767777777677777776
-- 185:bbaaabbbbbbaaaaaabbbaaaaaabbbaaaabbbaaaabbbaaaaabbaaaaaabaaaaaaa
-- 186:baaaaaa2aaaaaaa2aaaaaaa2aaaaaaa2aaaaaa22aaaaaa22aaaaaa22aaaaa224
-- 187:2554555425555554255555542555555455455454555555545555555444444444
-- 188:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 189:ffffffffffffffffffffff88fffffffff999ffffffffffffffffffffffffffff
-- 190:ffffffffffffffff8ffffffffffffffffffffffff999ffffffffffffffffffff
-- 191:0000000010101010000000001010101000000000101010100000000010101010
-- 192:555555555ccccccc5bbbbbbb5aaaaaaa5ccccccc5bbbbbbb5aaaaaaa5ccccccc
-- 193:55555555ccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaacccccccc
-- 194:55555555ccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaacccccccc
-- 195:55555555ccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaacccccccc
-- 196:55555555ccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaacccccccc
-- 197:55555555ccccccc4bbbbbbb4aaaaaaa4ccccccc4bbbbbbb4aaaaaaa4ccccccc4
-- 198:2b2444442b2433332b2433332b2433332b2433332b2433332b2433332b243333
-- 199:4444444433333333333333333333333333333333333333333333333333333333
-- 200:444442b2333342b2333342b2333342b2333342b2333342b2333342b2333342b2
-- 201:2b2222222b222222233333332355555523555555235555552355555523555555
-- 202:2222222222222222333333335555555555555555555555555555555555555555
-- 203:222222b2222222b2333333325555553255555532555555325555553255555532
-- 204:4444444343333332433433324333323243433332433323324333333232222222
-- 205:4444444343333332433433324333323243433332433323324333333232222222
-- 206:4444444343333332433433324333323243433332433323324333333232222222
-- 207:0000000010101010000000001010101000000000101010100000000010101010
-- 208:5bbbbbbb5aaaaaaa5ccccccc5bbbbbbb5aaaaaaa5ccccccc5bbbbbbb5aaaaaaa
-- 209:bbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaa
-- 210:bbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaa
-- 211:bbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaa
-- 212:bbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaa
-- 213:bbbbbbb4aaaaaaa4ccccccc4bbbbbbb4aaaaaaa4ccccccc4bbbbbbb4aaaaaaa4
-- 214:2b2433332b2433332b2433332b2433332b2433332b2433332b2433332b243333
-- 215:3333333333333333333333333333333333333333333333333333333333333333
-- 216:333342b2333342b2333342b2333342b2333342b2333342b2333342b2333342b2
-- 217:2355555523555555235555552355555523555555235555552355555523555555
-- 218:5555555555555555555555555555555555555555555555555555555555555555
-- 219:5555553255555532555555325555553255555532555555325555553255555532
-- 220:4444444343333332433433324333323243433332433323324333333232222222
-- 221:4444444343333332433433324333323243433332433323324333333232222222
-- 222:4444444343333332433433324333323243433332433323324333333232222222
-- 223:0000000010101010000000001010101000000000101010100000000010101010
-- 224:5ccccccc5bbbbbbb5aaaaaaa5ccccccc5bbbbbbb5aaaaaaa5ccccccc5bbbbbbb
-- 225:ccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbb
-- 226:ccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbb
-- 227:ccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbb
-- 228:ccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbb
-- 229:ccccccc4bbbbbbb4aaaaaaa4ccccccc4bbbbbbb4aaaaaaa4ccccccc4bbbbbbb4
-- 230:2b2433332b2433332b2433332b2444442b22222233333333333333332b222222
-- 231:3333333333333333333333334444444422222222333333333333333322222222
-- 232:333342b2333342b2333342b2444442b2222222b23333333333333333222222b2
-- 233:2355555523555555235555552355555523555555335555553355555523555555
-- 234:5555555555555555555555555555555555555555555555555555555555555555
-- 235:5555553255555532555555325555553255555532555555325555553255555532
-- 236:4444444343333332433433324333323243433332433323324333333232222222
-- 237:4444444343333332433433324333323243433332433323324333333232222222
-- 238:4444444343333332433433324333323243433332433323324333333232222222
-- 239:0000000010101010000000001010101000000000101010100000000010101010
-- 240:5aaaaaaa5ccccccc5bbbbbbb5aaaaaaa5ccccccc5bbbbbbb5555555554444444
-- 241:aaaaaaaaccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbb5555555544444444
-- 242:aaaaaaaaccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbb5555555544444444
-- 243:aaaaaaaaccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbb4444444444444444
-- 244:aaaaaaaaccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbb4444444444444444
-- 245:aaaaaaa4ccccccc4bbbbbbb4aaaaaaa4ccccccc4bbbbbbb44444444444444444
-- 246:2b2222222b2222222b2222222b2222222b2222222b2222222b2222222b222222
-- 247:2222222222222222222222222222222222222222222222222222222222222222
-- 248:222222b2222222b2222222b2222222b2222222b2222222b2222222b2222222b2
-- 249:2355555523555555235555552355555523555555235555552355555523555555
-- 250:5555555555555555555555555555555555555555555555555555555555555555
-- 251:5555553255555532555555325555553255555532555555325555553255555532
-- 252:0000000010101010000000001010101000000000101010100000000010101010
-- 253:0000000010101010000000001010101000000000101010100000000010101010
-- 254:0000000010101010000000001010101000000000101010100000000010101010
-- 255:0000000010101010000000001010101000000000101010100000000010101010
-- </TILES>

-- <TILES1>
-- 114:0000000000000000000000000000000000000044000044440044444444444444
-- 115:0000004400004444004444444444444444444444444444444444444444444444
-- 116:4400000044440000444444004444444444444444444444444444444444444444
-- 117:0000000000000000000000000000000044000000444400004444440044444444
-- 128:0000000000000000000000000000000000000044000000440000000000000000
-- 129:0000004400004444004444444444444444444444444444444444444400444444
-- 130:4444444444444444444444444444444444444400444400004400000000000000
-- 131:4444440044440000440000000000000000000000000000000000000000000000
-- 132:0044444400004444000000440000000000000000000000000000000000000000
-- 133:4444444444444444444444444444444400444444000044440000004400000000
-- 134:4400000044440000444444004444444444444444444444444444444444444444
-- 135:0000000000000000000000000000000044000000444400004444440044444444
-- 144:3300000033330000333333003333333333333333333333333333333333333333
-- 145:0000440000000000000000000000000033000000333300003333330033333333
-- 150:0044444400004444000000440000000000000000000000000000000000000000
-- 151:4444443344443333443333333333333333333333333333333333333333333333
-- 160:3333333333333333333333333333333333333333333333333333333333333333
-- 161:3333333333333333333333333333333333333333333333333333333333333333
-- 162:3300000033330000333333003333333333333333333333333333333333333333
-- 163:0000000000000000000000000000000033000000333300003333330033333333
-- 167:3333333333333333333333333333333333333333333333333333333333333333
-- 176:3333333333333333333333333333333333333333333333333333333333333333
-- 177:3333333333333333333333333333333333333333333333333333333333333333
-- 178:3333333333333333333333333333333333333333333333333333333333333333
-- 179:3333333333333333333333333333333333333333333333333333333333333333
-- 183:3333333333333333333333333333333333333333333333333333333333333333
-- 192:3333333333333333333333333333333333333333333333333333333333333333
-- 193:3333333333333333333333333333333333333333333333333333333333333333
-- 194:3333333333333333333333333333333333333333333333333333333333333333
-- 195:3333333333333333333333333333333333333333333333333333333333333333
-- 199:3333333333333333333333333333333333333333333333333333333333333333
-- 208:3333333333333333333333333333333333333333333333333333333333333333
-- 209:3333333333333333333333333333333333333333333333333333333333333333
-- 210:3333333333333333333333333333333333333333333333333333333333333333
-- 211:3333333333333333333333333333333333333333333333333333333333333333
-- 214:0000000000000000000000000000000000000000000000330000333300333333
-- 215:3333333333333333333333333333333333333333333333333333333333333333
-- 224:3333333300333333000033330000003300000000000000000000000000000000
-- 225:3333333333333333333333333333333333333333003333330000333300000033
-- 226:3333333333333333333333333333333333333333333333333333333333333333
-- 227:3333333333333333333333333333333333333333333333333333333333333333
-- 228:0000000000000000000000000000000000000000000000330000333300333333
-- 229:0000000000000033000033330033333333333333333333333333333333333333
-- 230:3333333333333333333333333333333333333333333333003333000033000000
-- 231:3333333333333300333300003300000000000000000000000000000000000000
-- 242:3333333300333333000033330000003300000000000000000000000000000000
-- 243:3333333333333333333333333333333333333333003333330000333300000033
-- 244:0033333300333333003333330033333300333333003333000033000000000000
-- 245:3333333333333300333300003300000000000000000000000000000000000000
-- </TILES1>

-- <SPRITES>
-- 000:0000000000000000000000000000000000777777007777770077711100777000
-- 001:0000000000000000000000000000000077770000777770001177770000177700
-- 002:0000000000000000000000000000000000777777077777777777111177710000
-- 003:0000000000000000000000000000000077000077777000777777007717770077
-- 004:0000000000000000000000000000000077777777777777777711117777000017
-- 005:0000000000000000000000000000000000007777700077777700111177000000
-- 006:0000000000000000000000000000000077777777777777777777111177770000
-- 007:0000000000000000000000000000000000007777000777770077777100777710
-- 008:0000000000000000000000000000000077770000777770001777770001777700
-- 009:0000000000000000000000000000000077770000777700007777000077770000
-- 011:0aa000000aa0000b0aa000bb0aa00bbb0aa00bbb0aa00bbb0aab00bb0aabb00b
-- 012:00000000bb000000bbb00000bbbb0000bbbb0000bbbb0000bbb00000bb000000
-- 013:0000000010101010000000001010101000000000101010100000000010101010
-- 014:0000000010101010000000001010101000000000101010100000000010101010
-- 015:999997b7988897b7988897b7988897b7999997e7222227e7222227e7222227e7
-- 016:0077700000767000006760000076767600676767006661110066600000666000
-- 017:0007770000067600006767007676710067671000111100000000000000000000
-- 018:7770000067600000767000006760000076700000666000006660000066660000
-- 019:0777007706760067076700760676006707670076066600660666006666660066
-- 020:7700000767000007760000766767676776767676661111666600006666000016
-- 021:7700000067000000760000006100000010000000600000006000000066000000
-- 022:7777000067670000767600006767000076760000666600006666000066660000
-- 023:0077770000676700007676000067676700767676006666110066660000666600
-- 024:0077770000676700007676006767670076767600116666000066660000666600
-- 025:7777000067670000767600006767000076760000666600006666000066660000
-- 027:0aabbb000aabbbb00aabbbbb0aabbbbb0aabbbbb0aabb0bb0aab000b0aabb000
-- 028:0000000000000000000000000000000000000000b0000000bb000000bbbbb000
-- 029:0000000010101010000000001010101000000000101010100000000010101010
-- 030:0000000010101010000000001010101000000000101010100000000010101010
-- 031:8822777788227777ffff7777f711711771ff77771fff77771fff77771fffffff
-- 032:0066600000666000001110000000000000000000000000000000000000000000
-- 034:1666666601666666001111110000000000000000000000000000000000000000
-- 035:6661006666100066110000110000000000000000000000000000000000000000
-- 036:6600000666000006110000010000000000000000000000000000000000000000
-- 037:6600000066000000110000000000000000000000000000000000000000000000
-- 038:6666000066660000111100000000000000000000000000000000000000000000
-- 039:0066660000666600001111000000000000000000000000000000000000000000
-- 040:0066660000666600001111000000000000000000000000000000000000000000
-- 041:6666666666666666111111110000000000000000000000000000000000000000
-- 042:6666000066660000111100000000000000000000000000000000000000000000
-- 043:0aabbb000aa0bbb00aa00bbb0aa0bbb00aabbb000aabb0000aab00000aa00000
-- 044:0bbbb00000000000000000000000000000000000000000000000000000000000
-- 045:0000000010101010000000001010101000000000101010100000000010101010
-- 046:0000000010101010000000001010101000000000101010100000000010101010
-- 047:0000000010101010000000001010101000000000101010100000000010101010
-- 048:4444444343333332433433324333323243433332433323324333333232222222
-- 049:4444444343333332433433324333323243433332433323324333333232222222
-- 050:4444444343333332433433324333323243433332433323324333333232222222
-- 051:7777777676666665766766657666656576766665766656657666666565555555
-- 052:7777777676666665766766657666656576766665766656657666666565555555
-- 053:7777777676666665766766657666656576766665766656657666666565555555
-- 054:555555555f4f4f4f54fff4ff5f4f4f4f5ff4fff45f4f4f4f54fff4ff5f4f4f4f
-- 055:555555554f4f4f4ff4fff4ff4f4f4f4ffff4fff44f4f4f4ff4fff4ff4f4f4f4f
-- 056:555555554f4f4f43f4fff4f34f4f4f43fff4fff34f4f4f43f4fff4f34f4f4f43
-- 057:555555555fffffff5fffffff5fffffff5fffffff5fffffff5fffffbf5ffffbcf
-- 058:55555555ffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 059:55555555fffffff5fffffff5fffffff4fffffff4fffffff4ffbffff4fbcffff4
-- 060:ffffffffff888ffffffffffffffffffffffffffffffffff8ffffffffffffffff
-- 061:fffffffffffffffffffffff9ffffffffffffffff88fffffffffffffffffffff8
-- 062:ffffffffffffffff99ffffffffffffffffffffffffffffffffffffff88ffffff
-- 063:0000000010101010000000001010101000000000101010100000000010101010
-- 064:4444444343333332433433324333323243433332433323324333333232222222
-- 065:4444444343333332433433324333323243433332433323324333333232222222
-- 066:4444444343333332433433324333323243433332433323324333333232222222
-- 067:7777777676666665766766657666656576766665766656657666666565555555
-- 068:7777777676666665766766657666656576766665766656657666666565555555
-- 069:7777777676666665766766657666656576766665766656657666666565555555
-- 070:5ff4fff45f4f4f4f54fff4ff5f4f4f4f5ff4fff45f4f4f4f54fff4ff5f4f4f4f
-- 071:fff4fff44f4f4f4ff4fff4ff4f4f4f4ffff4fff44f4f4f4ff4fff4ff4f4f4f4f
-- 072:fff4fff34f4f4f43f4fff4f34f4f4f43fff4fff34f4f4f43f4fff4f34f4f4f43
-- 073:5fffbcff5fffcfff5fffffff5fffffff5fffffff5fffffff5fffffff5fffffff
-- 074:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffbfffffff
-- 075:bcfffff4cffffff4fffffff4fffffff4fffffff4fffffff4fffffff4ffbffff4
-- 076:ffff999fffffffffffffffffffffffffffffffffffffffffffffffffff888fff
-- 077:fffffffffffffffff999fffffffffffffffffffffffffff8999fffffffffffff
-- 078:ffffffffffffffffffffffffffffffffffffffff88ffffffffffffffffffffff
-- 079:0000000010101010000000001010101000000000101010100000000010101010
-- 080:4444444343333332433433324333323243433332433323324333333232222222
-- 081:4444444343333332433433324333323243433332433323324333333232222222
-- 082:4444444343333332433433324333323243433332433323324333333232222222
-- 083:7777777676666665766766657666656576766665766656657666666565555555
-- 084:7777777676666665766766657666656576766665766656657666666565555555
-- 085:7777777676666665766766657666656576766665766656657666666565555555
-- 086:5ff4fff45f4f4f4f54fff4ff5f4f4f4f5ff4fff45f4f4f4f54fff4ff53333333
-- 087:fff4fff44f4f4f4ff4fff4ff4f4f4f4ffff4fff44f4f4f4ff4fff4ff33333333
-- 088:fff4fff34f4f4f43f4fff4f34f4f4f43fff4fff34f4f4f43f4fff4f333333333
-- 089:5ffffffb5ffffffc5fffffff5fffffff5fffffff5fffffff5fffffff54444444
-- 090:cffffffffffffffffffffffbfffffffcffffffffffffffffffffffff44444444
-- 091:fbcffff4bcfffff4cffffff4fffffff4fffffff4fffffff4fffffff444444444
-- 092:fffffffffffffffffffffffffff999ffffffffffffffffffffffffffffffff88
-- 093:fffffffffffffffffff888fffffffffffffffff9ffffffffffffffff8fffffff
-- 094:ffffffffffffffffffffffffffffffff99ffffffffffffffffffffffffffffff
-- 095:0000000010101010000000001010101000000000101010100000000010101010
-- 096:0000000010101010000000001010101000000000101010100000000010101010
-- 097:0000000010101010000000001010101000000000101010100000000010101010
-- 098:0000000010101010000000001010101000000000101010100000000010101010
-- 099:0000000010101010000000001010101000000000101010100000000010101010
-- 100:0000000010101010000000001010101000000000101010100000000010101010
-- 101:0000000010101010000000001010101000000000101010100000000010101010
-- 102:4444444343333332433433324333323243433332433323324333333232222222
-- 103:4444444343333332431111124122122112221222122212221232123212221222
-- 104:4444444343333332433433324333323213433332133323321333333212222222
-- 105:7777777676666665766766657666656576766665766656657666666565555555
-- 106:7777777676666665761111157122122112221222122212221232123212221222
-- 107:7777777676666665766766657666656516766665166656651666666515555555
-- 108:0000888800008888000088880000888888880000888800008888000088880000
-- 109:0000888800008888000088880000888888880000888800008888000088880000
-- 110:0000888800008888000088880000888888880000888800008888000088880000
-- 111:0000000010101010000000001010101000000000101010100000000010101010
-- 112:0000000010101010000000001010101000000000101010100000000010101010
-- 113:0000000010101010000000001010101000000000101010100000000010101010
-- 114:0000000010101010000000001010101000000000101010100000000010101010
-- 115:0000000010101010000000001010101000000000101010100000000010101010
-- 116:0000000010101010000000001010101000000000101010100000000010101010
-- 117:0000000010101010000000001010101000000000101010100000000010101010
-- 118:4444444343333332433433324333323243433332433323324333333232222222
-- 119:122212221222122212221222122212221232123212221222122ba222111aa111
-- 120:1444444313333332133433321333323213433332133323321333333212222222
-- 121:7777777676666665766766657666656576766665766656657666666565555555
-- 122:122212221222122212221222122212221232123212221222122ba222111aa111
-- 123:1777777616666665166766651666656516766665166656651666666515555555
-- 124:000bb01100b444440b444444b4444444b4444444044444441444444414444444
-- 125:0000000010000000410000004410000044100000440000004410000044100000
-- 126:0003301100344444034444443444444434444444044444441444444414444444
-- 127:0000000010000000410000004410000044100000440000004410000044100000
-- 128:0000000010101010000000001010101000000000101010100000000010101010
-- 129:0000000010101010000000001010101000000000101010100000000010101010
-- 130:0000000010101010000000001010101000000000101010100000000010101010
-- 131:0000000010101010000000001010101000000000101010100000000010101010
-- 132:0000000010101010000000001010101000000000101010100000000010101010
-- 133:0000000010101010000000001010101000000000101010100000000010101010
-- 134:4444444343333332433433324333323243433332433323324333333232222222
-- 135:1222222212223222123222321222222212211222412112214311111232222222
-- 136:1444444313333332133433321333323213433332433323324333333232222222
-- 137:7777777676666665766766657666656576766665766656657666666565555555
-- 138:1222222212223222123222321222222212211222712112217611111565555555
-- 139:1777777616666665166766651666656516766665766656657666666565555555
-- 140:0144444400144444000110110000000000000000000000000000000000000000
-- 141:4100000010000000000000000000000000000000000000000000000000000000
-- 142:0144444400144444000110110000000000000000000000000000000000000000
-- 143:4100000010000000000000000000000000000000000000000000000000000000
-- 144:fffffffffffffffffffffffffffffffcffffffccfffffcccffffccccffffcccc
-- 145:fffffffffffffffffccccccfcccccccccccccccccccccccccccccccccccccccc
-- 146:ffffffffffffffffffffffffcfffffffccffffffcccfffffccccffffccccffff
-- 147:fffffffffffffffffffffffffffffffeffffffeefffffeeeffffeeeeffffeeee
-- 148:fffffffffffffffffeeeeeefeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
-- 149:ffffffffffffffffffffffffefffffffeeffffffeeefffffeeeeffffeeeeffff
-- 150:0000000010101010000000001010101000000000101010100000000010101010
-- 151:0000000010101010000000001010101000000000101010100000000010101010
-- 152:0000000010101010000000001010101000000000101010100000000010101010
-- 153:0000000010101010000000001010101000000000101010100000000010101010
-- 154:0000000010101010000000001010101000000000101010100000000010101010
-- 155:0000000010101010000000001010101000000000101010100000000010101010
-- 156:0000000010101010000000001010101000000000101010100000000010101010
-- 157:0000000010101010000000001010101000000000101010100000000010101010
-- 158:0000000010101010000000001010101000000000101010100000000010101010
-- 159:0000000010101010000000001010101000000000101010100000000010101010
-- 160:ffffccccfffcccccfffcccccfffcccccffccccccffccccccffccccccffcccccc
-- 161:cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
-- 162:ccccffffcccccfffcccccfffcccccfffccccccffccccccffccccccffccccccff
-- 163:ffffeeeefffeeeeefffeeeeefffeeeeeffeeeeeeffeeeeeeffeeeeeeffeeeeee
-- 164:eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
-- 165:eeeeffffeeeeefffeeeeefffeeeeefffeeeeeeffeeeeeeffeeeeeeffeeeeeeff
-- 166:0000000010101010000000001010101000000000101010100000000010101010
-- 167:0000000010101010000000001010101000000000101010100000000010101010
-- 168:0000000010101010000000001010101000000000101010100000000010101010
-- 169:5555555556666665566666655666666556666665566666545666654455555444
-- 170:4555555445666654456666544566665444555544444444444444444444444444
-- 171:5555555556666665566666655666666556666665456666654456666544455555
-- 172:2222222223333333233333332332222223321111233211112332111123321111
-- 173:2222222233333333333333332222222211111111111111111111111111111111
-- 174:2222222233333332333333322222233211112332111123321111233211112332
-- 175:0000000010101010000000001010101000000000101010100000000010101010
-- 176:ffccccccffccccccffccccccffccccccfffcccccfffcccccfffcccccffffcccc
-- 177:cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
-- 178:ccccccffccccccffccccccffccccccffcccccfffcccccfffcccccfffccccffff
-- 179:ffeeeeeeffeeeeeeffeeeeeeffeeeeeefffeeeeefffeeeeefffeeeeeffffeeee
-- 180:eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
-- 181:eeeeeeffeeeeeeffeeeeeeffeeeeeeffeeeeefffeeeeefffeeeeefffeeeeffff
-- 182:0000000010101010000000001010101000000000101010100000000010101010
-- 183:0000000010101010000000001010101000000000101010100000000010101010
-- 184:0000000010101010000000001010101000000000101010100000000010101010
-- 185:4444444455554444566654495666544956665449566654445555444444444444
-- 186:4994499498899889887888888788888888888888988888894988889444988944
-- 187:4444444444445555944566659445666594456665444566654444555544444444
-- 188:2332111123321111233211112332111123321111233211112332111123321111
-- 189:1111111111111111111111111111111111111111111111111111111111111111
-- 190:1111233211112332111123321111233211112332111123321111233211112332
-- 191:0000000010101010000000001010101000000000101010100000000010101010
-- 192:ffffccccffffccccfffffcccffffffccfffffffcffffffffffffffffffffffff
-- 193:ccccccccccccccccccccccccccccccccccccccccfccccccfffffffffffffffff
-- 194:ccccffffccccffffcccfffffccffffffcfffffffffffffffffffffffffffffff
-- 195:ffffeeeeffffeeeefffffeeeffffffeefffffffeffffffffffffffffffffffff
-- 196:eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeefeeeeeefffffffffffffffff
-- 197:eeeeffffeeeeffffeeefffffeeffffffefffffffffffffffffffffffffffffff
-- 198:0000000010101010000000001010101000000000101010100000000010101010
-- 199:0000000010101010000000001010101000000000101010100000000010101010
-- 200:0000000010101010000000001010101000000000101010100000000010101010
-- 201:5555544456666544566666545666666556666665566666655666666555555555
-- 202:4449944444444444444444444455554445666654456666544566665445555554
-- 203:4445555544566665456666655666666556666665566666655666666555555555
-- 204:2332111123321111233211112332111123322222233333332333333322222222
-- 205:1111111111111111111111111111111122222222333333333333333322222222
-- 206:1111233211112332111123321111233222222332333333323333333222222222
-- 207:0000000010101010000000001010101000000000101010100000000010101010
-- 208:ffffffffaaaaaaaafcfcfcfcbfbfbfbffcfcfcfcbfbfbfbffcfcfcfcbfbfbfbf
-- 209:ffffffffaaaaaaaafcfcfcfcbfbfbfbffcfcfcfcbfbfbfbffcfcfcfcbfbfbfbf
-- 210:2222222229999999298888892988888929888889298889992988898829999988
-- 211:2222222099999920888889208888892088888920998889208988892089999920
-- 212:333333333aaaaaaa3a1aaaaa3aa1aaaa3aaa1aaa3aaaa1a13aaaaa1a3aaaa1a1
-- 213:33333000aaaa3000aa1a3000a1aa30001aaa3000aaaa3000aaaa3000aaaa3000
-- 214:333333333ddddddd3ddddddd3ddddddd3ddddddd3ddddddd3d1ddddd3dd1ddd1
-- 215:33333000dddd3000dd1d3000d1dd3000d1dd30001ddd30001ddd3000dddd3000
-- 216:0000000010101010000000001010101000000000101010100000000010101010
-- 217:5555555556666665566666655666666556666665566666545666654455555444
-- 218:4555555445666654456666544566665444555544444444444444444444aaaa44
-- 219:5555555556666665566666655666666556666665456666654456666544455555
-- 220:2222222223333333234343432333333324343434233333332343434322222222
-- 221:2222222233333333434343433333333334343434333333334343434322222222
-- 222:2222222233333332434343423333333234343432333333324343434222222222
-- 223:0000000010101010000000001010101000000000101010100000000010101010
-- 224:fcfcfcfcbfbfbfbffcfcfcfcbfbfbfbffcfcfcfcbfbfbfbfaaaaaaaaffffffff
-- 225:fcfcfcfcbfbfbfbffcfcfcfcbfbfbfbffcfcfcfcbfbfbfbfaaaaaaaaffffffff
-- 226:298889882988899929888889298888892988888929999999222222227bbbb707
-- 227:89888920998889208888892088888920888889209999992022222225eeee7005
-- 228:3aaa1aaa3aa1aaaa3a1aaaaa3aaaaaaa33333333222222220000000000000000
-- 229:1aaa3000a1aa3000aa1a3000aaaa300033333000222220000000000000000000
-- 230:3ddd1d1d3ddd1d1d3dddd1dd3ddddddd33333333222222220000000000000000
-- 231:dddd3000dddd3000dddd3000dddd300033333000222220000000000000000000
-- 232:0000000010101010000000001010101000000000101010100000000010101010
-- 233:44444444555544445666544a5666544a5666544a5666544a5555444444444444
-- 234:aabbbbaaabbbbbbabbbaabbbbba44abbbba44abbbbbaabbbabbbbbbaaabbbbaa
-- 235:4444444444445555a4456665a4456665a4456665a44566654444555544444444
-- 236:7fffffff7fffffff7ffffcff7fffcfff7ffcffff7fffffff7fffffff7ffffffc
-- 237:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcfff
-- 238:fffffffcfffffffcfffffffcfffffffcfffcfffcffcffffcfffffffcfffffffc
-- 239:0000000010101010000000001010101000000000101010100000000010101010
-- 240:bb1b1111b11b111111111111bb11111111111111111111111111111111111111
-- 241:11111111111111111111111111111dd111111111111d11d1111d1dd111111111
-- 242:1113111111131111111111113311133111111111111311111113111111111111
-- 243:001122330011223344556677445566778899aabb8899aabbccddeeffccddeeff
-- 244:0000000010101010000000001010101000000000101010100000000010101010
-- 245:0000000010101010000000001010101000000000101010100000000010101010
-- 246:0000000010101010000000001010101000000000101010100000000010101010
-- 247:0000000010101010000000001010101000000000101010100000000010101010
-- 248:0000000010101010000000001010101000000000101010100000000010101010
-- 249:5555544456666544566666545666666556666665566666655666666555555555
-- 250:44aaaa4444444444444444444455554445666654456666544566665445555554
-- 251:4445555544566665456666655666666556666665566666655666666555555555
-- 252:7fffffcf7ffffcff7fffcfff7fffffff22222222233333332333333322222222
-- 253:fffcffffffcfffffffffffffffffffff2222222234bbbb4334bccb4322222222
-- 254:fffffffcfffffffcfffffffcfffffffc22222222333333323333333222222222
-- 255:0000000010101010000000001010101000000000101010100000000010101010
-- </SPRITES>

-- <MAP>
-- 000:00ffffffffff0000000000ffff00000000ffffffffff000000ffffffffff0000ffff000000ffff00ffffffffffffff0000ffffffffff0000ffffffffffffff0000ffffffffff000000ffffffffff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 001:ffffffffffffff000000ffffff000000ffffffffffffff00ffffffffffffff00ffff000000ffff00ffffffffffffff00ffffffffffffff00ffffffffffffff00ffffffffffffff00ffffffffffffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 002:ffff000000ffff0000ffffffff000000ffff000000ffff00ffff000000ffff00ffff000000ffff00ffff000000000000ffff000000ffff000000000000ffff00ffff000000ffff00ffff000000ffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 003:ffff000000ffff00000000ffff000000ffff000000ffff000000000000ffff00ffff000000ffff00ffff000000000000ffff0000000000000000000000ffff00ffff000000ffff00ffff000000ffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 004:ffff000000ffff00000000ffff0000000000000000ffff000000000000ffff00ffff000000ffff00ffffffffffff0000ffffffffffff000000000000ffff0000ffff000000ffff00ffff000000ffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 005:ffff000000ffff00000000ffff00000000ffffffffffff00000000ffffff0000ffffffffffffff00ffffffffffffff00ffffffffffffff00000000ffffff000000ffffffffff0000ffffffffffffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 006:ffff000000ffff00000000ffff000000ffffffffffff00000000000000ffff00ffffffffffffff000000000000ffff00ffff000000ffff00000000ffff000000ffff000000ffff000000000000ffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 007:ffff000000ffff00000000ffff000000ffff0000000000000000000000ffff000000000000ffff000000000000ffff00ffff000000ffff000000ffff00000000ffff000000ffff000000000000ffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 008:ffff000000ffff00000000ffff000000ffff000000000000ffff000000ffff000000000000ffff00ffff000000ffff00ffff000000ffff000000ffff00000000ffff000000ffff00ffff000000ffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 009:ffffffffffffff00000000ffff000000ffffffffffffff00ffffffffffffff000000000000ffff00ffffffffffffff00ffffffffffffff0000ffff0000000000ffffffffffffff00ffffffffffffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 010:00ffffffffff0000000000ffff000000ffffffffffffff0000ffffffffff00000000000000ffff0000ffffffffff000000ffffffffff000000ffff000000000000ffffffffff000000ffffffffff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 068:c48a3a8d2105c055c40207735a7582b27ab14982eb02539ae3388fa7d81d0e9d138b9b25142568036a78068b84cc834e1fec567c110395f70fdd8fd167cfc285aa5bbb865375a68bfab15a2274491c6300ba6442e45b4774d3bdb2cc51e9c9b9e69c6563141f96796f84a4821c97ede6461a429f36ee3470faa586bf14eac67f3b4628523ab8b6ec209cf6f9b3b6170775b077bc8a593bb4c8cad16467bd25305cd29dc7db14f468aa680e52edaa0aea00af58fec234f562e7f7bfa5399ba6ece12ff945acd1e729f0c61ce6d8bd64f045895f1c48885828f6e86484285b424abcc1cb8a1d970a393c78aecd74a46182
-- 069:9c411e3f9c37418ec082be4ed4adaff44fe0668d8de408c1e629b67cdee1fe6c2c69b85e6bb8cea77efa076b8e0e809ead8ce0b7b6e5e6423606c94093a4382dd94fbd4c99aa2ccbbf215ebfb9f06d67c251804b4e24dd4567eb01801bac07d0b15060703b883cf9dd4408008e5e5f715d6b9dfb7e2b7633fd68a81988ee49e46b778087f9706bf8801e533329662010d706942a61adffaa70d97870a1c6866f8af801a134b1cdbf6ad0c8e0b178586206422495c8e95d24f89c25235fe6512b0c72740963a7ae03e55def1058c618e6ff2a211aa7dba24ce0da5fc436660c1495545815e301974a034f26fca6a61728
-- 070:41092dea491a12a4eb19219d32b88d11539b50682f85aa0485a180d2e6dc6dd9de692cd324532cc57c41e028c85de8cee848ac9014fbe95a2c1c090c9b2ebe36e485a8c70a3caec15e7551054f653ce24feef082322db4d76ecd5a5300064cc7a0720548d7baa011b38ac28016c4fb596b17ecd5136824157dac345f6cbaf755e086ce5ad92e80a408d6701e5e02d131b0c9ed3b1f854908caf42a20efd4cceb41d7ad71794c3f6602942ef2b1697a0bde5252d905d9270c9f605f9f249bf535b6c0c956b0156af55310f07cc8262bc90ab3f266f07c8d8042ec3033e9c2223cbc6f7199d0429ed62ced322d076a2263
-- 071:2208dd95754678f5ccb5043b125b27dbcd90d43998e7ec17b687301144f0c2369b276cc0a3f9163a430dfb6f9bb21e03a5186172cbc98094acdd6114e599efddf93279b18b5b809b1ff0e04895c4cb079aa8c3203f213e3c33e977a06c31d7ff329dc62a46d6030371c63fe02f2d49b8ba84f9ab82bf3316b3e767a6367e87de21c82b65e85aeb2fa0ceb8f34553aca5cbd953a5a76cb63f3ee850159c85db1c62c16746dedb471e964bec62d5a7d029830333f462aeb99b13afa1743bd624eddbed4ab2366f596b67a7f579cd1af3d6c22263dafdb3ba24405270400598533969cb390a6ca54620ffa165930ccc208f
-- 072:c4c9ef9db7fff411668ffd74a2dd1bb9f04a976bedff1ddd68279a0caa8685eafecd7b2db159d90062912540fd69e4477ecea11390ff90ddfa5034220d3e7a40e265715f3c1b87e074ce3edb7463de7e2097dcad42833524a63c269ecf1d645f38acd77a436c27e4fb2245bc067c40ad1b648aab6cb7bc521ea63cfa58c98f767f277bc1d1acff90f6e856e062c5cbe23fdd3adfffd064dfc6824c7e285f1497360e4b18d5748480474e73dfa08afee222917755d4004a93f611aa751f3650ddd995db6e3e326a1244309d1811ca8db7555b24c24904baf796904e1a7d971805206fabfbf93f20a058daf3919e3251cb
-- 073:03a21cbddc48a14661d408eb81325463ae7a1bf331551957fcef5082fde3eb43e9679a0f07596775607c07fb50be726b356beb4e7034eb24dcbcf13e7e539b24ea81800b76605d25b434e63f67294797a60c4bc5d8fd1f05a52c29e7059f6d723193cd6825e4266042e96af4769ea571c53ac28437e04d147db325654857666efc55ff050359362ed1d8a76f1894343809772ebd649f5a20ffbb630baaf4c673e7a81157767786d90ffbc82aa8d90eb053b19a296bdae1ef58f9e1614e4fab3f0fbfe47c5eec68d9a834fb63efcad02152b6bd415c57c0c8bdce7788499f1282e15a8180f2c2815a4e647070845469b5
-- 074:e4c66da649d12bc12512c5781da8e383e009ab1f3d991d7548e69ce1a3c12e5d11603a135a56f3768332e6d8aff2115de2f078a2ca4898ef13e1c79fa85c5f6160bcd77b3a56e2db03540530a8d53c51331ad0da1459d10b4fa66c743ef74f748037a76c04436f2ba34a2b84055f48a41a2b57756c045668e5fbf537fd63c4be694cb9863017ad5d69b8492f74db991baad93937a0185095fa2b4326eef719791ccf528b8576b2bf3e9d21864cb72c7bffd067ee6fe2c3f525180a0dc6be3df89aad90c6e496d9a5ec007d4cb2ee6641a8a5466569be5c6dc53e93b25048abaca933b07a70e92d131d6ee8fafd719b63
-- 075:d74dadaabdb37f5f3b8bad14e134bbc4e9cd2afa8c9e164a635ebc2c7b4311d4ac25f1758ce7882c88d3062101ca9f176790c09bf56ce942214c53dddb1a7a80585c42004716c1dd84aa3182904086e6260ce294416b4c6a0437d60079e0ea6c334546ddf6b06c9f8c5d6cf7bf15fc7baf4211b34ad2f1968aed7f8db98ac784720bb03643f33b885bf72f73ce81e12b52546885bc43fe861f348e861c892005113ad139cac192ea1110a197105f49aaceb5c059bf1c0a22172f6b90008e05496f79f11c747a8838081c4bd4573af5c04fd8e26dfe6df655b791e566d6b96f685e3d74a9545e06a6bce3880a41a09b3f
-- 076:e05296b8f0054d97ebfb7bb68b7507dd225f1a5884e6b6fa93151ded851c11e472cb5c36234817f1056ce90d1cfee3c98924c961ad021bf44728a6c0a459e59a8ec13d168963d3d1e4a143ad76adb2a38cd40683b8e8b6c244e16b0349b6ff847c72fb880d3b8a8ccbdaa71ec2de9f98e39db7177c2a57ab65bc452c6b6806643d4b0730cac4bca4782361190f8302c13e6578388ee67dc48c9173f0c235aee4e91db610cb613a0f612aab442fa37b68637a6f1c5bf84cca742a1e22ce9074424cd433bdf840178c804a16cf1c7bcb128f2e68fab2ee58142167ceb55231c2e0350b110ff9ba1c471ac5bb779bb404ee
-- 077:1f433fb39dee362824c27c67a8e442edaac32880a8c791728cf61d55c7680f1da1dad0f1e70db5d90db26cd92a776690cde3d298ece21be68d3324afe2fc37195d056a5b9c5c67f8020fc0aceb4c7d83c654a7d3116d8a6f3089e56dda0f6b50c05ad0aa5894d5ade92e3d756f3b0f509663e098c2745a683724fd2f6ff3605fe4ba73ecd4667d287ac5bdd0ec1861e0ecf50d4e485dae16b25b62a6248277b43825f6f816571d1094bb527c7f4db02d430db07ed0c006b62da1afa19cd1a8114e364e9b528b78a8d5a736fc2c245ff36d343f1f53188da00055c1bb55f1fb900a60bcfd281276aca806ff0c2cfce898
-- 078:081ddebda1264e2c5c4e7503133213f5faafa346b33e8ef47b21928f5b0816331e2c00b9b5b3f14ff946bedcf4a2692318ed65790aaab100572b7aba11f9ce012acba8a58be27a80e773fa08e71c45b8af941d76110a509f9bb0a240852011f9b2d5eb1637ac8d67c8718592b9f89feefef0aaf9e3aac7647b748ae33de64d4688640b6098c8389ae4b6a3365ea10f8a10287457a7aee87fbf3314d40f49b86419443f3b55ab6ef14d1b1d2028a282abc321841e559a8e7938523cb471b6307e9a3f7f17cd6b2ec2016b453ff84db2df1ae778447a9bbede581d4d15b433b475d4875ec0ff28500523a096ff0e19f179
-- 079:06421186b14697a5e1666d63c38d6d4c5387c0f3ae693b97ef63c66b42eea3ed8285eb7bee8b095eb5362b0d5c62b64975424b7f34879b74de0b42a08444b10f7d11a359f3314b017a0978447f188d185d9c51b60d20aaa7b702daef708e290fd50a92b245129726bd4ef80676440e4b32bc30ac2df827d53f89d257371cc500b6f3222e328b3dd7e522006d1c8ce3a826f62de413077651925d99e239af4addb5b17ed4aa5b1bebc41b828eb067254f3eb505a917947b4f829dc6add28f8d7e485da7acce284caf3d80f303af4e700a1faec255ef53d50f8167d79d6a2f769f527cc9d0dc646110114c3a465386ed8b
-- 080:53d9cdbd8906f5a58e3c3de2e112400a61bc27cccabe8913c32813d99dbc391fa9623205666f76a53502c5bafa6e3aecf7a90a425f7dae7c4cf3512b062a48fc5f6e6ca1b47dccb4227fec1b1a04531eb9de0b9e915aac380242a6a297fd7140d15640356694b1392c7948f4abaa2bc2ff710b70d01da431b7951d6d3eae53403e69c4d45275fa4a389c870d82e8ea07632b1de423bb09391e5370082a9f5ce3982389df4b4747740bf38d43e6a5602ddd0146854d2efa7fff7a5b31296a00cfcb0799c6c70e3b88a4a92816fd6e5813747f8f88523853abe92ac89fbf63b44c289db271fe33cb8dcfeb4d6cc293bbae
-- 081:2a97d80bbcd7ea47eaf038081dfce5e9635011aa6cf96fa78f83a6a407a4a23901ee2616c5321d2e497359d453802992a3fec16c3536a4809e1006d2fc85220d0e928f5a554468bd17aa90da2578eeef75aa06b9c102daba55a609e5623097c49f3a774abf1a21709dada988420ccaab4fa41c885c8c9dcb5803bfd0f7e1670e2b2036c958d9e1b2b501595db42e1326103eba5d42bf5462e05e705ed94e0fef30eab3b37cee27386ac8fa803a44568517c1366f20eb8cae0fb3324513a395e20930651e10fdf3fb483f2b4959f116305b46f762ea2759978498d39be893e630524a7cc625f075c3ebc405a41ca75114
-- 082:beca14d7bf8276da35686eefa06bf2145156ab550c2a1fb4f5fe7cfd52a3c084ac34851c3e9b6ee78c7528dc101c745d65d720187be7ed435ae127a6f8412faf969fc9f9449236b86151928ff5626ef9467d89bdfcb5c8fc9be318f2664fd981a838638d3609607e3803e78b3f43406a8e886f2765fb4906a5e3943e809fa412f447316968fb148d9968fe68b1426edebb475f2f10095b81154dd9e65e15749f1f4ab0ee34cf2ccb6e90853ee98a80890eb3b98b26705f05a703c75922d2a501421a3a3cf29e86648553fd980a485b98846c2baff75f176a81c7a168589fe668cceaf86aa5d8480c2b75ce0fa635deeb
-- 083:686d177d3037d4ead7b7ffa5e725b263da9fe5e0f5786bedc0e3d6be39d0256de7089775e626ea73d1aeb8962bdb1fbfe6a31e79414b6f6495e3be64202d152b0b19d4e3c340d88c05c430e27f8098c12223872147f9508f218c36a95c6c4f89cbc3b4100b546bdff1a5a92867b53e77fdad77742b0306b7d42508c3d9f87031fdf28655ce6e47e00b99b16da599d5d8cc5edf7998ff5efe00c05ff409b881bb166845ba61910a785600f29decee2484a672a39498070a4effa28dea42f291a3b7e441255f8b1d32b12f8e0e492bf3a0be6a96e12adc3879942d4d3e535ffd2303aaa58bb23b67eaa6d1b5670578fa0a
-- 084:5ed09b901fbf1c2f0ee6f8e25eb14fc65aad8a4b4da2e0b9244bee294f4a2a58b5ab376166310e31a82b1a9ec9a4bdc754b44c87e8d81f2f79e3852676d7474340e7abc2a49a36921ac22870dda8ad411c5de3fa2cf1b17fd4a2405b48beef81689459d0a59db82049e3e6a38f2a2a392a8a85dd6d9938846f11dc332eb0c3d3acbffdbe8bf0f7977f42611aa499c50426f291f725952903ce4fc73d37dde4d3b58a7e756dbe494d769e537e5ff4e5b836a1dd27e3a70e44f4a2e4361f4af08edc6da6278c261c6770a29d0489eb5c95d7a5b6c30a3b11624fe5cb2389e08d07f20c408d72721a6af3ce2665ac72e95d
-- 085:187abb2f120a81db9efb881f158317ce8a8cfe1b28b0b8f1a271729021fd7bdd4fa4b6ae34a89de3620788fe54f3e64fc84a3bb38c9212a412a030108c00a829834c0febf649836053d7b28bd98548f3920157f1e15e8bf6401648056d9dea9512bf4f51cc2c5b41c26cf652bdc68e39848e3455c5448e36a0661004f948ad0b8b64e4934464e7f96f679299e22df520b9a4dad04965b81564402bbf4a5dca54a43a00e86429cc3e4b9b016f0bcab3fc568fb25244cfbcb49e234f572db5d71260e9fb0a7da07366279f51d48adfa56365cc3bbd4890ea15e3e4eecc3548a6be1d4ca703e37c8cdb40014834607aa240
-- 086:f009176f0840a3ff79ecb7f8263528d0f86618ad12a8e621c989d7441673be887c27af7928404c4fef3a7b1a573d8acd3edaa5ddd28b88c4ae16a6d528e2f2ad8d4f7ced3a7b2688d548cb78e7b9f5c81bce2a5457252a46b4bdf73c9b2324ffc9309b26cd948b2b653c4a86e271632b29a295d3e916065338a141ff9e5abfb74cd47949cfd023ea0dd9b8b9f712deb49e20fb01708981877030301f4d27eed959db6ee5e8ce8bb8ba5687ae172b709f6b7c62ea8f6b740b0ade445fd8652525869842732d944543bf95511a77bfdeaf7bc1cae0e6defe5acfd96d7410b40e7e2e8e4136adc760ad4fbb84e31c449be8
-- 087:75c9e9556386bb43c44ac8fda13b116e354e47eafa69102b0518dc6e02b3468eea328b6e2cad9a40bfac762fd1a7671e884e4f4af7f9a9e87b3457cb4e0f1d39fa9540cf11be786b168ddaedcfbb3dbc006c95c1b2d71996ac45b9123a71fa92747d4e32ff22c8824ab175b2ceabe37bef7119a2e363f1a4286d9ac8b53680d009ca88f3ec2eb97617c317bf91e799bb0450f23fe660802b14b4699aa1101a56714eb87c82cffb97f2d65446488fb81322a78dda6ae353391d49014bfe0fc7db960ec33b61e77a0afa4dae191628eba73771c85fc90bfad19b254b45ed35171c0eb6ff19893b2698c9b2a905c9891990
-- 088:46689f6f05a44514e9deeea618ffd1410a44abe1b68181dec9be5c7fb4514f79b8b6b94129002158fb6b1204fc4d7f915bf8d0b8db5e83f70a4259e9bdbe75c12f5655196802c97667c3d3dfabd6e8604b0c41873531cb0a45bfaed228528b837d2eb580f323549acfe9a4cfa6bc415f861a5320b272b5fea911b10c539de4198258549b7824b42080a2231b76e9bd2041cca1191e279e34ae6a2ce728c2ccb798603d84cd2b0f2084819571c0c9798f1238c9f368c79af9974767c5374e80dc9c18a09302bddd2d9fb2303815f277b7cc5c0b6ab84482ba7503f1d206f79eb074f2ab7942328e77ff4f898ecb526900
-- 089:ae1a9fe486098e1ec6687289e4392b7e98f7d87063f0be7f88106a5c73476b6a52ea8cd34f0e4c0ec2e2d317783b80033f04d7e85909307e713cbcf5d28cdabe217dad0c66936f2990376aac3610287a11b5a7b7394b7700ccecef92d1f829303cdc79cdcc2e5dcad439d33638636c2b7859c7440101c4c30fb0cb83452edbaa0da73cd1733b2eef7b6453d59bf5645262d3c0c2e32df63a6b4fe9fdd47ef50fb5dd57b9674f87fcd9e63c01ee3443fa3ad51930d7b46eea654e64dc8b7a15f03bcc84cea704a1e828821f18ca2c7df9d3d62bf926e34192c95c6be1c73bf0e4eb4de1ce4a3d4dde223ecfae7f69f871
-- 090:a317cfbae926a7d7ce140ddc42b6743920ad0caaaa00b17905843bd5bcaaf211b36df03d60527c75f977baebf8146449bfe07a303ef2688ee610289b55beabd59219eb3b1c854f7767182ddf6ef43e16da8d2267df372959c3fc4ee1ff45c6efb11f0645b2db913039472a695202b037f8b464c9eb4d83f7502733b22dbfa55e7e235343bce533d5e23d69e4d301a7b76925e643829cddb74fe48532066ecedf0fd399bef0be4a6c06625c31b5de193f94aed756e2d83a19879b15af4cddf6a1e1f7221a68f39bcc5d5d5452517e20340a2837f4afddeb327d67be27d283630279cbbdfa6688d02a7649cb68c12f62a7
-- 091:19234d95d271836be213193ff31c8aada0936be02f2ca3c9792b016f43e6c74ea76b2a2b81de15140a5cbd114ef3ba4081f39d06140113c6c39602f11ba122d426a11cf57a5bb7631fe5f89860a757797d66b45c70ad186bb474e0e8c40c03d96ead137a5c02d7d6dbad0814d822849d20cf8f45dd39a2b932b9862c96edeee21f8b779be32290ca68c9168360f5be9e244f3aabdd2f25dd6b22936668014c246c79482a1ae0c7b8dce61231a5339c8f9583bcd4229b4d114ce659f66be4a96da20728ee0a813788a4cebc4eb40293c7ae124b414efb440d8beb4cc3df87114f48b164b60386765aea5f9035aff6f3b7
-- 092:e376c6247b70ad9f76410893e645e110052ab7b382466f7bcec6fb6b1bdf6dfe85a5f0b3e1968d044dd21620d84ddf2bc437151144c2730b65db98bd0e81c570d79e456e2c946e220f103692d0d922f520431554b4596e1b725a01ea54aeea5686714f6ba3e87c45dff5e4e04732d558c36aa8ca6160838fae31599854e23bcb5a66cc098da1814790e85f8beac7d54354ccfc031da2cad5f16d88a692ae219e77877f33da9331ea780eb1803aa05ec2c098c73a81a288e2393829829b0a5ac536851a52b1750c3b5203217a9be668086633a46dd6e86f3b4471512153247392dec08d1578ec7663699ba88ec6cc0ff4
-- 093:1b4a595992116ed84c175935e29d0ea5b3030fe515bb6338cea14a99218c70b9a43e04bacd310da9c94eb4522fcc1ed52122950a0b780aa1b0f55c5a1212c54e4a55713e351587e95412e57a1349f92772ea248f29c81fb019efdb85989426e4512961b40ff7d658fa67eaf8de294cddea2f585c794384cff2d27c9f040190dbb97e2aeb4e6129d00bdbaf931ab9cf55f382848addc769876e28118044582cc68f3b093091fb999a1577bc17667fb126fc918d805cc96fbd97dd6b97b79c3ab15582b87c1b8e31488bc495c5fa29e8d783e3849751cbaa144dc5b45ebe36195c97cc85e2be914526754c28f5f57fe8bc
-- 094:003abac1b20e53229a73b59cc8ecf5544cd2a004e04272644abaec018c0bb07a07b7b6ca7d8e38fed6ed41ca21eaf0306a2882c754a7880b627f968b23758790b8e9cdc4a32984dfb0512b1590af80bdaf38fc0f7e623fd4866c80a3543f3702e46a7d552611db6b10f16e3246c35163b92dad359adce10263a3adc946042680ca67949015fb8d58454f690854097013c4a9cb1e9d12ce9274651b6b475443f0caebe011a376f6a18875145c51e842a503f95a65718392daae906a33004a5982df0f339ae5a4bd584330737f0ecb0e8bc5bbdde7af2a4434a6f5dfb54b0595204a1efd04b130749414a4f7f35a77cecb
-- 095:a8f35c63b264c979fa7b87abf7345fca45b070cbb39499982332d1b672764372a1b3c7fb0ad54f59f649c9e5adff3fb611bda37a3d2761e471941dfbccc8701ed97dc9eb87a075fb32595a93e293f4785dd94e316b63ee67df2a3f778cdaa4a36562c827a401ab82763df524ba4f0bb070f2f98bed6fa0f8a0c61d0ddf5262d6682a8b7fb1f77f030efdf9e8a6bd2f3397e82764d5c95470a85dd8f6d3d19a935c2f43e9852961581c8c2905ab9f1ae482e4106722bda717f21e4e931a55fc677755cf6fb43850a1a8c0ec627452521ea767d732c486ec38d85ee371955b4fa4c42d22ceea26d9cd36cece58698ec167
-- 096:094e259586f4349bdb8f01287812b5616d4f7905aae01803859a60dbde3a6d38a324e973d6e46220e3d52a3fcd2868daa43c9b6a57329b7425d6702acfc37be371968986d778c5fc7562292002523bfb074084cf1846c5e6906ffbaf01a01cb759609190a84967791e62cbc1639db5895d3ca13a1ae25d2862246562705e080fc0e4b28c4caac1223d2fc76753858d9e32fe6e95e275e5f3640cd1868e8d035fed94e56f91c362f6d8669bb5d2c21c6d6e493bd2815a6bb260e9c3cfa3980061a498f3a8038f88215d581dca347ccb92c7d11e9e4d48deb157c0706a32792bb8af6f026fa25305a0e0e44df9d8ad8d5d
-- 097:85bb42a6d5834a03a374911440699b617ef7a002c8588ca9b083c3d20c35c8ea14011e110b9d8fdd47c9de4795149373c2fc01792fe26135aa7022210431cc07de8b939b0b10caf8f1aae6335269da5ea9996f8ab2e95c211bf372a81299294f4f027109a644863a731cad1708b5129fd60657bca4f13f51c2d9e86d4ccac7c6d7c326e2d95fa1cd83ef83e6990436a5fd72fd3c43db293328916dba73b3bdca50153b1de1f2beae801e3e379625bc745de03f4f35588f136eaa236f2e161a231f0019a70d0b9be1bd7c4ff8dcca943ce2c67bc7c99dc7f43b2583519e130698cc4cce99ae4d3550f9f05262f1452454
-- 098:529fe9f7901bbd98d9c09d8dae26858f99c338ee331c240781861006fb080d0c579d0e70f1820968dc5d45cb567ca6c271a34d01cec8fa881addecb3014ca08317f19338efaab9f6be7e43f819ade6b41009de464c2e30b42aaf7bf985af8755e0aa4ed69ba9554c300c8ae04d6cf8bb326ec3f6e767123bea7545532d45bea284dfe729507474a4d8b4495e5ba94a04727c6d463df2e889692fa264b740dff50fb10695bc1565051bdf286d1cbda6bf4c725203d67ef67b18be6cc93cbbf2e22a8093cb9953b74a1fc4e78463b57576191243ce3780151634da8ca240043559d3cf6a0d79f3c4e5be69f1a64d5db65c
-- 099:009f570b6fa4e2ce6b230531da10077e8c1c7feb0c83565ca7f5fc3d2f5c8bf9ba496ecf8d1907a6688f2dcb90b6d6b3e72d81655f3928791eacba956a0799afdafa23de8782f4f5a2b03d55171df49f58eab400b8e9e22abe90df9c7538c171fc7c229e97b5275eccb20a505c0bcc799866e9e3a28380fecce0b0e1f1ba04d9788fc3a345d923c7745758f1664864fc2cbce45a52c34e6cdef0e865883a2bed8266fd765f5719cf5a53edbece994e3ca3e48aa7a16f6d29d9480a85e95616552c7b1fe65a3a180ca3ce35de53dd9e2dace0f85933e4e9e51e5d608138b1c993eb9dc1b7d3aa0c58fb15d670c1d4c0aa
-- 100:ceca18abccde48f59bcf0ad9dc1380ee8f81daf0336f3e518bab4e43b8ae6aac9212dd99a1475f0759a097a0e756e10bc14b6f4c348c5e15d10de0dcc4289895c5eccb6f570e89434a2791ea04f92bf521677925c236563622a1648e64b94a93278a1af23e86e11ca10c88fdabf6c0aae3dab440734ce4587cfa89da909323f3303862daf6645eb40ef9fd32d2a59306c69d2738a6d153bdddaf2dd59cb673212dad0aa62386c673aebc9bc1ac78e67ff54bf6c81114b74f3235b24b3d2f2eaccc9a14988df76cc1512d770671f8e1bfe30183a3384532964b3c1c6f235073e059d2e42ebc24bd866a1ca20db88d1e96
-- 101:5b7402d10a856a70e7bd8d81a97dd7ed220446a9af2e990d5184d89db92fcc978752dd1e671a3fe563f46a869371e9da32e0619b03666e7d083b02acd871697cd80000a03492a6a5835fe78dfe05afbee35579badba60475adf04cb5734f65bc24d26a14e61213c45aa97d847eeac1843316243ac1f1a2e17f673658e6b10defa575e1ffe1c711093863ce0ae23cd208607b41e207f59410ecd06d62cadc54ff805f6f7ac9823762878ef2955429eb7e144bb71ba9537347c9f4434b77ac37a06c879da29395d50d77b28036d0e3fe531ae902e3ab7c55dc9d8a5df5cd11a0447da522b0239b04dd3326db44aff986ff
-- 102:d6ac62520299511aac7b75bb5f5f9fdae9375817f65b31d17935f78a594b097e77ffabfc5e00a3327fe2280e8d2cd1ef213b9fa9866f37251951e0ae1b47e827399a55212c6ccc0abbb625c4861f7a725b9cc30543f6ac7eeb050703dd0468775010e8bb3564622bf1b674129b66ba5535b1b1ef8e4f899df09396c8bc6419da9ec52b8e9d9c9b6863ebcc4d542d559e59c606fa3a2725e05b16c1879d56b17863ca0d16b653cbb01d0a5cf5b5ab236185e6af8bd1adb0e72206752bf37c3e57f93f8e0515a39f257a89c878c00cb65fa989cf30a25ca84f8a5302a0133cc00fda0d00f53bbce81d4361a54f6ebe22d2
-- 103:c3e33f6f06714b06c5b44e7689d2bf71751fe69c3201d4ac93e098c167addc1b30927cd54a430a7d1ddd2105245bf41468eeb3bec2a545f973cb3992cd105988f1d508d80c71303f34c9a0304c2c7a99052a15ba8ac6d295a8bc7e09c6981640f50782088dff147bcad0389dd548fb6e44fd6e193113ee7334485746bc6a087d26210e79aba6dbfde690f10566ab2508184a55bf976b0f6dbe31729c88d01f5ed6e11d4b1e496692a888072247ae6a15b968b4027ea7751b03b0eef90ee137469a255c0fa0ca14265ce78913f30b090c14393a27cf030e3fbcb4beec66dfb329d8c54a735efcb7cd588503f5978c1829
-- 104:c507f149e873e832b3c8daa2450603c3808d6757486e2e2053fc3881c4f40eaebfe7c8055b1f27958559330826c7ec60bf656f5acd398388926c6791bc30021ec49c884ebfe5b78a2986e06c31b2514ec18995159f7e0791afa67c88dae1bdeff5b45d91b16e0c488b4e678c182d3f52cf5256db88e46b90421afdd1c55475ee2feff43cdf0964e73f1474279c5c31042484b7af248470816b52e2bdca0be34491d39ce96f094a9e962f7e15f176de7958df6a0d31f973b56dcf0a929b2c4283f3c303cd03fad207bb2dc5edc0785ee58bb9f54532b4f083ca544494bc5276a26e4de770f4d8e40010d429bba31517fd
-- 105:2d3c06b26ad0ed3b4db0103bc2ca2fbd961ec6c4f56ba917948eb0a818593c0886445e5a89a6a266231aedaf4740112a9c1591bdf1b6fb3794d6a1537f08c689f3712f8eb816941ef7adfcf71174be5a7cb0f65d3957baab44ce72174ed093323681e3ffad5a597933f2f7bc0e2083c9eafa95de9eb39dc834f9d64ce8f1d4c1f04bfb81de1eeace0cf3c8e06a0e892a5fe84ced9836764a542c48a0c38e42b2291a4d22b5fa4828baf301e42353f61228fea172c34b16c5e15aca78ae090e1f21e3004fd332a1ef6169169c289b2b1d7b7462843aea3d0c9b9f8ac6ffe0ca2c62cca45e89b83b0132a850f74a98b207
-- 106:0040dcc1d15ddca1e8d1b9a5a5963870ce1bb090db5ff285ed639977a155ab9d4105e837ed6f9eccd62f7043049fff71b40d6cd5357c5b83ddf3f5d2b83dbf69c0c3bba56ef93d5bb1d41279cc0fe7fa84804dd27a7c9d7b89c0aee7d084d9a503791c13982cff836519b8787b4cca9938c25abe4088cc14e3287d0e89d73cd69281028b9554063693471bc32fede1b2a70e744f5d6c993f337d8bfabd5c3fca833d8f7424f376d96484405aa92afa0e5cacc7d4fc8343ad32624f7d5825016292339cfff13d3bd17f3fe2d54dd7f1698e7e964ae399ecd386a1495817d5ef63b5c3c4dd9af8dc6131415b0b040fc7f0
-- 107:33b0ab051720853d84bf3d077693e75c21cd2b3d981117df974e351f156f70b18f73ab0ef66ee5c0f979384cf122e06fd2eff768dc378f10619ec75754addf620dfe529f780623c6647d1135cac507bfb6338398eb0285ac9827f0b0f422d8d2da763bc797112bbc8d88f35666f46a2711415843e4c7af10205adcf2dd12fa048cbd34990261e86616f1c7dd7c3807f80a15edf01393cc411fa5276a86e837942ed8a9fa35e8a2824c95b44ee926ec2b6d1b40d1cc704ab55dbd0cd8d78cbef7f1b212c4c4b84925f969836f1581e4cdbfd18d9dc51d44a94a12647e054a29db037a748b9d2b1fa048e0410a16040ac0
-- 108:3da22b4a4aded3a1f1e691230eccbe76df02f734bc2345bdc2f15806bf12e4f4569b10a8bd7176b01a165e250e658f106b13b22d85eb1d2e8cf3b2212c8dfb6f54f2b4d88703eb99aaafa60016b67fb988f637479e76df13135229d5746274ae69cb0aa6b90fd57597db54ff6bfc03a94ebb3bd8d5b03fe9921f1a0cf6eb33a9f2d17f8c0bf8e9bacb4376cb7d4bbf028eb730e4a553605eb41b6641400b97ef5c2f6a91e091cd5144480b5953ca4d1d8873348fc4259e7f3837820ee40b241897da1fc8fd2d72f0d8345c8af073a9358c0e25c00a87d000abe1e52c69f1a2f4f350de9fb911c956f8879a887c4d26af
-- 109:94f0fa46b305f474dc32c687742267e2b9bd5c844f8a28548cd257f3cc9d7736c951b7335441daced845b4660869ee7d8f3672341ce7e2ee8ffcd35a0ffa082c31f915624a2e980646de5772cacb41c623a8d5565f7d45302619f8c9b964f2abd1ec579aba9969762e7421f156331687467454bc74d72a83005809fdd8f9a1f399fbd81bc8fc67e7b8db971e3e26f346ea0e2dec9a93fdc4b7e2783f055f1df4283b3aa21985c7630666ddcaa4d9efbcd9706afd658b245160167c7be65d1018479897a79c9710d385d917780746599823be7144451a27731d884236ad33a0d91062c83c5ae6bd9126f39c0169be2aed
-- 110:f35a6af4ee66b91ec92d57fe1718a450e822907903bf6e7c26fcbdfd306e0d26126dd49de02fc59e01d52f0c1acc10987e40c8f6f3d1b0f9b3d60bc00044bab51ec0d923c9f0799ca837d8b86058ac6dd20325eae80c1a83d69385a5b510c4da73e68d0970ef374086b63ea7bf45071f1453be5f8b70b636d564e4aef546116217b2d03d586d540f468f7ab8de03fcc5cbf5fd6d0255545dfec98d9edfdd221a88fc29fbf82a4704a6370d5865c550b5d7ffeb443eea66fa81a14cca2a2942e5d38d36f5213e2cf8a32f288df3bc044b80c7fa9f47cf1bf05131172b3726e0a80be47ca4f521bf0ff9095d8db42aab5a
-- 111:a4ecb50c504bbac7c2ec59703180f60ee4157455a102921ebf17912f4685a8a0eda1ae4a77fa71ed79b5ec5dc8711ad62effed987398e3e98588484bd0bd67bff3c6e9bbde97f5756d15357954310859df3059c8c29f2d338751d861576909a2e72984f8043cdc5de4b954ed43f4c0a2a2dfb5b387e3c7c276c18260dd95ec432e651d6b8c3ddcfefd9123363347b4ce2ac39a644870363266f24fbb9f681f88671f1c2a66c7f1fc4d800f46ab6a620cbdd73b13b4d3158efe7172a7f7e5496b764b4e18106a2a06601dd4df5e58629c5fc61ae5c7bba7e0f092d3d7caf950e7807d2aa601e3652379ecc029dee3cc77
-- 112:e3bb2a0460108ba260b821b839678ced70a038d404935d77e83b7505e5a088282e970783f98a4b7951ac38c316b5a36b58009c0e147e0b9c2f3654c421b80ce2b8f009fbcc892ca073879f0d78fec9a306c3faf0dd6df8a2b764d414c750d51838edae0a132576de5372d9ca165031d1175cc11764c737468fc4fe0c2295558aae65ff18a5b62420e8a8b34025ef0a8279e765c269cea66e937927bb09be2af83148fbb36e96fffdb07b9cdf793eb2798095fef002d7fc36cde8c8932bcac2312e6dbb29aa3ee2b1416ea290646fbe55f4d548707811274f6d2ac946eb6291b362dd6f57b7222a77acd539b06adbd3e2
-- 113:a8992ea0c1b882496173cff56453e7f8e5aa9cef149e3e134d9729566f2839daa0976df19e3ccd510fe01dcd8bb1e88d2dc7c1ae9a16dea969ab4a23a2f21338b675764fcd7f9e74eb4bf64d551be5b191e0d1056574d0f773024b99b4ceba503522e0a270a04cabda8efa95282d913db766817a7b30ff693040e0b567bb91f5183dd7cfb2ec3da4160d7059294da5eddd247e40c4c28eb50359905aa3e20d12b83d3f307220bb7908ba8f1089dff5f1a27cc3965d9f1e198c6d95a3314d945f24b62f324a592e308196765a0c3b47da8cb2a7704ca654b467faabe2728106a4a28a520ac7ae8dfb499e38380a480e87
-- 114:cc3a3f8a63575975ce903f060178aac10256b617b1040cb7c01c73d895eb57620a3d537cb639ee010ebd5941a133a28565873cf1464c4001d6cd9e04128640579f3ff1dbe4dcb16ef47d3ff695cdbd3f6e2de55cdd7122fcf86a8d88f50fc168c0d3a991d3e5c5576266169b4846a3d90939f0af203538203e5113d7e840883a4c5fa5f0c4379beb25c607afd770c91531b0d0e9c781c344a60cfea6855b10cd6f5cde16848a454b4fe05007e9e02bc5fd9b5f2549c16c89c0675fb1bd42d9d6cce9e8152421f2dd1cdff816042948257a64873cdfd38a6046c5f9b7a73f5d8194c5fd9e78d1fb51574b1d50556ea420
-- 115:5b75457d1e59c4c0ec33c6aeabc5a01e7c1a090c60f35abe827f33449a1bc1e8e2e81c66f955577de9a68f920cdc090f802e4ba7459d7d91a9079eb29728f570ef09e554e51352e0db1828e41f0b6194e5836b0fe77d605d1ed79673f05590bc9d9694a2821ca41dee8c9ee9f0a446481259ea8f5b616091748538f67a11d748ebe83d241aa40175af977f3eefa08093f25dc8f480715c478693838cc736d0954944506d9d8d9075bfcd0e6a830f450557501e00ad9776f5bd76755e973d107444d7a23598ecf0540fa8227a740c315bc45f4e623a81f056d1453e4bbeb78bb6043cfe1b489a36ece11751f8fcc53bf2
-- 116:9eb9777035a82075e9863b39617fbcd26f93b9d7cef838013c9cb061dd14823cb20645317c70a8e90c362b7c906174bd21d5bd604b2795d7e6f03af38111049c32c76a7890d43e6d8d03360bfa8727e24829c82243f6c7412bf057725302e8b95c2d4c8c3f90c31ec74cbf1573d72f3e64734c4d6489a22bb8ce35f3e0877d858b0b4cf588d3d53dabda0a52667b80ac5c49f16d2016440483a1ba3c8cb88b469d02591f971f77d9f1ca22e3eaf49b92984f3e6e9f3ad50f75cf706ef6bfd9aa128fa067ba69b8a0118cba0327783b01c4c9a9e3a6f49658b707ebc5ccb7ca4923893903972311c9ea0aa4bc8a947b1c
-- 117:ab5b909415d72d06c9ae210a7da35ea7c818ee2ec4047cfa1c977402712bde8ae63b06e6283bc87a67a954c1ad4f69782f75348d4146a65d36c8d1b0457ac0f486f6d2b862e39ec89aaf7f76d70bd36a688a346ad2acd539a8f69f7a78229dc73beabd670eecc13e31c32a85d6455b95139d1cd13ced1e0ca8037ee3b1242c6e0be8223f87b41ababf7f0993d6259698282f2c1f9a95f91848a1a61ff4c728b9a5a42c0d6af47311976eb0ed20d751ef4ba3e9b7dd003ca6083911e0d32f90637afd50ec52bfcc1c5a7a9dd33e2e565c2f35afb0c97ae199c1fbe23e511c648497700d96faa8f090c5b954d0f6a7a0db
-- 118:e46d904d0ba4c57b4ab4f9a93a24b2cf6a0d77ad92023602762fb4b7464417aefd1c33d5267cbc9356a043727046809a63bced11e2131581e4122fad40513149c09e152a243a0c66d6de3695a9fdf9d37ea440f4ca5903fe2d2e3763e9423424b0abab01d153c76c91cb8536991e4338f49be4f73b57b67a9803273631d37ec10475c411060463e7cd5fb6b506ad98c695e5cf47591fc63dfba13faf5fa1e827a2ad0e4e1a968fe571fe1918fa00ef0410eceaeaf70fd9bdb2712f5ad65838eee09f2734ebfd2f9e1f1661f4f0651bad69b91178f722ac3a39d3217341cdf14d1af9e26455e1d12d074ee16519483f14
-- 119:1f369d31b0f15da3a11a89b36b3e9dbcb327e65ea908989e4d690cc92b24e78e28bd8408c1610046a57ac5c5ac33a8e94a81b7cc896d12bb9c078649a92a276fc769a43c35e01bb48876fe73a0153fb49fae0894d52441a9373badab400475c65dff3214c1a995769f54dade16a0bb0265b2e5d4c3d71c43cb1dce194e49795e25638f30e6f705365eecf741a38007b0bedf3e926d6d2d9211958dc4156135ad2567edee02f1f176058c7b6f8f45b112ed2466520ad6acd95ec6ad22080a61eec7fccdf7641ef5788f984103f2aec91df69972f000e4d80598e63416c87dd67e01ac82ee6e9c45a40a325db19d1e7833
-- 120:f319310f51ba28c99cab0c0d366f02584dea357b2dac02c977075c63ef767726791b8550fb5ebfabc740b5ee12b3a09957ffadaeddabd2fb405ce85b4b298c01fc454bef5226284f9d2d8247fa281f0e1f93a828f7068b8341f7451ff590cbabadeb6fe7b4d5408a2f06a3e25b7f83b8fa48bea7520da801f946ca8e3192684681a52a10784c891536e1eb535c8960b88e3593e279dbf0c6d3c984cb30de7cd0b2e13291425ed7505bebc20e9d4ef07245d00e5e19f82f51707f8d9d3c8ba441084cd7c13d47b19fc653cbd57876c62bfc4abe3e9487fa4ca54c9ed23bcc2f6f1ae1d75775f1fffbf612c1a8d68fd411
-- 121:348c8d16729c971241d1488f5cea752d3dfcf05c8800da48924b80d5e8aabfc0cee0ea64115e5cddb935bd075559ee66487094350fed4dc04fc982fcd31d27c7f662a3af237ad0ff7d96bceb32659321847ae583766e330aab05a975bb560d46617b64567174fcf88f78688a91e36fe0fde3ced52c54e9a5a59b986be7e1fdfd7d26c0c67786cd275bfa4cf9e6f816241bf34431485c32bc2e75f8f19e70cca273c28a9f90a03d23e19dc344b43180ff56c9a6ff05cd12a86ea236dd2f1729e67ddef27a6c0c87ed39360919e623e6b2c9c90a826ff7fe0843a7860db5433875714ea01c461e5c37c102042965837bc6
-- 122:efa0ed8c7806e47442989a24e671876016b2259e06bb0f939b01c2b01116f24e5aa6db8bebcf309fc19fd1c306aef19abd3d8a48a521a4fc48daca262cb9fb4c54e0d10cb9d5c62ce7b924364ff7ab39913050b14431c112dbcaf23a963143a8748966d448bd30bc868b3a62df7cfc7a5a8383cff42bc85657908724fad9643e506f0b9448686a6048446108f2c2471c8eb76d1ccf3f251ab9e62d64e092ef385a82bc1653e39337ba8ac3b105d0911a8de93306f407a1c4b88021cb6f9276b867d65952af002357514684a89dc23b7070efb7f1e7ddba8f06301b23279534f5a758500189c4e509b3bd480793a6b4ac
-- 123:99459609c42b5e48cc01e0cf8d5c30202a1569ebaffa20d490ac9423309ead7c09bb30547bd47b7e7fd1c1d0ccb2a094239c7eb7481bc06a4b888109185a0bed50ebd8c1957e58ff2d543cef48d4c04b52648b3987d18cdbafeb8b18a8f3711528b52c43315d71076bc3ae0f36e7853b41a06074e110a4f703898037197dc8c0ad255285651c0b5239f8b13bbdfb15570e21c1041d9459f735097888e8e318be99988591aec6dfbc9af783ae84dd65d5d5aa5fea41412ac824986b20149bffe23b33b3415a4c879ab6f565d325695c259d7b5bbc33af7d10d8fed969f96d00bb6fe35f09237997d033c038cabacbff7d
-- 124:ad0be43b1cbcab51e835a3c59541034eaded19fc473c886d3d8f6ef67bbd249cffe7294b16f022a759af48f37289ea6070a762d192b9cc552b7aa087ac51343d57963ca6668529223cc0d1e5816e33dca52e367c57d15c3ef3c03c9e477c5f2ed2fb485a3a7b1bea3a1442293ca502b3530f70237201ceb0776d50fb05caad11d92f8704d212f92fe49caa8f2a7769f6661a137deb589e24cb168b132b6066f2179a7c6e829d38f8fe660f2c58aaeb2db6ea63a831c43accca9cff172e7954bb138518cc6a653985639c7e7f52158ca0443fcdc70ef29663b42ca81b365c3a289c59e4ae9f69d3f0a4c38e2d6d41150c
-- 125:8a04ad80509e66fdabe58f6b29b5fbec148a387fd3408dd1cda2f0239026b17329b15ef774d82a39166f88add10cc672596ce97b374d09a566edd836ca1f633cf253a6aa74c6a19b33ae13ecc4153e02320c0e2d466914fab4f00a3f71f9bf72c46fab2da77ad4ffd185aac45710e6f3f9e07832fdc66589ad95402636ab6110fa5a5eb4bbf1c54d3bddce31011a0970942ea714fbcc465bc8c44390782b96453758b4f28cb540523b0c1ccd05103039a4d194024996f6d9f01a80d73eccf00e0668cc2d7237126f0ed61e9548ef170e52dda876348c7aa0f42ba5488f0d5287147b9052f19ba3020c2b13383013847a
-- 126:151417331541eb06723b0b12801293977d0367fffac6ee23779008df3b7a257157ff6b4f89b364e3ec14afdbce12de115c66e705ece60b128abd4f065d0a79957f923e3005cf35eb35a20ffd4439775e7acede792638c47d0f5dd1fdb351dcf67337ab3134a5275ed2502e752cd2cef09bfa08e12b350603f10c5d8a289447df2930d033f0c99226a8a164df1085eb56187983fb2576a00fa55dd171b3974c7454ace4f289a367605b68bdad02bc416a0fa4455696a2bbfe43a21ce9469fa9ddb44aa648065ed3583b8c67524ec9a843b2f3329b9a62e8102873d878c6b7b4609e66195fb6458de64f10170a27e53d9f
-- 127:46eec4267f264d0da1412b46c2a8680e144e7dc5503eca296d5318a009ef4854dabbeacc776ec336cd363575e54d696862e2dd477921eca8f4de429877c9775153798555181ba9040f829343a692bfca2fd18e750aaad270e86098723456fca603d7fd1ae6e3cb695af8ccd9fd023ecc5fa43c2f132f962d82e0da6181e1c6bc25eb76117c3530df3533b0c88be4bdb88f7510ee2cc6fa9b752286cb4bcd451691114271fdfa1ede1e593fa4ea0ec95e7754e245a16d139935612b4da1afd56b2463aa965164811eaadddf96c7daf3d9e2045227c329c61deb60782f9bd648d67e4f7f0b26f3e50ed6d1a4facf92d8e5
-- 128:48268248852f8f2ac687d214c0a4f440b02c63e5b1f967d1270ae5eeb4a2beab4d4eac6140c8983b19209b8cf9e8a2b7f815c0fdf0fc8163e0003a748c1967427336e27f00647191bfefe8af46f84b4841906cf88ab9cc16cab093fd3ab0ecb4d53bc2cc74b4cb3e88d7f0ffce6144cede9261318bd845d3f7c1219f5e34db91d9ed111ee337d7d6c472129fd1337150a628589229cb1b1ff969be37b37fe3360bc25ba5351a714deeb17d4b74035a82088c161de77d00172531ed34bc57c3e31fd951b5c2ad4aed6dbebae37ea36c45566a6107fe946ffb9ae61506f2dc08552bf5120d8c4d31232db6878d946261c3
-- 129:a1e31e082bc02a7a04534887952f9d1dffa9a28746eec83b60c06dc06e9796f76a37a380185f4d428e99f6e3ed672a5f04eb40e790c3eb301313c5fd13ede5b36eb1c0b1471dcd0ce02fc2f81702eaffb0aa99e4ce74ff3fe10813f18005ed05954a3cc6969d0500cf8d95529fe08dadb188156d07c6c13a52366013a3add614bec229e28ac04e4b81a9e013575377849fed9344faa892e5fd2b737efafe4abad7e3443f8661ec797a444fd6d919738122ae3c6ad51ad1d1a9cad4db056dcdaaf8adb44abeb8e9644e8e4127936c39c3d290f34b2ea554c4ebce0a52a0aa7e5ef2c757171464aa55d5b35cd0005251a8
-- 130:08c6d7fa0b077c4084e3b4cb038a72b1b09cecf9b891adcb96d58fcc7274947390ffe459ae10d6e3628c5f9ccaa25382f2f28bf0acbb6f13a6ef2e91338458db5267a4ba5d5afc12febb4d93907a3d56f1c48146e04907b8e2a0b2890b46df33f4bff9c8467e8fdd4e5b1a1d572913c2cee4eca578a75ce4abfdf80143ab35e5d25b88ab63c9908a61459a131b04a528ee5dcd94e2397bf45b832afee051375507d01e719cb7d534e7e24f1e05c6076a2241864dd074d97a984bcab18d0f144e31522beb7193021924a99738b7ec399ff40688357ca3829716ecd793e6bcd1693b8c7757fc3e397938ebbf32c133d8ab
-- 131:b9d0fcff365324d319e54fba4a29051c382a5c967255cadcab9fe7205a98d062023958dcf20b17f8013429f383073b68278e6eaafffe16cbcbc600f5072f6e56a3d40fadb588a0da291302298433bed20481742610fbdd1cc34c783c9100146014558c7b1152877cc4b55f261bffd485f1374a1b20151ece9e6ec1b5b1c85c1ee732ec515da9a573778e36473249a61a7aaa5d6989be63ed2f4a7cbdce9ec035192b26e2074d70c08479e7ab6262f98a4a7a323affd172cbb906d9da8bea4929695c498f199d7986cd96fa9052c2e92f05e5e1cf7e7aac43b97a31fb55471eb36b7691ceef501bfbfa7878925028fd2e
-- 132:2b810f9877450b9d2fe76d5ef51ee69ccec63ca4766dee65fc49a5ec392ab0be75436b04bc4b87cdea23d10943c1949ee5f75e049c995e8b92364d6ce3d8d1d6d3fd6434417b9388324bebd6eed6f555398222d6bbbf064d7bb923c7657688471b8b8c696433ade65eb9eb523cd3b5134a41a499994510dac1841c628a88dcda4563c635fb24d440a2b17e7a7f2dc65d74507526936f3f1dd809e4ecf393447872940ee37c68c472e6a3beaa3d231a024d445111424afd2146bb52793a52f69495c3dd690a7fb1150679e5a61c2931c87f7605aaeaad340cfb4c861ad2ad96a571d9ed8eddd59191333841cf2223eebe
-- 133:d869c7b16fb56de4f2a5f8df4c6a8bd1808244ce4ba3576f4419488affa4223be2fea1bc8add73165006a05800e378029a34f18a9822e8a8677d359b685d380c18c744fdc0fb0c231280e663dc5540d2899f5e1fe6abde04e5682c2d6633ea4fe682b6b6e1a454122b97714ce622cda49ed26e3b857d0aaca3296f512ae03da158a9440ab7ba9bc04addbc765bc6cb1f34e07c9882d9f27210a25425743a37925e84e76a6be90319cd310a9695e634a1a05b6c3839c035ac871e31bb14bfc2590bfcbf80c09ba06ef509e0d6657fae337a437909d0b4f335f669b2b520317b3a2eb0f6cfca3e160adaca6a83ff346ac5
-- 134:c8507f8f10a396719a48ef391bc8c2217c6b098e000a24a64ac20d27b3073d73ac89fad9fdcea07d4941f9521a9c106d2129a959e2fffe5c01dbe2c78e7fc4466b22fa10e91fa7a0d0ffc2f750c618f05dd01712e76c0184141d669071909d949a95cb910a052a6e721989a1515bf9ff9db2f636a124e7e5be18afcb6bcf2419fd67e3ac0b40a5e0578c5c3da24d7715a083e54a140ecd0b6df4240eca248832c5cdb2e8aaba9099fd263cf7021023c91c40ad68d42da5c8b25111e7efa0f38001dbec468090dcc006b97070e9eeb2f5922f587c3aa9b372a5c2cc1a2b696e90f66461775c9c90ccb8825acd1b6dba0b
-- 135:9a63a40daa7a49c191af580d4fce097931d165fb8e4ec8c5f47dc894380718c93f2c82af52fc7d1a3248f8d42ca14dec2ee2f10491efad660fed431d8ecc83493c462e5dd8cbe1c4041c17c2bb2d45749ab5d55958d59208488b615272d11a75c97387213f4f4b37fcb07f4245fe6529b06a48b05d17e4db55a11ace7f02514f12c05e14ec4542a77fcdc3d1f5b9dd9401318eb207114dc54f91fc8913b4a02b02b1a49ea5e3e1658606a5289947950a06128ea31fa5f4a74c86b68c5f74bbbfca76f792d67eb107ecb918787d27a3cc4f3b843da9f1bcb226e09ac7c80bf12eec331fa52f93326f72b1d3ca9684b4c2
-- </MAP>

-- <MAP2>
-- 000:00202c00602c00a02c00e02c00212c00612c00a12c00e12c00222c00622c00a22c40202c40602c40a02c40e02c40212c40612c40a12c40e12c40222c40622c40a22c80202c80602c80a02c80e02c80212c80612c80a12c80e12c80222c80622c80a22cc0202cc0602cc0a02cc0e02cc0212cc0612cc0a12cc0e12cc0222cc0622cc0a22c01202c01602c01a02c01e02c01212c01612c01a12c01e12c01222c01622c01a22c41202c41602c41a02c41e02c41212c41612c41a12c41e12c41222c41622c41a22c81202c81602c81a02c81e02c81212c81612c81a12c81e12c81222c81622c81a22cc1202cc1602cc1a02c
-- 001:c1e02cc1212cc1612cc1a12cc1e12cc1222cc1622cc1a22c02202c02602c02a02c02e02c02212c02612c02a12c02e12c02222c02622c02a22c42202c42602c42a02c42e02c42212c42612c42a12c42e12c42222c42622c42a22c82202c82602c82a02c82e02c82212c82612c82a12c82e12c82222c82622c82a22c41654c41694c41554c81554c41754c41b54c51613c51a13c51653c51a53c91613c91a13c91653c91a53c51513c51913cd1513cd1913c51713c91713c51f13c91f13c000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- </MAP2>

-- <WAVES>
-- 000:00000000ffffffff00000000ffffffff
-- 001:0123456789abcdef0123456789abcdef
-- 002:0123456789abcdeffedcba9876543210
-- 003:000000000000ffff000000000000ffff
-- </WAVES>

-- <WAVES1>
-- 000:00000000ffffffff00000000ffffffff
-- 001:0123456789abcdeffedcba9876543210
-- 002:0123456789abcdef0123456789abcdef
-- 003:000000000000ffff000000000000ffff
-- </WAVES1>

-- <SFX>
-- 000:07000700171017202720273037403740475047605760577067806780779077a087a087b097c097c0a7d0b7e0b7e0c7f0d7f0d7f0e7f0f7f0f7f0f7f0590000000000
-- 001:6f007ff08f009f00af00cf00df00ef00ef00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00100000000000
-- 002:000010102020303030404050406050706080609060a070b070c080d080e090f090f0a0f0a0f0b0f0c0f0c0f0d0f0e0f0f0f0f0f0f0f0f0f0f0f0f000280000000000
-- 003:61b0714081d091b0a150b170c1a0d150e100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f10030b000000000
-- 004:048024e044f054d0649074809450a430b430c410c400c400c400c400d400e400e400f400f400f400f400f400f400f400f400f400f400f400f400f400200000000000
-- 005:340044006410742084309450a460a470a480b490c4a0c490d480f400f400f400f400f400f400f400f400f400f400f400f400f400f400f400f400f400214000000000
-- 006:03000308131013202320233033403340435043605360537063806380739073a083a083b093c093c0a3d0b3e0b3e0c3f0d3f0d3f0e3f0f3f0f3f0f3f0c80000000003
-- 007:03002300333043605380738083809380a380b380c380d380d380e380e380f380f380f380f380f380f380f380f380f380f380f380f380f380f380f380405000000000
-- 016:030003000300b300c300d300039003900390b390c390d390f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300305000000000
-- 017:030003000300b300c300d300039003900390b390c390d39003e003e003e0b3e0c3e0d3e0f3e0f300f300f300f300f300f300f300f300f300f300f300482000000000
-- 018:010001100110f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100402000000000
-- 019:c300a300b300c300d300d300e300e300e300e300e300e300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300400000000000
-- 020:030003000300b300c300d300039003900390b390c390d390f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f30040b000000000
-- 059:020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200300000000000
-- 060:0100110011002100210031003100410041005100510061006100710071008100810091009100a100a100b100b100c100c100d100d100e100e100f100302000000000
-- 061:010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100302000000000
-- 062:000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000302000000000
-- 063:000000000000000000000000000000000000000000000000000000000000100020003000400050006000700080009000a000b000c000d000e000f000312000000000
-- </SFX>

-- <SFX1>
-- 000:0300130033004300530063009300a300b300c300d300d300e300e300e300e300f300f300f300f300f300f300f300f300f300f300f300f300f300f300341000000000
-- 001:0200120012002200220032003200420042005200520062006200720072008200820092009200a200a200b200b200c200c200d200d200e200e200f20034b000000000
-- 002:000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000300000000000
-- 003:0000000000000000000020003000400050006000700080009000a000b000c000d000e000f000f000f000f000f000f000f000f000f000f000f000f000300000000000
-- 004:0200120022003200420052006200720082009200a200b200c200d200e200f200f200f200f200f200f200f200f200f200f200f200f200f200f200f20034b000000000
-- </SFX1>

-- <PATTERNS>
-- 000:6008f5000000000000000000a008f5000000000000000000b008f5000000000000f008f5000000000000d008f50000006008f5000000000000000000a008f5000000000000000000b008f5000000000000f008f5000000000000d008f50000006008f5000000000000000000a008f5000000000000000000b008f5000000000000f008f5000000000000d008f50000006008f5000000000000000000a008f5000000000000000000b008f5000000000000f008f5000000000000d008f5000000
-- 001:6008f9000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b008f9a008f98008f98008f9000000000000a008f9000000000000000000000000000000000000000000000000000000b008f9a008f98008f98008f9000000000000a008f90000006008f90000008008f9d008f7000000000000000000000000000000000000000000000000
-- 002:8008f9000000a008f9b008f90000008008f90000000000005008f90000006008f98008f9000000d008f70000000000006008f9000000000000000000000000000000000000000000000000000000000000000000b008f9a008f98008f98008f9000000000000a008f9000000000000000000000000000000000000000000000000000000b008f9a008f98008f98008f9000000000000a008f90000006008f90000008008f9d008f7000000000000000000000000000000000000000000000000
-- 003:8008f9000000a008f9b008f90000008008f90000000000005008f90000006008f98008f9000000d008f7000000000000e008f70000000000006008f90000000000009008f9000000000000000000d008f9e008f9e008f9d008f99008f9000000d008f70000000000005008f90000000000008008f9000000000000b008f9d008f9d008f9b008f98008f95008f9000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 004:bff8f7aff8f78ff8f7810bf7010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 005:aff9e7aff9f7000000000000000000000000000000000000000000000000000000dff9f5bff9f7aff9f78ff9f78ff9e78ff9f7aff9e7aff9f70000006ff9e76ff9f78ff9f7dff9e5dff9e5dff9f5000000000000000000000000000000dff9f58ff9e78ff9f7aff9f7bff9e7bff9e7bff9f78ff9f75ff9e75ff9f76ff9e76ff9e76ff9f78ff9e78ff9f7dff9f5dff9e5dff9f5aff9e7aff9f7000000000000000000000000000000000000000000000000000000bff9f7aff9f78ff9f78ff9f7
-- 006:dff8f36ff8f5aff8f56ff8f5fff8f36ff8f5aff8f56ff8f5dff8f36ff8f5aff8f56ff8f5fff8f36ff8f5aff8f56ff8f5dff8f36ff8f5aff8f56ff8f5fff8f36ff8f5aff8f56ff8f5dff8f36ff8f5aff8f56ff8f5fff8f36ff8f5aff8f56ff8f5dff8f36ff8f5aff8f56ff8f5fff8f36ff8f5aff8f56ff8f5dff8f36ff8f5aff8f56ff8f5fff8f36ff8f5aff8f56ff8f5dff8f36ff8f5aff8f56ff8f5fff8f36ff8f5aff8f56ff8f5dff8f36ff8f5aff8f56ff8f5fff8f36ff8f5aff8f56ff8f5
-- 007:aff9e7aff9f7000000000000000000000000000000000000000000000000000000dff9f5bff9f7aff9f78ff9f78ff9e78ff9f7000000aff9f76ff9e76ff9f70000008ff9e7dff9e5dff9e5dff9f50000000000000000000000000000000000008ff9e78ff9f7aff9f7bff9e7bff9e7bff9f78ff9f75ff9e75ff9e75ff9f76ff9f78ff9e78ff9f7dff9f56ff9f78ff9f79ff9f78ff9f76ff9f74ff9f7000000000000dff9f5eff9f5000000000000000000000000000000000000000000000000
-- 008:dff8f36ff8f5aff8f56ff8f5fff8f36ff8f5aff8f56ff8f5dff8f36ff8f5aff8f56ff8f5fff8f36ff8f5aff8f56ff8f5dff8f36ff8f5aff8f56ff8f5fff8f36ff8f5aff8f56ff8f5dff8f36ff8f5aff8f56ff8f5fff8f36ff8f5aff8f56ff8f5dff8f36ff8f5aff8f56ff8f5fff8f36ff8f5aff8f56ff8f5dff8f36ff8f5aff8f56ff8f5fff8f36ff8f5aff8f56ff8f5dff8f36ff8f5aff8f56ff8f5000000000000000000030300000000000000000000000000000000000000000000000000
-- 009:4ff9e74ff9f79ff9e79ff9f78ff9f76ff9f76ff9f74ff9f76ff9f74ff9f74ff9e74ff9f74ff9e74ff9f7dff9e5eff9f54ff9e74ff9f79ff9e79ff9f7bff9f79ff9f78ff9f76ff9f76ff9f78ff9f79ff9e79ff9f79ff9e79ff9f7bff9f7dff9f7eff9f7eff9f7dff9f7bff9f7bff9e7bff9f79ff9f7bff9f7dff9f7dff9f7bff9f79ff9f79ff9e79ff9f76ff9f74ff9f76ff9f79ff9f79ff9f78ff9e78ff9f78ff9f7aff9f7aff9e7aff9e7aff9f7000000000000000000000000000000000000
-- 010:e889e34889e54889e54889f54889e54889e54889e54889f5e889e3e889e3e889e3e889f34889e54889e54889e54889f54889e54889e54889e54889f54889e54889e54889e54889f5e889e3e889e3e889e3e889f34889e54889e54889e54889f54889e54889e54889e54889f5e889e3e889e3e889e3e889f34889e54889e54889e54889f54889e54889e54889e54889f54889e54889e54889e54889f5e889e3e889e3e889e3e889f3dff9f36ff9f5aff9f56ff9f5fff9f36ff9f5aff9f56ff9f5
-- 011:9889e59889f59889e59889f58889e58889f58889e58889f54889e54889f54889e56889f59889e59889f59889e59889f59889e59889f59889e59889f58889e58889f58889e58889f54889e54889f54889f56889f59889f59889e59889f59889e58889f58889e58889f58889e54889f54889e54889e56889e59889f59889e59889f59889e59889f59889e59889f59889f58889e58889f58889e58889f54889e54889f54889f56889f5000000000000000000000000000000000000000000000000
-- 012:000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dff9f5bff9f7aff9f78ff9f78ff9e78ff9f7aff9e7aff9f7000000000000000000000000000000000000000000000000000000bff9f7aff9f78ff9f78ff9e78ff9e78ff9f7aff9f76ff9e76ff9f78ff9e78ff9f7dff9e5dff9e5dff9f50000000000000000000000000000000000008ff9e78ff9f7aff9f7bff9e7bff9e7bff9f78ff9e78ff9f7
-- 013:5ff9e75ff9f76ff9f78ff9e78ff9e78ff9f7dff9f5dff9e5dff9f5aff9e7aff9f7000000000000000000000000000000000000000000000000dff9f5bff9f7aff9f78ff9f78ff9f7aff9e7aff9f7000000000000000000000000000000000000000000000000000000dff9f5bff9f7aff9f78ff9f78ff9e78ff9f7000000aff9f7aff9e7aff9f70000008ff9f78aa9e78aa9e78aa9f70000000000000000000000000000000000008ff9e78ff9f7aff9f7bff9e7bff9e7bff9f78ff9e78ff9f7
-- 014:000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fff9f7dff9f7bff9f7bff9f7dff9e7dff9f7000000000000000000000000000000000000000000000000000000000000fff9f7dff9f7bff9f7bff9e7bff9f7000000dff9f76ff9e76ff9f7000000bff9f7dff9e5dff9e5dff9f5000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 015:5ff9e75ff9f76ff9f78ff9e78ff9e78ff9f7dff9f56ff9f78ff9f79ff9f78ff9f76ff9f74ff9f7000000dff9f5eff9f54ff9e74ff9f79ff9e79ff9f78ff9f76ff9f76ff9f74ff9f76ff9f74ff9f74ff9e74ff9f74ff9e74ff9f7dff9f5eff9f54ff9e74ff9f79ff9e79ff9f7bff9f79ff9f78ff9f76ff9f76ff9f78ff9f79ff9e79ff9f79ff9e79ff9f7bff9f7dff9f7eff9f7eff9f7dff9e7dff9f7bff9e7bff9f79ff9f7bff9f7dff9f7dff9f7bff9f79ff9f79ff9e79ff9f76ff9f74ff9f7
-- 016:dff9f36ff9f5aff9f56ff9f5fff9f36ff9f5aff9f56aa9f5daa9f36aa9f5aaa9f56aa9f5faa9f30000004ff9f54ff9f50000000000004ff9f54ff9f5000000eff9f3eff9f3000000dff9f3dff9f30000000000004ff9f54ff9f50000000000004ff9f54ff9f5000000eff9f3eff9f3000000dff9f3dff9f30000000000004ff9f54ff9f50000000000004ff9f54ff9f5000000eff9f3eff9f3000000dff9f3dff9f30000000000004ff9f54ff9f50000000000004ff9f54ff9f5000000eff9f3
-- 017:6ff9f79ff9f79ff9f78ff9e78ff9f78ff9f7aff9f7aff9e7aff9e7aff9f76ff9f7fff9e5fff9e5fff9f5fff9f56ff9e76ff9e76ff9f76ff9f7bff9e7bff9f7aff9e7aff9f78ff9f7aff9e7aff9e7aff9e7aff9f7fff9e5fff9e5fff9f5fff9f56ff9e76ff9e76ff9f76ff9f7bff9e7bff9f7aff9e7aff9f78ff9f7aff9e7aff9e7aff9e7aff9f7fff9e5fff9e5fff9f5fff9f56ff9e76ff9e76ff9f76ff9f7bff9e7bff9f7aff9e7aff9f78ff9f7aff9e7aff9e7aff9e7aff9f7fff9e5fff9e5
-- 018:eff9f3000000dff9f3dff9f30000000000004ff9f54ff9f5000000000000000000dff9f36ff9f5aff9f56ff9f5fff9f36ff9f5aff9f56ff9f5dff9f36ff9f5aff9f56ff9f5fff9f36ff9f5aff9f56ff9f5dff9f36ff9f5aff9f56ff9f5fff9f36ff9f5aff9f56ff9f5dff9f36ff9f5aff9f56ff9f5fff9f36ff9f5aff9f56ff9f5dff9f36ff9f5aff9f56ff9f5fff9f36ff9f5aff9f56ff9f5dff9f36ff9f5aff9f56ff9f5fff9f36ff9f5aff9f56ff9f5dff9f36ff9f5aff9f56ff9f5fff9f3
-- 019:fff9e5fff9f56ff9e76ff9e76ff9f76ff9f7bff9e7bff9f7aff9e7aff9f78ff9f7aff9e7aff9e7aff9e7aff9e7aff9e7aff9e7aff9f7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 020:6ff9f5aff9f56ff9f5dff9f36ff9f5aff9f56ff9f5fff9f3dff9f36ff9f5aff9f56ff9f5fff9f36ff9f5aff9f56ff9f5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 021:aff8e3aff8e3aff8e3aff8e3aff8e3aff8e3aff8e3aff8e3aff8e3aff8e3aff8e3aff8e3aff8e3aff8e3aff8e3aff8e35ff8e55ff8e55ff8e55ff8e55ff8e55ff8e55ff8e55ff8e5cff8e3cff8e3cff8e3cff8e3dff8e3dff8e3dff8e3dff8e36008e36008e36008e36008e36008e36008e36008e36008e36008e36008e36008e36008e36008e36008e36008e36008e38008e38008e38008e38008e38008e38008e38008e38008e39008e39008e39008e39008e39008e39008e39008e39008e3
-- 022:aff8e7aff8e7aff8f70000005ff8e95ff8e95ff8f9000000dff8e7dff8e7dff8f7000000fff8e7fff8e7fff8f7000000cff8e7cff8e7cff8f7000000dff8e7dff8e7dff8f7000000aff8e7aff8e7aff8f70000009ff8e79ff8e79ff8f7000000aff8e7aff8e7aff8f70000005ff8e95ff8e95ff8f9000000dff8e7dff8e7dff8f7000000fff8e7fff8e7fff8f70000006ff8e96ff8e96ff8f9000000cff8e7cff8e7cff8f7000000fff8e7fff8e7fff8f70000009ff8e79ff8e79ff8f7000000
-- 023:aff8e5aff8e5aff8f50000005ff8e75ff8e75ff8f7000000dff8e5dff8e5dff8f5000000fff8e5fff8e5fff8f5000000cff8e5cff8e5cff8f5000000dff8e5dff8e5dff8f5000000aff8e5aff8e5aff8f50000009ff8e59ff8e59ff8f5000000aff8e5aff8e5aff8f50000005ff8e75ff8e75ff8f7000000dff8e5dff8e5dff8f5000000fff8e5fff8e5fff8f50000006ff8e76ff8e76ff8f7000000cff8e5cff8e5cff8f5000000fff8e5fff8e5fff8f50000009ff8e59ff8e59ff8f5000000
-- 026:9ff9e94999ebbaa9e9cbb9e99ff9e94999ebbaa9e9cbb9e99ff9e94999ebbaa9e9cff9e9e999e9caa9e9bbb9e9cff9e99999e94aa9ebbbb9e9cff9e99999e94aa9ebbbb9e9cff9e99999e94aa9ebbbb9e9cff9e9e999e9caa9e9bbb9e9cff9e99ff9e94999ebbaa9e9cbb9e99ff9e94999ebbaa9e9cbb9e99ff9e94999ebbaa9e9cff9e9e999e9caa9e9bbb9e9cff9e99999e94aa9ebbbb9e9cff9e99999e94aa9ebbbb9e9cff9e99999e94aa9ebbbb9e9cff9e9e999e9caa9e9bbf9e9cff9e9
-- 027:9008c59008c59008c59008c59008c59008c59008c59008c54008c74008c74008c74008c7b008c5b008c5c008c5c008c55008c55008c55008c55008c55008c55008c55008c55008c57008c57008c57008c57008c58008c58008c58008c58008c59008c59008c59008c59008c59008c59008c59008c59008c54008c74008c74008c74008c7b008c5b008c5c008c5c008c55008c55008c55008c55008c55008c55008c55008c55008c57008c57008c57008c57008c58008c58008c58008c58008c5
-- 028:9008c79008c79008c79008c79008c79008c79008c79008c74008c94008c94008c94008c9b008c7b008c7c008c7c008c75008c75008c75008c75008c75008c75008c75008c75008c77008c77008c77008c77008c78008c78008c78008c78008c79008c79008c79008c79008c79008c79008c79008c79008c74008c94008c94008c94008c9b008c7b008c7c008c7c008c75008c75008c75008c75008c75008c75008c75008c75008c77008c77008c77008c77008c78008c78008c78008c78008c7
-- 029:9008e74008e9b008e7c008e79008e74008e9b008e7c008e79008e74008e9b008e7c008e7e008e7c008e7b008e7c008e79008e74008e9b008e7c008e79008e74008e9b008e7c008e79008e74008e9b008e7c008e7e008e7c008e7b008e7c008e79008e74008e9b008e7c008e79008e74008e9b008e7c008e79008e74008e9b008e7c008e7e008e7c008e7b008e7c008e79008e74008e9b008e7c008e79008e74008e9b008e7c008e79008e74008e9b008e7c008e7e008e7c008e7b008e7c008e7
-- 030:9008e99008f9000000000000000000000000000000000000040300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 031:9008e79008f7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 032:9008e90000004008eb000000c008e9000000e008e9000000b008e9000000c008e90000009008e90000008008e90000009008e90000004008eb000000c008e9000000e008e90000005008eb000000b008e9000000e008e90000008008e90000009008e90000004008eb000000c008e9000000e008e9000000b008e9000000c008e90000009008e90000008008e90000009008e90000004008eb000000c008e9000000e008e90000005008eb000000b008e9000000e008e90000008008e9000000
-- 033:9008e70000004008e9000000c008e7000000e008e7000000b008e7000000c008e70000009008e70000008008e70000009008e70000004008e9000000c008e7000000e008e70000005008e9000000b008e7000000e008e70000008008e70000009008e70000004008e9000000c008e7000000e008e7000000b008e7000000c008e70000009008e70000008008e70000009008e70000004008e9000000c008e7000000e008e70000005008e9000000b008e7000000e008e70000008008e7000000
-- 034:9008d94008dbc008d9e008d9b008d9c008d99008d98008d99008d94008dbc008d9e008d95008dbb008d9e008d98008d99008d94008dbc008d9e008d9b008d9c008d99008d98008d99008d94008dbc008d9e008d95008dbb008d9e008d98008d99008d94008dbc008d9e008d9b008d9c008d99008d98008d99008d94008dbc008d9e008d95008dbb008d9e008d98008d99008d94008dbc008d9e008d9b008d9c008d99008d98008d99008d94008dbc008d9e008d95008dbb008d9e008d98008d9
-- 035:9008d54008d7c008d5e008d5b008d5c008d59008d58008d59008d54008d7c008d5e008d55008d7b008d5e008d58008d59008d54008d7c008d5e008d5b008d5c008d59008d58008d59008d54008d7c008d5e008d55008d7b008d5e008d58008d59008d54008d7c008d5e008d5b008d5c008d59008d58008d59008d54008d7c008d5e008d55008d7b008d5e008d58008d59008d54008d7c008d5e008d5b008d5c008d59008d58008d59008d54008d7c008d5e008d55008d7b008d5e008d58008d5
-- 036:9008d94008dbb008d9c008d99008d94008dbb008d9c008d99008d94008dbb008d9c008d9e008d9c008d9b008d9c008d99008d94008dbb008d9c008d99008d94008dbb008d9c008d99008d94008dbb008d9c008d9e008d9c008d9b008d9c008d99008d94008dbb008d9c008d99008d94008dbb008d9c008d99008d94008dbb008d9c008d9e008d9c008d9b008d9c008d99008d94008dbb008d9c008d99008d94008dbb008d9c008d99008d94008dbb008d9c008d9e008d9c008d9b008d9c008d9
-- 037:9008d5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 038:9008d7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 039:9008e99008e99008f90000009008e99008e99008f9000000c008e9c008e9c008e9c008e9c008f9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 040:9008e79008e79008f70000009008e79008e79008f70000009008e79008e79008e79008e79008f7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 041:9008d79008d79008c70000009008d79008d79008c7000000c008d7c008d7c008d7c008d7c008c7000000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 042:9008d59008d59008c50000009008d59008d59008c5000000c008d5c008d5c008d5c008d5c008c5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 043:9008c5902cc59008c59008c59008c59008c59008c59008c54008c74008c74008c74008c7b008c5b008c5c008c5c008c55008c55008c55008c55008c55008c55008c55008c55008c57008c57008c57008c57008c58008c58008c58008c58008c59008c59028c59008c59008c59008c59008c59008c59008c54008c74008c74008c74008c7b008c5b008c5c008c5c008c55008c55008c55008c55008c55008c55008c55008c55008c57008c57008c57008c57008c58008c58008c58008c58008c5
-- 044:9418d7905cc74008d94008c9c008d7c008c7e008d7e008c7b008d7b008c7c008d7c008c79008d79008c78008d78008c79008d79008c74008d94008c9c008d7c008c7e008d7e008c75008d95008c9b008d7b008c7e008d7e008c78008d78008c79008d79008c74008d94008c9c008d7c008c7e008d7e008c7b008d7b008c7c008d7c008c79008d79008c78008d78008c79008d79008c74008d94008c9c008d7c008c7e008d7e008c75008d95008c9b008d7b008c7e008d7e008c78008d78008c7
-- 045:9028c3902cc39008c39008c39008c39008c39008c39008c34008c54008c54008c54008c5b008c3b008c3c008c3c008c35008c35008c35008c35008c35008c35008c35008c35008c37008c37008c37008c37008c38008c38008c38008c38008c39008c39028c39008c39008c39008c39008c39008c39008c34008c54008c54008c54008c5b008c3b008c3c008c3c008c35008c35008c35008c35008c35008c35008c35008c35008c37008c37008c37008c37008c38008c38008c38008c38008c3
-- 046:9418d5905cc54008d74008c7c008d5c008c5e008d5e008c5b008d5b008c5c008d5c008c59008d59008c58008d58008c59008d59008c54008d74008c7c008d5c008c5e008d5e008c55008d75008c7b008d5b008c5e008d5e008c58008d58008c59008d59008c54008d74008c7c008d5c008c5e008d5e008c5b008d5b008c5c008d5c008c59008d59008c58008d58008c59008d59008c54008d74008c7c008d5c008c5e008d5e008c55008d75008c7b008d5b008c5e008d5e008c58008d58008c5
-- 047:9058e79428f74008e94008f9c008e7c008f7e008e7e008f7b008e7b008f7c008e7c008f79008e79008f78008e78008f79008e79008f74008e94008f9c008e7c008f7e008e7e008f75008e95008f9b008e7b008f7e008e7e008f78008e78008f79008e79008f74008e94008f9c008e7c008f7e008e7e008f7b008e7b008f7c008e7c008f79008e79008f78008e78008f79008e79008f74008e94008f9c008e7c008f7e008e7e008f75008e95008f9b008e7b008f7e008e7e008f78008e78008f7
-- 048:9058e59428f54008e74008f7c008e5c008f5e008e5e008f5b008e5b008f5c008e5c008f59008e59008f58008e58008f59008e59008f54008e74008f7c008e5c008f5e008e5e008f55008e75008f7b008e5b008f5e008e5e008f58008e58008f59008e59008f54008e74008f7c008e5c008f5e008e5e008f5b008e5b008f5c008e5c008f59008e59008f58008e58008f59008e59008f54008e74008f7c008e5c008f5e008e5e008f55008e75008f7b008e5b008f5e008e5e008f58008e58008f5
-- 049:9028b5906cb59008b59008b59008b59008b59008b59008b54008b74008b74008b74008b7b008b5b008b5c008b5c008b55008b55008b55008b55008b55008b55008b55008b55008b57008b57008b57008b57008b58008b58008b58008b58008b59008b59028b59008b59008b59008b59008b59008b59008b54008b74008b74008b74008b7b008b5b008b5c008b5c008b55008b55008b55008b55008b55008b55008b55008b55008b57008b57008b57008b57008b58008b58008b58008b5870bb5
-- 050:9889d7904cd74008d94008d9c008d7c008d7e008d7e008d7b008d7b008d7c008d7c008d79008d79008d78008d78008d79008d79008d74008d94008d9c008d7c008d7e008d7e008d75008d95008d9b008d7b008d7e008d7e008d78008d78008d79008d79008d74008d94008d9c008d7c008d7e008d7e008d7b008d7b008d7c008d7c008d79008d79008d78008d78008d79008d79008d74008d94008d9c008d7c008d7e008d7e008d75008d95008d9b008d7b008d7e008d7e008d78008d78008d7
-- </PATTERNS>

-- <PATTERNS1>
-- 000:9fd1140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009fd1140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009fd1140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009fd114000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 001:4ce1140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004ce1140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004ce1140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005ce114000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 002:0000000000009cf106000000000000000000cdf1060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009af106000000000000000000ccf106000000000000000000000000000000000000000000edf106000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 003:000000000000000000000000bfe106000000000000000000eda106000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bfd1060000000000000000004fa1080000000000000000000000000000000000004e9108ebd1060000000000000000000000000000000000000000000000000000000000000000004fa108000000000000000000
-- 004:600036600036d00034400036600026600036600026600036600036800036900026900036900026900036900036b00036800026800036800026800036600036400036400036600026600026600036d00034400036600026600036600026600036600036800036900026900036900026900036900036b00036800026800036800026800036600036400036600026600036000000000000d00034400036600026600036600026600036600036900036b00026b00036b00026b00036b00036d00036
-- 005:000000000000000000000000d00024d00034d00024d00034d00034400036600026600036600026600036600036600036400026400036400026400036d00034b00034d00034d00024d00024d00034000000000000e00024e00034e00024e00034e00034e00034400026400036400026400036400036400036400026400036400026400036d00034000000d00024d00034000000000000000000000000d00024d00034d00024d00034d00034d00034600026600036600026600036600036600036
-- 006:000000000000000000000000900024900034900024900034900034d00034e00024e00034e00024e00034e00034e00034d00024d00034d00024d00034000000000000000000000000000000000000000000000000900024900034900024900034000000000000d00024d00034d00024d00034000000000000000000000000000000000000000000000000900024900034000000000000000000000000900024900034900024900034000000000000e00024e00034e00024e00034000000000000
-- 007:600026600036600036600026600036600036600026600036600036600036600036600036600026600036600036600026600036600036600026600036600036600036600036600036600026600036600036600026600036600036600026610336000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 008:e00026e00036e00026e00036d00036b00036d00036600026600036000000600026800026900026900036900026900036b00026b00036d00036600026600036000000600036900036800026800036800026800036900036600036800036030300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 009:b00026b00036b00026b00036900036800036900036000000000000000000000000000000600026600036600026600036600026600036900036000000000000000000000000000000500026500036500026500036600036f00034d00034000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 010:600026600036600026600036000000000000000000000000000000000000000000000000e00024e00034e00024e00034e00024e00034000000000000000000000000000000000000d00024d00034d00024d00034000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 011:000000000000d00036400038600028600038600028600038600038800038900028900038900028900038900038b00038800028800038800028800038600038400038400038600028600028600038d00036400038600028600038600028600038600038800038900028900038900028900038900038b00038800028800038800028800038600038400038600028600038000000000000d00036400038600028600038600028600038600038900038b00028b00038b00028b00038b00038d00038
-- 012:000000000000000000000000d00026d00036d00026d00036d00036400038600028600038600028600038600038600038400028400038400028400038d00036b00036d00036d00026d00026d00036000000000000e00026e00036e00026e00036e00036e00036400028400038400028400038400038400038400028400038400028400038d00036000000d00026d00036000000000000000000000000d00026d00036d00026d00036d00036d00036600028600038600028600038600038600038
-- 013:000000000000000000000000900026900036900026900036900036d00036e00026e00036e00026e00036e00036e00036d00026d00036d00026d00036000000000000000000000000000000000000000000000000900026900036900026900036000000000000d00026d00036d00026d00036000000000000000000000000000000000000000000000000900026900036000000000000000000000000900026900036900026900036000000000000e00026e00036e00026e00036000000000000
-- 014:e00028e00038e00028e00038d00038b00038d00038600028600038000000600028800028900028900038900028900038b00028b00038d00038600028600038000000600038900038800028800038800028800038900038600038800038000000011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 015:b00028b00038b00028b00038900038800038900038000000000000000000000000000000600028600038600028600038600028600038900038000000000000000000000000000000500028500038500028500038600038f00036d00036000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 016:600028600038600028600038000000000000000000000000000000000000000000000000e00026e00036e00026e00036e00026e00036000000000000000000000000000000000000d00026d00036d00026d00036000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 018:000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600012000000000000000000000000000000600012000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 019:000000600012000000000000600044000000600044600044000000600044e00042000000e00042e00042000000e00042d00042000000d00042d00042000000d00042600044000000600044600044000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- </PATTERNS1>

-- <TRACKS>
-- 000:0001800001c00001010000000000000000000000000000000000000000000000000000000000000000000000000000002e0000
-- 001:000795000795006795006795000000000000000000000000000000000000000000000000000000000000000000000000a00020
-- 002:0c6c57b97c57b97c570c7020048c571a8c570c8c57329c57b596e986aaea000000000000000000000000000000000000000060
-- 003:00000b000d2b000e2b0cbd2b00003b04c03b0000000002fc000000000000000000000000000000000000000000000000e10021
-- 007:5000006c1000842000ac2c00dc1000ec1f000540002d4000455000000000000000000000000000000000000000000000ae0060
-- </TRACKS>

-- <TRACKS1>
-- 000:180301000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040
-- 001:8000c4581705982b45c43e85f041d5000000000000000000000000000000000000000000000000000000000000000000ec0000
-- </TRACKS1>

-- <SCREEN>
-- 000:666666666666666777777777555555555666677777777555555556666666655555556666666666666666677777777755666666676667755555555566666666555555566666666666666677777775555555566666667777777775555555556666666666666666666677777775555555566666666666666666
-- 001:566666666666666666677777777755555555777777775555555566666666665555556666666677766666666677777777556666666775555555556666666666655555566666666666666667777777555555566667777777775555555556666666666666666666666677777775555555666666666666667777
-- 002:555566666666776666666667777777775555666677775555555566666666666666566666666777777766666666777777776556677555555555666666666666665566666666677766666666777777755555557777777775555555566666666555566666666666666777777755555555666666666677777777
-- 003:666566666666777777766666666777777777666666655555555666666666666666666666666667777666666666666777777776655555555566666666666666666666666677777776666666677777775556666777755555555566666666555555566666666666666777777755555556666667777777755555
-- 004:666666666666666777776666666666667777777766655555555666666666666666666666666666666666666666666677777777655555556666666666666666666666666666777766666666677777776666666755555555666666666666555566666666776666667777777555555566777777775555555566
-- 005:666655666666666666666666666666666667777777765555555566666666666655556666666666666666666666666777777766666555555566666666666556666666666666666666666666667777777666655555555666666666666666666666667777766666667777777555556677777755555555666666
-- 006:666665555566666666666666666666666667777777666666555555556666666655555566666667766666666666677777775556666675555555666666655555566666666666666666666666667777777655555556666666666666666666666666677777666666667777775666666775555555566666666665
-- 007:555566666555666666667766666666666667777777555666677755555555666666655666666677777766666667777777555555567777755555556666665555666666667666666666666667777777666665555556666666666665666666666666676666666666677777776666555555556666666666666556
-- 008:777555556666666666666777776666666677777775555555677777775555555566666666666666777666666677777755555555666777777555555566666666666667777766666666677777777556666675555555666666655555666666666666666666666666777777755555555666666666666666666666
-- 009:666777775555566666666666777666666677777775555556666667777777555555566666666666666666667777777555555566666667777775555556666666666666777666666677777775555555677777555555666666555566666667666666666666677777776666655555566666666666566666666666
-- 010:666666667777755555666666666666666677777755555556666666666677777755555556666666666666677777755555556666666666677777755555566666666666666666677777775555555666677777755555566666666666677777666666666777777755666667555555666666555555666666666666
-- 011:555666666666777775555566666666666677777755555566666666666666667777777555555666666667777775555555666666666666666677777555555666666666666677777775555555666666667777775555566666666666677666666677777775555555777777555556666665556666666776666666
-- 012:666566666667766667777755555666666777777555555666666656666666666666777777755555566777777555555566666655566666666666777775555556666666677777775555556666666666666777775555556666666666666666777777555555566666777775555556666666666677777666666677
-- 013:666666666666677777666677777555556777777555555666666555555666667766666677777775556667755555556666666655556666666666667777755555566677777755555556666666666666666677777555556666666666677777755555556666666667777775555566666666666766666677777755
-- 014:566665555566666666666666666777776666675555556666666666666666667777766666666777777665555555666666666666666666777776666677777555566777755555566666655555666666666677777755555666667777775555555666666666666667777755555666666666666677777755555566
-- 015:775555566666666667766666666666677777665555556666666666666666666666666666666677777766555555666666666666666666667766666666777776666655555566666666665566666677666667777775555577777755555566666655666666666677777755555666666677777755555566666666
-- 016:666777775555666666667777666666777777766666555555666666555556666677666666666777775556667755555666665555566666666666666666677777665555666666666666666666667776666666777776666675555556666666655566666676666677777555556677777555555666666566666666
-- 017:666666666777775555666666666667777777555555777777555555666666666667776666677777555555667777755555666666666677776666666777777556666755556666665555666666666666666666777777555555666666666666666666777766666677775566677555555666666655556666666666
-- 018:655556666666666777775555666677777775555556666666777777555556666666666667777755555566666666777755555666666666766666777777555556677777555566666566666777666666667777756666655556666666555666666666666666666777776555556666666666666666677777666667
-- 019:666666666666777776666777775667777555555666666666666666777775555556666677775555556666666666666777775555666666666777775555556666666777775555666666666766666777777555556777775555666655666667766666666777777666655555666666555666666666666666666777
-- 020:566666655566666666666666666777775555556666666655566666766666777775556677755555666666555566666666677775555666777775555566666666666667777755556666666667777755555666666677775555566666666766666777775555566777755556666656666677666666667777766666
-- 021:777755556666666667777666666777775666655556666666666666667766666666777775555566666666666666667776666677775666775555566666655556666666677777555566777775555566666666666667777555566666666777775555566666667777555556666666666666777775555566777766
-- 022:666666677775555666666666666777755555666777755556665666667666666667777556667555566665555666666666666666777776555566666666666666667766666677776666555556666666556666676666777755556777775555666665666666667777555566666667777555556666666677776666
-- 023:666655566666667777555566666777755555666666666777755566666666666777755555666677775555666666667766666777755556777555566665566666666666666777766655556666666666666667666666677766655555666666665666677766677775555777775555666665566666667777666666
-- 024:566666666666667777666677756667755556666655556666666777755566667775555566666666666777755566666666777755556666667777555566666667666677777555567777555666656666776666666777756665555666665566666666666666677776555566666666666667777666677766666655
-- 025:577755556665556666666666667777666555666666666666667666666777766655556666666566667766667775555777755556666556666666777555566666777755556666666677775556666666666777755556667777555566666667776666777755567755556665555666666666666777766666665555
-- 026:556666666777755566666666667777555566777755566666667776666677775666755566665556666666666667777655566666666666666776666777766675555666665556666666777755566777755556665666666777755566666677775555666666777755566666666666777755556777766666555555
-- 027:555666665556666666777555667777555566666666667775556666667777555566666777755566666676667777555567775556666666677666667777566655566665556666666666666777555566666666666677766677755667555566665555666666777555666777755566666666667776666655555566
-- 028:756675556666556666666666667776555666666666666776666777566755556666555666666777555667777555666666666677755566666677755556666677755566666676667777555567775556666666776666677776665556666556666666666666777555566666666666777666777666655555555565
-- 029:775556666666777555666666667775555667775556666667766667775566755566655566666666667776555666666666666766666776667555666665566676667775567777555666566666677755566667777555666666777555666666666777555667775556666667776666777566756665555556555565
-- 030:776555666666666677766677556775556665556666667755566777755566666667775556666667775556666777555666667666677755577755566556667666667776665556666566666666666777655566666666667766677756777555666556666667775566677755556666666777656555555556555655
-- 031:677755566667755566666776667775567755566556666666667776655666666666666666677665556666666667766777556775556665566666777556667775556666666775556666667775556667775566666676667775557755566655666666666777655566666666667666677766665555565556555555
-- 032:666776556666666667776677566755566655666667775566777555666666677556666667775566667755566666766777555777556665667666667776655566656666666666776655666666666776677756775556665566666775556677755566666677755666666775556667776665565555565555555555
-- 033:566677755666666775566666677755566775556666776677755675556655666666667765556666666666666777655566666666766777557775566656666777556667775566666677556666667775556677556666677667775567556655566666666776556666666667666677666555456555655555555555
-- 034:667667775567755665667666677765556665666666667765556666666776677567755666556666775566777556666667755666667755555555556666766777557755665566766667776556666666666666776555666656676667755775566656666775556677755666667766655555455555555555565555
-- 035:667666677665566666666666776555666666776677567555665666677556677755666667755666667755667755666676667755555555555555555555566666666766677655566666676677557775566566667755667775566667755666666775566775566667766775577665555565665555555555565555
-- 036:556666667765566666667666766556665667667756775566566677556677556666775566666775566755666677667755555555556666755556655555555556655666566766755677556666667756667755566677556666677556775566667666775655665566666677765555555554655555555555655556
-- 037:666666666666665565566666677556666667667766556665676775577556666677556677556667755666667555555555577667766556555666667755665555555556655665566677557755666667755667755666775566666775677556667666776655655666666776656555655554555655655555655555
-- 038:555555556666666666666666666666655666767755755656666677656666666667755666567667567555555555566775566677566667755675566676675575565555555555666666766776566656766755755665666756677556667756666775667556667667557665555565555556555555555555555555
-- 039:655555555555555555555555555566666666665666666666665566566675577566667756677655555556667555756667667565665666645556666676676756656665557755555555666755667566666755775666766776566566666765666667667675665666766555556555555456556555555555555555
-- 040:665555555555665555556655555555555555554465555555666666666666666666577666666546556666666665666656676775756566645656666666765666666755755555555555566775666755675667667575656666775666666676556666675676666665655555545555656445555555555555555555
-- 041:55555555555555555555665555566555552222222222255555555555555555555554555555554655555555555455555665666666aaa6545566757755555555555554666756756675755666666765666767575656675676666566666666666666666555555544564555565555655545555555555555555555
-- 042:555555566555555555555555555555522222222222222255555655556555655565546555655646565555565564555555545555aaaaaa545655666666666765656664765666666565667576666666656666666665555555555655555555555555556555565546555555456555555565555555555555555555
-- 043:555555566555555665555555556622222277777677777222555555555555555555546555555556555555555554555555545555aa000aa45556555555554555dd6654666666655544555555555555546655556556556555654656555556555555555555555545555555555555555456555555555555555555
-- 044:55555555555555555555555555222227777777766777772222256655555655556545655655565555556555655456556554555a000000a4555555555555465400d645556565656544555555555555545555555555555555554655556555655555655556545546555555655555555455565555555555555555
-- 045:5665555555665555555555555222777777777776677777777222255555555555555545555555555555555555545555555465a00000000455555565555445d4000545555555555444565555555565545556556555555555554655555555555555555555555445546555555555555655555555555555555555
-- 046:5555555555555555555555552222277777777777677777777777225555555555555546555555555655565555545555b5546aa0000000045556565b55554d04000d45555555555544556555555555545655655555555555554656556555555555555555555465555555555555554655555555555555555555
-- 047:55555555555555555555555522277777777777776777777777777225555555555555455555555465b5555555555555b5546aa00000000455555b5b55554d04000d45555b55555564555555555555565555555555555555554655555555555555555555555455555554555555554555555555555555555555
-- 048:55555555555555555665552222777777777777776777777777777722256555554545455556554465c5555565555555c5446aa0000000045555b5bc55b54d04000b4555bc55555564555555555555565555555555555555556555555556555655555545445455555556555655556555555555655555544544
-- 049:5555555555555555555552227777777777777777667777777777777722555555555546555555546555555b5555555b55546a00b00000045556cbc555c54d0b00c06555cbc5555564555555555555465555555555555555546565555555555555555555554455455555555655556555556555655555545544
-- 050:655665555555555555522222277777777777777776aaaaaaaaaaaaaaa2255555555546555555556565555c5555555c55546a00b000000455555bc65b5540bc00006555bc555b5565555555554555465555555555555555546555555555555555555555554655555555555555545555555556655555545545
-- 051:655665555555555555552227777777777777777776aaaaaabbbaaaaaaa22255455555455555555655555b55565455c5555aa0bc000000445555c555c5540bc00006556c555b55546555555555545465555555555555545546555555555565555545555554555555545555555545555555555555555555545
-- 052:655555555555555555552277777777777777777776aaaabbbbbbbaaaaaa2255555455455555455555555c5555545555455aabc000000044556555b55554bc50000655b5555c45545555555555555465556555555555555546565565555555555555545554555555565555555566555555555555555555555
-- 053:6655555555555555552222777777777777777777766aabbbbbbbbbaaaaaa22555555546555555555555b65555545555555aac0000000044555556c45554c05000065bc555b555545555555555455455555565555555555545555555555555555555555554554554555555555466555555555555555555555
-- 054:6655555555555555555222777777777777777777766aaabbbbbbbbaaaaaa22555555545555555555655c55555545555555aac0000000004555555555554005000d45c5554c555445555555555555456555555545555555565555555565555555555555546555555555555555455555555555555555555555
-- 055:6655556555555665522227777777777777777777776aaabbbbbbbaaaaaaa22555455545555555546555c555655455555554a00000000004555555545544d05000d45655555555445555554554555455555555555555555465655555555554555555555545555555455555555655555555555555555555554
-- 056:6665566555555555522227777777777777777777776bbaabbbbbaaaaaaaa22255555546555455546555555555545555555bc000000000045555555555b4d05000d45555555555445655555555555655555555545545555465555555655555555555555545555555655555555655555555555555555555554
-- 057:46655555555555555522277777777777777777777666bbaaabbaaaaaaaaaa2225555556555555546565555655545555555caa00000000045556555555c6d05000545555554545445555555555555655655545555555555465555555555555555555555545545555555555554555555555555555555555544
-- 058:56655555555555555522227777777777777777776766bbbbaaaaaaaaaaaaaa224555454555555556555555555555555555caa00000000045555c55555c650500d445555555555445555555455455655555555555555555465555555555555554455545445555555565555554555555555555555555555544
-- 059:56665555555555555522227777777777777777667776bbbbbabaaaaaaaaaaa2255555545555545565555555555555555554aa0000000004555554555b565d5005b4555555b554445555555555554655555555555554555455555555545555555555555455555546555555456555555565555555555555544
-- 060:55665555555555555552227777777777777777767776bbbbbbbaaaaaaaaaaa22555555455555555555555555455555555546a0000000004555555555456555d44c454444bc555445555555454554655555555554555555655555555555555555555555455555555555555545555555655555555555555446
-- 061:556655566555555552222777777777777777777677766bbbbbbbaaaaaaaaaa22555555455555555555b65555555555545546aa000000004555555555555445233345423bc3344444455555555554656555555555555554655555555555555555545555455655555565555545555555555555455555555446
-- 062:554665555555555552222777777777777777777776766bbaaabbbbbbaaaaaaa2255555465555555555c5555b5555555555465aa000000a45455554442333352333432423334b4243423344444454555555555555545454655555545554555455555554455555545565555566556555555555455555555446
-- 063:555665555555555555222777777777777777777777666baaaaabbbbbaaaaaaa2255555465555455465c5555555545555554656a00000a5454555542334233523234342b233334343333342333442444444455555555554655555555555555555555554555555565554555565555555555555455555554466
-- 064:555666555555555555222277777777777777777777776bbbbaaaaaaaaaaaaaa225555454555455546555555b5554555454465555aaaa444533444444444425b3334423c343432323342342334233423423334444444554655555555555554554555554555555455655545455555555555555555555554466
-- 065:455466555555665555222277777777777777777777776bbbbbbaaaaaaaaaaa2255455554555555546555555c55545455b5565544423333453232333344444bc55443233424223342334233423334242323334323233334444444555555555555555554556555555555555655555555555555555455554665
-- 066:5555665555555555555222777777777777777777777766abbbbbaaaaaaaaaa2255555554555555556556555555545555c4454233b3423245333342b333434b444445444423334433423342333423423343443232333342333343434444444555555544555555455555555655555555555555554455544665
-- 067:5555666555555555555222277777777777777777777776abbbbaaaaaaaaaaa2255444443445555556555555555545444c334342bb3233345323333c343233c334444444444444423342333422342334342423233334323333334323323342244444445555555655555554555555555555555554455544665
-- 068:5555566555555555555222277777777777777777777776abbbaaaaaaaaaaaa224233334342444555555555544444534423342333c423424533343bc3233334323343434244444434234223334233342334233434234233333443232333343233334344555555555555554555556555555555554555446655
-- 069:5555566555555555555522277777777777777777777776bbbaaaaaaaaa223333344323333333444455444424223253442342233b4233344534233c33424223333344323333444432333343424223233422342233342333423342334334242333333443565555555555556655556555555555555555446655
-- 070:55555466555555555555222777777777777777777777766baaaa223342233423333442342333433454555333334253333433434c3323344534233334233342233443333544442333433432232333334223333433434233233422342233342333422334555554554555546655555555555555555555446555
-- 071:555555665555555555555522227777777777777777777732333334342342332334423442333442333444444233335422423233333432334534334323333343423443355442234423334423334423442334334224232333334323333343343223333434455556555555445555555555555555555554466555
-- 072:555555665555566555555522227777777777777722334344234232333334322333333334323333343423444444335233422333442333444534233343442442323345544223333333443233333434234223233342334223334223334423342333434423455555555555565555655555555555555554466555
-- 073:555555466555555555555552227777777733223323334224423333342233442333422333344234223334334444445333333422333334334542233233342344224454423334423334233333442342333333342323323333344223333343442422322334455455555555565555655545555555555554665566
-- 074:555555566555555555555444422222334334424423233333443233333333343223333343442442332333422344444554423333422334234543344242232333444452333333333432233333434424423323334233442233342233334223442333433442445565555555455555555545555544555544665566
-- 075:554555566655555444444432233333434424422323334423344223334423333442334223334334424223233333344445553343344322334534344244223444444233442233342233334423342233343344242332333333432333333433443223333333445555555555455555555555555545555544665566
-- 076:555554546544444422333442233422333433442442332343334432333333433343223332343342244233233344233444445544233334424534223334344444223223333344323333334334432233323433422442332333422334422333442333344223445555555555655555555555555545555546655666
-- 077:555555545522332333333442233333343342342233233344223442233334423333442233422333433422442232333334444444433333334522333335544423422332333442334422333342233334423344223334334224423323333344322333333433344465555554555555555555555545555446655555
-- 078:655555542233333442233442233334223333344233422333443344232233233333344223333333433443223332333344234444444434424534425554442333333422344223334333443322332333333442233333344334232233323333422344223333344655555454555555555555555555555446555555
-- 079:455555422342233334333443322332333333343223333334434423422332333344233442233334422333442233344233333344444444424543555444233323333334432233333343344244223323334422334422333344233334422333422333433442244555555556555555555555555555554466555555
-- 080:566555422333333433442342233233334423344222333344233333442233442333343344224423323343334432233333334333433444444555544224422332333342233442233333422333334422344223334433442342233233333344322333333343344455555556555555555555555555554466555555
-- 081:545554223333344233333442233442233344334422422332333333344323333333333344332233323343342244222333333442233444444544422333334422334423333443344234223223333333442233333334333443422333233334422442233333334455555545555555545555555555554665555555
-- 082:555554224223323333333443223333333433344322233323343344224422332333344233344223333442233333442223442233334333444542233233333334432233333334333443222333233434422344223323334422333442233334422333334422334445555565555555545555555555544665555555
-- 083:556542223333334434422442233323333442333442233333442233333442233442233334334442342233233333334432233333333433344322333323343344224422332333344223334422333344223333344422334423333443344223422332333333344345545565555545555555555555544665555555
-- 084:554542233333344223333442233344223333433442224422332334333444332333333333333443223333333443344234222332233334223344422333334422333334422333442233334334422342233233333334443223332333333334432233333334334445545455555545555544555555546655555555
-- 085:555522234422333344333442342233223333333344223333333344334433422333223333442234442233333344223333442223334422333333344222442233233433334433223332333333334432233333334443344334223332233334422344222333333444554455555555555545555555446655555555
-- 086:554432233333333433344432223333333433442244222332333344422334442233333442233333344223344422333344334422342233223333333444322333333334333443322333323333344222442223323333442233344422333344222333334442233444555655555555555545555555446555555555
-- 087:554222333223333442233442223333334422333344422333344223333433444223442233233433334443322333233333333344222333333344333442342223322333334422344422333333444223333444223334422233334334442244223333334333344334554555555555555555555555466555555555
-- 088:544223333334422333333442223344223333343334422344223322333333344432233333333333334433222333323343344422442223323333344223334442233333442233333344422334442233334433344223422332233333333444223333333334333444454555555555555555554554466556555555
-- 089:542223442223333443334442332233322333333334442233333333344333443342233332333334442234422233333334422233334422233334422333333344422234422333334433344433422333233333333344322333333333443344234222333223333344456555555555555555554554465566555555
-- 090:443322333323333333334432223333333344334442342223332233334442233444223333333442233333444222333442233333433344222442223323333333344432223333333333333444322233333333433344234422233223333344223334422233333344456555555555555555554544665566555555
-- 091:422233333333443344223442223332333334422333444222333334442233333344422333442223333443334422244223332333333333443222333333333433334433222333323334334442244422233233333442223334442233333344223333333442223344445555555555555555554544665566555555
-- 092:422233233333442223334442223333344422333333344222334442233333443334442344223322233333333444322333333333343334443322233332233433444223444223332333344422333344422233334442233333334442223444223333344333344223455555555555555555555546655555555555
-- 093:222333334442233333334442223344223333344433344423322233222333333333444223333333333443334423322233332233333444223444222333333334422233334442223333444223333333344422234422233333443333444334223332233333333334455555555555555555555446655555555555
-- 094:222344422333334443334442332223332233333333344422233333333334433344233422233322333333442223444222333333334422233334442223333444223333343334422234442233333344333344433322333223333333333444222333333333444334444555554554555555555446555555555555
-- 095:334223332233333333334442223333333333443334423342223332223333344422334442223333333444223333344422233333442223333333344422234442233333344333344433322333322333333333344322233333333344333444234422333322333334444555555554555555555466555555555555
-- 096:223333333333443334423342223333223333334422234442223333333344422233333444222333344422333333333444222344222333333443333444233222333223333333333444222333333333344433444234422233322233333442223344422233333333444555555555555555554466555555555555
-- 097:233332223333344422234442223333333334422233333444222333334422233333333444422234422233333344333344423342233332233333333334442223333333333444334442334222333322333333442223344422233333333442223333344422223333444455555555554455554465555555555555
-- 098:233333333344222333334442223333344422233333333444222334442233333344333344442332223332233333333333444222333333333344433344233422233332223333344422234442222333333334442233333344422233333442223333343334442223444455555555554555554665555555555555
-- 099:333333444222333333334442223344422233333444333344423342223332233333333334444222333333333334433344433322223333223334334442223444222333333333444222333334442223333344422233333333444422234442223333334433334442333455555555554555544665555555555555
-- 100:333442223333334433334442234422233322333333333344432223333333333344333344433322233333233334334442223444222333233333344422233334442223333334442223333333344422223344422333333444333444423342223332233333333333444445555555555555546655555555555555
-- 101:442223332233333333334443322233333333333433333444332223333332333443334442244442223332233333344222333344422223333334442223333333344422233344422233333344333444422344222333223333333333444432223333333333343333344445555455555555446655555555555555
-- 102:233333233333333333344432223333333333344333444223442222333222333334442223334444222333333334442223333334444222333344422233333343333444222444222333223334333333444333223333333333333333334443322233333323334433344445554555555555446555555555555555
-- 103:333333333344433344423342223333322333333444222334444222333333333444222333333444422233333444222333333333344422223444222332333343333334443332223333223333333333334443222333333333334443334442334422233332223333344444555555555555466555555555555555
-- 104:333323333433344422244442222333233333344422233333444222233333344422233333333344442223344422233333344433334444233422233322233333333333444422223333333333344433344423342222333332233343334442223444422233333333334444555555555554466555555555555555
-- 105:322333333444422233344442222333333344422233333333444422233334442223333334433334442223442223332223334333333344433222333333333333433333444333222233333323334433344422244442223333233333344442223333444422233333334444555545555554465555556555555555
-- 106:333333444222233333344442222333344422223333334333344422224442222333233334333333444333222233332233333333333344433222333333333334443334442233442222333222333333444222233344422223333333344422223333333444222233334444455545555554665555556655555555
-- 107:333444222233333333344442222334442223333333443333344442334222333322233333333333344432223333333333333443333444333422223333322333333344422223444422223333333333444222333333444422233333344422233333333333444222233444455545555544665555556655555555
-- 108:444222233333344333344442223442223333223333333333344443322233333333333334333333444332222333333323333433344442224444222333322333333444422233334444222233333334442222333333334444222233344422233333334443333444222344455555555544655555566655555555
-- 109:222333323334433333344443332222333322333333333333344443222233333333333444333344422344222233332223333333444222233444422223333333334444222333333344442222333334442223333333433334444222244422233332333343333333444333445555555546655555556555555555
-- 110:333322233333333333344443222333333333333334333334444333222233333322333343334442222344422223333233333334442223333334444222233333344442223333333333444422223344422223333334444333344442233422233332223333333333334444345555455446555555555555555555
-- 111:333233333333333333444332222333333333333444333444222344422223333223333333444222233344442222333333333444422233333333444422223333444422233333334433334444222344422233332233333333333344443322233333333333333333333344445555455466555555555555555555
-- 112:333333334443333444433342222333332223333333344422223444422223333333333344442223333334444222233333334442222333333433334444222234444222333333334433333344442333222233332223333333333333444422223333333333333444333344444555454466555555555555555555
-- 113:333333344333444422244442222333322333333344442223333344442222333333334444222333333333444422223333444422233333334443333444422234442223333223333333333333444433222333333333333334333333444433322223333333233334433344444555554465555555555555555555
-- 114:223333333344422223344442222333333333334444222333333344442222333333444422223333333333344442222234442222333233334443333344444333322233333223333333333333334443222233333333333334443333444423344222233333222333333344444455554665555555555555555555
-- 115:333333344442223333344442222333333333444222233333333344444222233334442222333333344433334444222334422223332223333333333333444433222333333333333333433333344443332222333333323333343333444222244444222233332333333334444455544665555555555555555555
-- 116:333344442222333333344442222333333444422223333333433334444222233444222233333333344333333444423333222333332223333333333333344443222233333333333334444333444422334422223333322233333333444222233344442222333333333334444455544655555555555555555555
-- 117:334442222333333333344442222333344442222333333344433334444422234442223333222333333333333344443322223333333333333334333333444433322223333333323333443333444422244444222233332233333333444222233333444442222333333334444445546655555555555555555555
-- 118:444222333333333333444442222334444222333333333444333333444423333222233332223333333333333334444222223333333333333344433334444233344222233333222233333334444222233444442222333333333334444222233333333444422223333334444445446555555555555555555555
-- 119:222233333334443333444442222444222233332223333433333333444443322223333333333333334333333344433322222333333332333344333344442222444422223333322333333334444222333334444422223333333334444222233333333334444222223333444445466555555555555555555555
-- 120:233333333444433333444442333422223333222233333333333333344442222233333333333333344433334444233342222233333322233333333444422223344444222233333333333344442222333333344444222233333334444222233333333333344444222233444444466555555555555555555555
-- 121:332223333433333333444443332222333333323333333333333334444333222233333333333333444333344442223444222223333222333333334444222233334444422222333333333344422223333333333444442222333334444222233333333443333344442222344444465555555555555555555555
-- 122:222233333333333333444443222233333333333333334433333344443333222223333332223333333334444222233444422222333333333333344442222333333344442222233333333444422223333333333334444422223334444222233333333444433333444442233344665555555555555555555555
-- 123:233333333333333333444432222233333333333333444433334444223344422223333322223333333344442222333344442222233333333333444422223333333334444422222333334444222233333333443333344444222234444222233332233334433333333444433334565556655555555555555555
-- 124:333333344333333444433332222233333333233333443333444422224444422222333332333333333444422223333344444222223333333334444222233333333333344442222233334444222233333333444433333444442233444222233332222333333333333334444434555556655555555555555555
-- 125:333334443333344442333442222233333322233333333344442222333444442222333333333333344442222333333334444422222333333344442222333333333333334444422222344442222333333333344433333334444433332222233333222333333333333333344445555556555555555555555555
-- 126:333444333334444222344442222233333222333333334444222223333444442222233333333333444422223333333333444442222233333444422222333333334443333344442222244442222333322233333433333333344444332222233333332333333334333333334444445555555555555555555555
-- 127:333433334444422223444442222233333233333333444442222333333344444222233333333344442222233333333333344444222223334444222223333333344443333334444422333422222333322223333333333333333444442222233333333333333334443333334444445555555555555555555555
-- 128:333333444422222333444442222233333333333344444222233333333344444222223333333444422223333333334333334444422222344442222233332333334443333333444443333322223333332223333333333333333344443322222333333333333333444433334444445555555555555555555555
-- 129:333344442222233333444442222233333333333444422223333333333344444222222333344444222233333333344433333444442222344422222333322223333333333333334444433222223333333333333333343333333344443333222223333333322333334433334444444555555555555555555555
-- 130:334444222233333333444442222233333333344442222233333333333334444422222333444422222333333333444433333344444223334422223333322223333333333333333444443222223333333333333333344433333344443333442222233333332223333333333444444555555555555455555555
-- 131:444422223333333333444442222233333334444222223333333334333334444422222244444222233333233333344333333334444433333222233333332233333333333333333344443322222333333333333333344443333444442233444422222333332222333333333444444555555555554455555555
-- 132:422222333333333333444442222233333444442222333333333444333333444442222344442222333332223333343333333333444443332222333333333333333333443333333444443332222223333333332333334443333444442222444444222223333322333333333444444455555555554445555555
-- 133:222233333333333334444442222233344444222233333333344444333333444442223334222223333222223333333333333333344444322223333333333333333334444333333444433333422222333333322223333333333444442222334444422222233333333333333344444455555555554455555555
-- 134:223333333334333334444442222234444422222333323333334433333333344444333332222333333322233333333333333333344444322222233333333333333334444333334444422334442222223333322222333333333444422222333344444222222333333333333344444455555555555455555555
-- 135:333333333444333334444442222344442222233332222333334333333333344444333222223333333333333333333433333333444443332222223333333332333333444333344444222234444422222333333223333333333444422222333333444442222223333333333344444445555555555455555555
-- </SCREEN>

-- <PALETTE>
-- 000:0000001c181c3838385d5d5d7d7d7dbababad6d6d6fffffff21018ff55553499ba65eef6b2f6faff8d18ffbe3c283040
-- </PALETTE>

