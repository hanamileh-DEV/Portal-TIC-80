-- title:  Portal 3D lvl editor
-- author: HanamileH, soxfox42
-- desc:   version 1.0 (powered by UniTIC v 1.3)
-- script: lua
-- saveid: portal3d_unitic_lvl_editor

local save_reminder = true
local easter_eggs = false

local map_bank = pmem(0)
local map_bank_state = {false,true,false,false,false,false,false,false} -- false x8
--[[
Everything related to portals or other less important
parts has been cut out in order to speed up the code
]]

--[[
license:

Copyright 2022 HanamileH
Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated
documentation files (the "Software"), to deal in the
Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall
be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH
THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
]]


--- Compression routines - placed high as they may be used to compress various pieces of data in the source
local function bitwriter()
	return {
		cur = 0,
		bits = 0,
		output = {},

		write = function(self, val, bits)
			self.cur = self.cur | (val << self.bits)
			self.bits = self.bits + bits
			self:flush()
		end,
		flush = function(self)
			while self.bits >= 8 do
				self.output[#self.output + 1] = string.char(self.cur & 0xFF)
				self.bits = self.bits - 8
				self.cur = self.cur >> 8
			end
		end,
		finish = function(self)
			self.output[#self.output + 1] = string.char(self.cur)
			self.bits = 0
			self.cur = 0
			return table.concat(self.output)
		end,
	}
end

local function bitreader(data)
	return {
		data = data,
		pos = 1,
		bits = 0,

		read = function(self, bits)
			local value = 0
			local cur = 0

			if self.bits > 0 then
				if bits >= (8 - self.bits) then
					value = self:byte() >> self.bits
					cur = 8 - self.bits
					self.bits = 0
					self.pos = self.pos + 1
				else
					value = (self:byte() >> self.bits) & ((1 << bits) - 1)
					self.bits = self.bits + bits
					return value
				end
			end

			while (cur + 8) <= bits do
				value = value | (self:byte() << cur)
				cur = cur + 8
				self.pos = self.pos + 1
			end

			if cur < bits then
				value = value | (self:byte() & ((1 << bits - cur) - 1)) << cur
				self.bits = bits - cur
			end

			return value
		end,
		byte = function(self)
			return string.byte(self.data, self.pos, self.pos)
		end,
	}
end

local function compress(str)
	local writer = bitwriter()

	local codes = {}
	for i = 1, 256 do
		codes[string.char(i - 1)] = i
	end
	local count = 256
	local bits = 9
	local inc = 512

	local start = 1

	while start <= #str do
		for i = start, #str do
			local cur = str:sub(start, i)
			if i == #str then
				writer:write(codes[cur], bits)
				start = i + 1
				break
			end

			local nxt = str:sub(start, i + 1)
			if not codes[nxt] then
				writer:write(codes[cur], bits)
				count = count + 1
				codes[nxt] = count
				start = i + 1
				break
			end
		end

		if count == inc then
			inc = inc * 2
			bits = bits + 1
		end
	end

	writer:write(0, bits)
	return writer:finish()
end

local function decompress(str)
	local reader = bitreader(str)

	local codes = {}
	for i = 1, 256 do
		codes[i] = string.char(i - 1)
	end
	local bits = 9
	local inc = 512

	local result = {}
	local prev

	while true do
		local code = reader:read(bits)
		if code == 0 then
			return table.concat(result)
		end

		if codes[code] then
			result[#result + 1] = codes[code]
			if prev then
				codes[#codes + 1] = prev .. codes[code]:sub(1, 1)
			end
			prev = codes[code]
		else
			local new = prev .. prev:sub(1, 1)
			result[#result + 1] = new
			codes[#codes + 1] = new
			prev = new
		end

		if #codes == inc - 1 then
			inc = inc * 2
			bits = bits + 1
		end
	end
end

local F, R, min, max, abs = math.floor, math.random, math.min, math.max, math.abs
local pi2 = math.pi / 2

--camera
local cam = { x = 0, y = 0, z = 0, tx = 0, ty = 0 }
--player
local plr = { x = 0, y = 64, z = 0, tx = 0, ty = 0, vy=0 , xy=false , noclip = true , cd = 0 , dt= 1}

--engine settings:
local unitic = {
	version = 1.3, --engine version
	--drawing
	fov = 80, --lens distance to camera
	--system tables (dont touch)
	poly = {},
	obj  = {}, --objects
	p    = {} --particles
}


-- Please note than some objects do not have collisions. (coll={})
local model={
	{--cube (1)
	v={{ 23.9, 23.9, 23.9},{ 23.9,-23.9, 23.9},{ 23.9, 23.9,-23.9},{ 23.9,-23.9,-23.9},{-23.9, 23.9, 23.9},{-23.9,-23.9, 23.9},{-23.9, 23.9,-23.9},{-23.9,-23.9,-23.9},},
	f={
		 {5,3,1,uv={{96,256},{72,232},{72,256},-1},f=2},
		 {3,8,4,uv={{96,232},{72,256},{96,256},-1},f=2},
		 {7,6,8,uv={{96,232},{72,256},{96,256},-1},f=2},
		 {2,8,6,uv={{96,256},{72,232},{72,256},-1},f=2},
		 {1,4,2,uv={{96,232},{72,256},{96,256},-1},f=2},
		 {5,2,6,uv={{96,232},{72,256},{96,256},-1},f=2},
		 {5,7,3,uv={{96,256},{96,232},{72,232},-1},f=2},
		 {3,7,8,uv={{96,232},{72,232},{72,256},-1},f=2},
		 {7,5,6,uv={{96,232},{72,232},{72,256},-1},f=2},
		 {2,4,8,uv={{96,256},{96,232},{72,232},-1},f=2},
		 {1,3,4,uv={{96,232},{72,232},{72,256},-1},f=2},
		 {5,1,2,uv={{96,232},{72,232},{72,256},-1},f=2},
	},
	coll={{-24,-24,-24,24,24,24}} --collision cube {XYZ, XYZ}
	},
	{--cube companion (2)
	v={{ 23.9, 23.9, 23.9},{ 23.9,-23.9, 23.9},{ 23.9, 23.9,-23.9},{ 23.9,-23.9,-23.9},{-23.9, 23.9, 23.9},{-23.9,-23.9, 23.9},{-23.9, 23.9,-23.9},{-23.9,-23.9,-23.9},},
	f={
		 {5,3,1,uv={{96,256-24},{72,232-24},{72,256-24},-1},f=2},
		 {3,8,4,uv={{96,232-24},{72,256-24},{96,256-24},-1},f=2},
		 {7,6,8,uv={{96,232-24},{72,256-24},{96,256-24},-1},f=2},
		 {2,8,6,uv={{96,256-24},{72,232-24},{72,256-24},-1},f=2},
		 {1,4,2,uv={{96,232-24},{72,256-24},{96,256-24},-1},f=2},
		 {5,2,6,uv={{96,232-24},{72,256-24},{96,256-24},-1},f=2},
		 {5,7,3,uv={{96,256-24},{96,232-24},{72,232-24},-1},f=2},
		 {3,7,8,uv={{96,232-24},{72,232-24},{72,256-24},-1},f=2},
		 {7,5,6,uv={{96,232-24},{72,232-24},{72,256-24},-1},f=2},
		 {2,4,8,uv={{96,256-24},{96,232-24},{72,232-24},-1},f=2},
		 {1,3,4,uv={{96,232-24},{72,232-24},{72,256-24},-1},f=2},
		 {5,1,2,uv={{96,232-24},{72,232-24},{72,256-24},-1},f=2},
	},
	coll={{-24,-24,-24,24,24,24}}
	},
	{ --cube dispenser (3)
		v={
			{ 32, 31, 32},
			{ 32,-32, 32},
			{ 32, 31,-32},
			{ 32,-32,-32},
			{-32, 31, 32},
			{-32,-32, 32},
			{-32, 31,-32},
			{-32,-32,-32},
		},
		f={
			{5,3,1,uv={{120,232},{96, 208},{96 ,232},-1},f=3},
			{3,8,4,uv={{120,232},{96, 256},{120,256},-1},f=3},
			{7,6,8,uv={{120,232},{96, 256},{120,256},-1},f=3},
			{2,8,6,uv={{120,232},{96, 208},{96 ,232},-1},f=3},
			{1,4,2,uv={{120,232},{96, 256},{120,256},-1},f=3},
			{5,2,6,uv={{120,232},{96, 256},{120,256},-1},f=3},
			{5,7,3,uv={{120,232},{120,208},{96 ,208},-1},f=3},
			{3,7,8,uv={{120,232},{96, 232},{96 ,256},-1},f=3},
			{7,5,6,uv={{120,232},{96, 232},{96 ,256},-1},f=3},
			{2,4,8,uv={{120,232},{120,208},{96 ,208},-1},f=3},
			{1,3,4,uv={{120,232},{96, 232},{96 ,256},-1},f=3},
			{5,1,2,uv={{120,232},{96, 232},{96 ,256},-1},f=3}
		},
		coll={{-24,-24,-24,24,24,24}}
	},
	{--light bridge (-X) (4)
		v={{-48,4, 48},{ 48,4, 48},{-48,4,-48},{ 48,4,-48}},
		f={{2,1,4,uv={{0,232},{16,232},{0,248}},f=3},{1,4,3,uv={{16,232},{0,248},{16,248}},f=3}},
		coll={{-48,0,-48,48,0,48}}
	},
	{ --light bridge (+X) (5)
		v={{-48,4,-48},{ 48,4,-48},{-48,4, 48},{ 48,4, 48}},
		f={{1,2,3,uv={{0,232},{16,232},{0,248}},f=3},{2,3,4,uv={{16,232},{0,248},{16,248}},f=3}},
		coll={{-48,0,-48,48,0,48}}
	},
	{--light bridge (-Z) (6)
		v={{-48,4,-48},{-48,4, 48},{ 48,4,-48},{ 48,4, 48}},
		f={{2,1,4,uv={{0,232},{16,232},{0,248}},f=3},{1,4,3,uv={{16,232},{0,248},{16,248}},f=3}},
		coll={{-48,0,-48,48,0,48}}
	},
	{--light bridge (+Z) (7)
		v={{ 48,4, 48},{ 48,4,-48},{-48,4, 48},{-48,4,-48}},
		f={{2,1,4,uv={{0,232},{16,232},{0,248}},f=3},{1,4,3,uv={{16,232},{0,248},{16,248}},f=3}},
		coll={{-48,0,-48,48,0,48}}
	},
	{--button -X (8)
		v={
			{6   ,46  ,6   },
			{6   ,0   ,6   },
			{6   ,46  ,-6  },
			{6   ,0   ,-6  },
			{-6  ,51.2,6   },
			{-6  ,0   ,6   },
			{-6  ,51.2,-6  },
			{-6  ,0   ,-6  },
			{-4.5,51.2,-4.5},
			{-4.5,51.2,4.5 },
			{5.5 ,47.2,-4.5},
			{5.5 ,47.2,4.5 },
		},
		f={
			{5 ,3 ,1 ,uv={{125,136},{120,133},{120,136},-1},f=2},
			{3 ,8 ,4 ,uv={{128,128},{125,132},{128,132},-1},f=2},
			{7 ,6 ,8 ,uv={{128,128},{125,132},{128,132},-1},f=2},
			{1 ,4 ,2 ,uv={{125,132},{128,128},{125,128},-1},f=2},
			{6 ,1 ,2 ,uv={{128,132},{125,128},{125,132},-1},f=2},
			{10,11,12,uv={{125,133},{120,128},{120,133},-1},f=3},
			{5 ,7 ,3 ,uv={{125,136},{125,133},{120,133},-1},f=2},
			{3 ,7 ,8 ,uv={{128,128},{125,128},{125,132},-1},f=2},
			{7 ,5 ,6 ,uv={{128,128},{125,128},{125,132},-1},f=2},
			{1 ,3 ,4 ,uv={{125,132},{128,132},{128,128},-1},f=2},
			{6 ,5 ,1 ,uv={{128,132},{128,128},{125,128},-1},f=2},
			{10,9 ,11,uv={{125,133},{125,128},{120,128},-1},f=3},
		},
		coll={{-6,0,-6,6,52,6}}
	},
	{--button +X (9)
		v={
			{-6   ,46  ,-6  },
			{-6   ,0   ,-6  },
			{-6   ,46  ,6   },
			{-6   ,0   ,6   },
			{6    ,51.2,-6  },
			{6    ,0   ,-6  },
			{6    ,51.2,6   },
			{6    ,0   ,6   },
			{4.5  ,51.2,4.5 },
			{4.5  ,51.2,-4.5},
			{-5.5 ,47.2,4.5 },
			{-5.5 ,47.2,-4.5},
		},
		f={
			{5 ,3 ,1 ,uv={{125,136},{120,133},{120,136},-1},f=2},
			{3 ,8 ,4 ,uv={{128,128},{125,132},{128,132},-1},f=2},
			{7 ,6 ,8 ,uv={{128,128},{125,132},{128,132},-1},f=2},
			{1 ,4 ,2 ,uv={{125,132},{128,128},{125,128},-1},f=2},
			{6 ,1 ,2 ,uv={{128,132},{125,128},{125,132},-1},f=2},
			{10,11,12,uv={{125,133},{120,128},{120,133},-1},f=3},
			{5 ,7 ,3 ,uv={{125,136},{125,133},{120,133},-1},f=2},
			{3 ,7 ,8 ,uv={{128,128},{125,128},{125,132},-1},f=2},
			{7 ,5 ,6 ,uv={{128,128},{125,128},{125,132},-1},f=2},
			{1 ,3 ,4 ,uv={{125,132},{128,132},{128,128},-1},f=2},
			{6 ,5 ,1 ,uv={{128,132},{128,128},{125,128},-1},f=2},
			{10,9 ,11,uv={{125,133},{125,128},{120,128},-1},f=3},
		},
		coll={{-6,0,-6,6,52,6}}
	},
	{--button -Z (10)
		v={
			{-6  ,46  ,6   },
			{-6  ,0   ,6   },
			{6   ,46  ,6   },
			{6   ,0   ,6   },
			{-6  ,51.2,-6  },
			{-6  ,0   ,-6  },
			{6   ,51.2,-6  },
			{6   ,0   ,-6  },
			{4.5 ,51.2,-4.5},
			{-4.5,51.2,-4.5},
			{4.5 ,47.2,5.5 },
			{-4.5,47.2,5.5 },
		},
		f={
			{5 ,3 ,1 ,uv={{125,136},{120,133},{120,136},-1},f=2},
			{3 ,8 ,4 ,uv={{128,128},{125,132},{128,132},-1},f=2},
			{7 ,6 ,8 ,uv={{128,128},{125,132},{128,132},-1},f=2},
			{1 ,4 ,2 ,uv={{125,132},{128,128},{125,128},-1},f=2},
			{6 ,1 ,2 ,uv={{128,132},{125,128},{125,132},-1},f=2},
			{10,11,12,uv={{125,133},{120,128},{120,133},-1},f=3},
			{5 ,7 ,3 ,uv={{125,136},{125,133},{120,133},-1},f=2},
			{3 ,7 ,8 ,uv={{128,128},{125,128},{125,132},-1},f=2},
			{7 ,5 ,6 ,uv={{128,128},{125,128},{125,132},-1},f=2},
			{1 ,3 ,4 ,uv={{125,132},{128,132},{128,128},-1},f=2},
			{6 ,5 ,1 ,uv={{128,132},{128,128},{125,128},-1},f=2},
			{10,9 ,11,uv={{125,133},{125,128},{120,128},-1},f=3},
		},
		coll={{-6,0,-6,6,52,6}}
	},
	{--button +Z (11)
		v={
			{6   ,46  ,-6   },
			{6   ,0   ,-6   },
			{-6  ,46  ,-6   },
			{-6  ,0   ,-6   },
			{6   ,51.2,6    },
			{6   ,0   ,6    },
			{-6  ,51.2,6    },
			{-6  ,0   ,6    },
			{-4.5,51.2,4.5  },
			{4.5 ,51.2,4.5  },
			{-4.5,47.2,-5.5 },
			{4.5 ,47.2,-5.5 },
		},
		f={
			{5 ,3 ,1 ,uv={{125,136},{120,133},{120,136},-1},f=2},
			{3 ,8 ,4 ,uv={{128,128},{125,132},{128,132},-1},f=2},
			{7 ,6 ,8 ,uv={{128,128},{125,132},{128,132},-1},f=2},
			{1 ,4 ,2 ,uv={{125,132},{128,128},{125,128},-1},f=2},
			{6 ,1 ,2 ,uv={{128,132},{125,128},{125,132},-1},f=2},
			{10,11,12,uv={{125,133},{120,128},{120,133},-1},f=3},
			{5 ,7 ,3 ,uv={{125,136},{125,133},{120,133},-1},f=2},
			{3 ,7 ,8 ,uv={{128,128},{125,128},{125,132},-1},f=2},
			{7 ,5 ,6 ,uv={{128,128},{125,128},{125,132},-1},f=2},
			{1 ,3 ,4 ,uv={{125,132},{128,132},{128,128},-1},f=2},
			{6 ,5 ,1 ,uv={{128,132},{128,128},{125,128},-1},f=2},
			{10,9 ,11,uv={{125,133},{125,128},{120,128},-1},f=3},
		},
		coll={{-6,0,-6,6,52,6}}
	},
	{ --turret -X (12)
		v={
			 {7,0  ,0},
			 {28,27 ,0},
			 {7,27 ,0},
			 {28,0  ,0},
			 {-24,0  ,-19},
			 {-4,27 ,-8},
			 {-24,27 ,-19},
			 {-4,0  ,-8},
			 {-24,0  ,18},
			 {-4,27 ,7},
			 {-24,27 ,18},
			 {-4,0  ,7},
			 {12,41 ,-12},
			 {8,12 ,-9},
			 {-9,67 ,-9},
			 {-12,41 ,-12},
			 {-9,12 ,-9},
			 {0,76 ,0},
			 {-9,67 ,8},
			 {-12,41 ,12},
			 {-9,12 ,8},
			 {8,67 ,8},
			 {12,41 ,12},
			 {8,12 ,8},
			 {8,67 ,-9},
			 {-12,37 ,0},
			 {-12,42 ,4},
			 {-12,42 ,-5},
			 {-12,47 ,0},
			 {12,41 ,-22},
			 {8,12 ,-19},
			 {-9,67 ,-19},
			 {-12,41 ,-22},
			 {-9,12 ,-19},
			 {8,67 ,-19},
			 {-9,67 ,18},
			 {-12,41 ,22},
			 {-9,12 ,18},
			 {8,67 ,18},
			 {12,41 ,22},
			 {8,12 ,18},
			 {0,28 ,20},
			 {0,55 ,20},
			 {0,28 ,-20},
			 {0,55 ,-20},
			 {0,43 ,-22},
			 {0,43 ,21},
		},
		f={
			{3 ,4 ,1 ,uv={{124,138},{120,144},{124,144},-1},f=3},
			{7 ,8 ,5 ,uv={{120,138},{124,144},{120,144},-1},f=3},
			{11,12,9 ,uv={{120,138},{124,144},{120,144},-1},f=3},
			{45,47,46,uv={{124,138},{123,136},{123,138},-1},f=3},
			{44,47,42,uv={{122,138},{123,136},{122,136},-1},f=3},
			{3 ,2 ,4 ,uv={{124,138},{120,138},{120,144},-1},f=3},
			{7 ,6 ,8 ,uv={{120,138},{124,138},{124,144},-1},f=3},
			{11,10,12,uv={{120,138},{124,138},{124,144},-1},f=3},
			{45,43,47,uv={{124,138},{124,136},{123,136},-1},f=3},
			{44,46,47,uv={{122,138},{123,138},{123,136},-1},f=3},
			{25,18,15,uv={{126,138},{128,138},{128,136},-1},f=2},
			{25,16,13,uv={{125,140},{125,140},{126,139},-1},f=2},
			{13,17,14,uv={{125,140},{125,140},{126,139},-1},f=2},
			{15,20,16,uv={{124,138},{124,139},{125,138},-1},f=2},
			{17,20,21,uv={{124,138},{124,139},{125,138},-1},f=2},
			{15,18,19,uv={{124,138},{124,139},{125,138},-1},f=2},
			{20,22,23,uv={{125,140},{125,140},{126,139},-1},f=2},
			{21,23,24,uv={{125,140},{125,140},{126,139},-1},f=2},
			{19,18,22,uv={{124,138},{124,139},{125,138},-1},f=2},
			{22,18,25,uv={{124,138},{124,139},{125,138},-1},f=2},
			{22,13,23,uv={{124,138},{124,139},{125,138},-1},f=2},
			{23,14,24,uv={{124,138},{124,139},{125,138},-1},f=2},
			{25,15,16,uv={{125,140},{125,140},{126,139},-1},f=2},
			{13,16,17,uv={{125,140},{125,140},{126,139},-1},f=2},
			{15,19,20,uv={{124,138},{124,139},{125,138},-1},f=2},
			{17,16,20,uv={{124,138},{124,139},{125,138},-1},f=2},
			{20,19,22,uv={{125,140},{125,140},{126,139},-1},f=2},
			{21,20,23,uv={{125,140},{125,140},{126,139},-1},f=2},
			{22,25,13,uv={{124,138},{124,139},{125,138},-1},f=2},
			{23,13,14,uv={{124,138},{124,139},{125,138},-1},f=2},
			{35,33,30,uv={{128,136},{124,140},{128,140},-1},f=3},
			{30,34,31,uv={{128,143},{124,140},{124,143},-1},f=3},
			{36,40,37,uv={{128,136},{124,140},{128,140},-1},f=3},
			{38,40,41,uv={{128,143},{124,140},{124,143},-1},f=3},
			{35,32,33,uv={{128,136},{124,136},{124,140},-1},f=3},
			{30,33,34,uv={{128,143},{128,140},{124,140},-1},f=3},
			{36,39,40,uv={{128,136},{124,136},{124,140},-1},f=3},
			{38,37,40,uv={{128,143},{128,140},{124,140},-1},f=3},
			{29,26,28,uv={{122,138},{120,136},{120,138},-1},f=2},
			{29,27,26,uv={{122,138},{122,136},{120,136},-1},f=2},
		},
		coll={{-12,0,-12,12,69,12}}
	},
	{ --turret +X (13)
		v={
			 {-7,0,0},
			 {-28,27,0},
			 {-7,27,0},
			 {-28,0,0},
			 {24,0,19},
			 {4,27,8},
			 {24,27,19},
			 {4,0,8},
			 {24,0,-18},
			 {4,27,-7},
			 {24,27,-18},
			 {4,0,-7},
			 {-12,41,12},
			 {-8,12,9},
			 {9,67,9},
			 {12,41,12},
			 {9,12,9},
			 {0,76,0},
			 {9,67,-8},
			 {12,41,-12},
			 {9,12,-8},
			 {-8,67,-8},
			 {-12,41,-12},
			 {-8,12,-8},
			 {-8,67,9},
			 {12,37,0},
			 {12,42,-4},
			 {12,42,5},
			 {12,47,0},
			 {-12,41,22},
			 {-8,12,19},
			 {9,67,19},
			 {12,41,22},
			 {9,12,19},
			 {-8,67,19},
			 {9,67,-18},
			 {12,41,-22},
			 {9,12,-18},
			 {-8,67,-18},
			 {-12,41,-22},
			 {-8,12,-18},
			 {0,28,-20},
			 {0,55,-20},
			 {0,28,20},
			 {0,55,20},
			 {0,43,22},
			 {0,43,-21},
		},
		f={
			{3 ,4 ,1 ,uv={{124,138},{120,144},{124,144},-1},f=3},
			{7 ,8 ,5 ,uv={{120,138},{124,144},{120,144},-1},f=3},
			{11,12,9 ,uv={{120,138},{124,144},{120,144},-1},f=3},
			{45,47,46,uv={{124,138},{123,136},{123,138},-1},f=3},
			{44,47,42,uv={{122,138},{123,136},{122,136},-1},f=3},
			{3 ,2 ,4 ,uv={{124,138},{120,138},{120,144},-1},f=3},
			{7 ,6 ,8 ,uv={{120,138},{124,138},{124,144},-1},f=3},
			{11,10,12,uv={{120,138},{124,138},{124,144},-1},f=3},
			{45,43,47,uv={{124,138},{124,136},{123,136},-1},f=3},
			{44,46,47,uv={{122,138},{123,138},{123,136},-1},f=3},
			{25,18,15,uv={{126,138},{128,138},{128,136},-1},f=2},
			{25,16,13,uv={{125,140},{125,140},{126,139},-1},f=2},
			{13,17,14,uv={{125,140},{125,140},{126,139},-1},f=2},
			{15,20,16,uv={{124,138},{124,139},{125,138},-1},f=2},
			{17,20,21,uv={{124,138},{124,139},{125,138},-1},f=2},
			{15,18,19,uv={{124,138},{124,139},{125,138},-1},f=2},
			{20,22,23,uv={{125,140},{125,140},{126,139},-1},f=2},
			{21,23,24,uv={{125,140},{125,140},{126,139},-1},f=2},
			{19,18,22,uv={{124,138},{124,139},{125,138},-1},f=2},
			{22,18,25,uv={{124,138},{124,139},{125,138},-1},f=2},
			{22,13,23,uv={{124,138},{124,139},{125,138},-1},f=2},
			{23,14,24,uv={{124,138},{124,139},{125,138},-1},f=2},
			{25,15,16,uv={{125,140},{125,140},{126,139},-1},f=2},
			{13,16,17,uv={{125,140},{125,140},{126,139},-1},f=2},
			{15,19,20,uv={{124,138},{124,139},{125,138},-1},f=2},
			{17,16,20,uv={{124,138},{124,139},{125,138},-1},f=2},
			{20,19,22,uv={{125,140},{125,140},{126,139},-1},f=2},
			{21,20,23,uv={{125,140},{125,140},{126,139},-1},f=2},
			{22,25,13,uv={{124,138},{124,139},{125,138},-1},f=2},
			{23,13,14,uv={{124,138},{124,139},{125,138},-1},f=2},
			{35,33,30,uv={{128,136},{124,140},{128,140},-1},f=3},
			{30,34,31,uv={{128,143},{124,140},{124,143},-1},f=3},
			{36,40,37,uv={{128,136},{124,140},{128,140},-1},f=3},
			{38,40,41,uv={{128,143},{124,140},{124,143},-1},f=3},
			{35,32,33,uv={{128,136},{124,136},{124,140},-1},f=3},
			{30,33,34,uv={{128,143},{128,140},{124,140},-1},f=3},
			{36,39,40,uv={{128,136},{124,136},{124,140},-1},f=3},
			{38,37,40,uv={{128,143},{128,140},{124,140},-1},f=3},
			{29,26,28,uv={{122,138},{120,136},{120,138},-1},f=2},
			{29,27,26,uv={{122,138},{122,136},{120,136},-1},f=2},
		},
		coll={{-12,0,-12,12,69,12}}
	},
	{ --turret -Z (14)
		v={
			{0  ,0  ,7},
			{0  ,27 ,28},
			{0  ,27 ,7},
			{0  ,0  ,28},
			{19 ,0  ,-24},
			{8  ,27 ,-4},
			{19 ,27 ,-24},
			{8  ,0  ,-4},
			{-18,0  ,-24},
			{-7 ,27 ,-4},
			{-18,27 ,-24},
			{-7 ,0  ,-4},
			{12 ,41 ,12},
			{9  ,12 ,8},
			{9  ,67 ,-9},
			{12 ,41 ,-12},
			{9  ,12 ,-9},
			{0  ,76 ,0},
			{-8 ,67 ,-9},
			{-12,41 ,-12},
			{-8 ,12 ,-9},
			{-8 ,67 ,8},
			{-12,41 ,12},
			{-8 ,12 ,8},
			{9  ,67 ,8},
			{0  ,37 ,-12},
			{-4 ,42 ,-12},
			{5  ,42 ,-12},
			{0  ,47 ,-12},
			{22 ,41 ,12},
			{19 ,12 ,8},
			{19 ,67 ,-9},
			{22 ,41 ,-12},
			{19 ,12 ,-9},
			{19 ,67 ,8},
			{-18,67 ,-9},
			{-22,41 ,-12},
			{-18,12 ,-9},
			{-18,67 ,8},
			{-22,41 ,12},
			{-18,12 ,8},
			{-20,28 ,0},
			{-20,55 ,0},
			{20 ,28 ,0},
			{20 ,55 ,0},
			{22 ,43 ,0},
			{-21,43 ,0},
		},
		f={
			{3 ,4 ,1 ,uv={{124,138},{120,144},{124,144},-1},f=3},
			{7 ,8 ,5 ,uv={{120,138},{124,144},{120,144},-1},f=3},
			{11,12,9 ,uv={{120,138},{124,144},{120,144},-1},f=3},
			{45,47,46,uv={{124,138},{123,136},{123,138},-1},f=3},
			{44,47,42,uv={{122,138},{123,136},{122,136},-1},f=3},
			{3 ,2 ,4 ,uv={{124,138},{120,138},{120,144},-1},f=3},
			{7 ,6 ,8 ,uv={{120,138},{124,138},{124,144},-1},f=3},
			{11,10,12,uv={{120,138},{124,138},{124,144},-1},f=3},
			{45,43,47,uv={{124,138},{124,136},{123,136},-1},f=3},
			{44,46,47,uv={{122,138},{123,138},{123,136},-1},f=3},
			{25,18,15,uv={{126,138},{128,138},{128,136},-1},f=2},
			{25,16,13,uv={{125,140},{125,140},{126,139},-1},f=2},
			{13,17,14,uv={{125,140},{125,140},{126,139},-1},f=2},
			{15,20,16,uv={{124,138},{124,139},{125,138},-1},f=2},
			{17,20,21,uv={{124,138},{124,139},{125,138},-1},f=2},
			{15,18,19,uv={{124,138},{124,139},{125,138},-1},f=2},
			{20,22,23,uv={{125,140},{125,140},{126,139},-1},f=2},
			{21,23,24,uv={{125,140},{125,140},{126,139},-1},f=2},
			{19,18,22,uv={{124,138},{124,139},{125,138},-1},f=2},
			{22,18,25,uv={{124,138},{124,139},{125,138},-1},f=2},
			{22,13,23,uv={{124,138},{124,139},{125,138},-1},f=2},
			{23,14,24,uv={{124,138},{124,139},{125,138},-1},f=2},
			{25,15,16,uv={{125,140},{125,140},{126,139},-1},f=2},
			{13,16,17,uv={{125,140},{125,140},{126,139},-1},f=2},
			{15,19,20,uv={{124,138},{124,139},{125,138},-1},f=2},
			{17,16,20,uv={{124,138},{124,139},{125,138},-1},f=2},
			{20,19,22,uv={{125,140},{125,140},{126,139},-1},f=2},
			{21,20,23,uv={{125,140},{125,140},{126,139},-1},f=2},
			{22,25,13,uv={{124,138},{124,139},{125,138},-1},f=2},
			{23,13,14,uv={{124,138},{124,139},{125,138},-1},f=2},
			{35,33,30,uv={{128,136},{124,140},{128,140},-1},f=3},
			{30,34,31,uv={{128,143},{124,140},{124,143},-1},f=3},
			{36,40,37,uv={{128,136},{124,140},{128,140},-1},f=3},
			{38,40,41,uv={{128,143},{124,140},{124,143},-1},f=3},
			{35,32,33,uv={{128,136},{124,136},{124,140},-1},f=3},
			{30,33,34,uv={{128,143},{128,140},{124,140},-1},f=3},
			{36,39,40,uv={{128,136},{124,136},{124,140},-1},f=3},
			{38,37,40,uv={{128,143},{128,140},{124,140},-1},f=3},
			{29,26,28,uv={{122,138},{120,136},{120,138},-1},f=2},
			{29,27,26,uv={{122,138},{122,136},{120,136},-1},f=2},
		},
		coll={{-12,0,-12,12,69,12}}
	},
	{ --turret +Z (15)
		v={
			 {0,0  ,-7 },
			 {0,27 ,-28},
			 {0,27 ,-7 },
			 {0,0  ,-28},
			 {-19,0  ,24 },
			 {-8,27 ,4  },
			 {-19,27 ,24 },
			 {-8,0  ,4  },
			 {18,0  ,24 },
			 {7,27 ,4  },
			 {18,27 ,24 },
			 {7,0  ,4  },
			 {-12,41 ,-12},
			 {-9,12 ,-8 },
			 {-9,67 ,9  },
			 {-12,41 ,12 },
			 {-9,12 ,9  },
			 {0,76 ,0  },
			 {8,67 ,9  },
			 {12,41 ,12 },
			 {8,12 ,9  },
			 {8,67 ,-8 },
			 {12,41 ,-12},
			 {8,12 ,-8 },
			 {-9,67 ,-8 },
			 {0,37 ,12 },
			 {4,42 ,12 },
			 {-5,42 ,12 },
			 {0,47 ,12 },
			 {-22,41 ,-12},
			 {-19,12 ,-8 },
			 {-19,67 ,9  },
			 {-22,41 ,12 },
			 {-19,12 ,9  },
			 {-19,67 ,-8 },
			 {18,67 ,9  },
			 {22,41 ,12 },
			 {18,12 ,9  },
			 {18,67 ,-8 },
			 {22,41 ,-12},
			 {18,12 ,-8 },
			 {20,28 ,0  },
			 {20,55 ,0  },
			 {-20,28 ,0  },
			 {-20,55 ,0  },
			 {-22,43 ,0  },
			 {21,43 ,0  },
		},
		f={
			{3 ,4 ,1 ,uv={{124,138},{120,144},{124,144},-1},f=3},
			{7 ,8 ,5 ,uv={{120,138},{124,144},{120,144},-1},f=3},
			{11,12,9 ,uv={{120,138},{124,144},{120,144},-1},f=3},
			{45,47,46,uv={{124,138},{123,136},{123,138},-1},f=3},
			{44,47,42,uv={{122,138},{123,136},{122,136},-1},f=3},
			{3 ,2 ,4 ,uv={{124,138},{120,138},{120,144},-1},f=3},
			{7 ,6 ,8 ,uv={{120,138},{124,138},{124,144},-1},f=3},
			{11,10,12,uv={{120,138},{124,138},{124,144},-1},f=3},
			{45,43,47,uv={{124,138},{124,136},{123,136},-1},f=3},
			{44,46,47,uv={{122,138},{123,138},{123,136},-1},f=3},
			{25,18,15,uv={{126,138},{128,138},{128,136},-1},f=2},
			{25,16,13,uv={{125,140},{125,140},{126,139},-1},f=2},
			{13,17,14,uv={{125,140},{125,140},{126,139},-1},f=2},
			{15,20,16,uv={{124,138},{124,139},{125,138},-1},f=2},
			{17,20,21,uv={{124,138},{124,139},{125,138},-1},f=2},
			{15,18,19,uv={{124,138},{124,139},{125,138},-1},f=2},
			{20,22,23,uv={{125,140},{125,140},{126,139},-1},f=2},
			{21,23,24,uv={{125,140},{125,140},{126,139},-1},f=2},
			{19,18,22,uv={{124,138},{124,139},{125,138},-1},f=2},
			{22,18,25,uv={{124,138},{124,139},{125,138},-1},f=2},
			{22,13,23,uv={{124,138},{124,139},{125,138},-1},f=2},
			{23,14,24,uv={{124,138},{124,139},{125,138},-1},f=2},
			{25,15,16,uv={{125,140},{125,140},{126,139},-1},f=2},
			{13,16,17,uv={{125,140},{125,140},{126,139},-1},f=2},
			{15,19,20,uv={{124,138},{124,139},{125,138},-1},f=2},
			{17,16,20,uv={{124,138},{124,139},{125,138},-1},f=2},
			{20,19,22,uv={{125,140},{125,140},{126,139},-1},f=2},
			{21,20,23,uv={{125,140},{125,140},{126,139},-1},f=2},
			{22,25,13,uv={{124,138},{124,139},{125,138},-1},f=2},
			{23,13,14,uv={{124,138},{124,139},{125,138},-1},f=2},
			{35,33,30,uv={{128,136},{124,140},{128,140},-1},f=3},
			{30,34,31,uv={{128,143},{124,140},{124,143},-1},f=3},
			{36,40,37,uv={{128,136},{124,140},{128,140},-1},f=3},
			{38,40,41,uv={{128,143},{124,140},{124,143},-1},f=3},
			{35,32,33,uv={{128,136},{124,136},{124,140},-1},f=3},
			{30,33,34,uv={{128,143},{128,140},{124,140},-1},f=3},
			{36,39,40,uv={{128,136},{124,136},{124,140},-1},f=3},
			{38,37,40,uv={{128,143},{128,140},{124,140},-1},f=3},
			{29,26,28,uv={{122,138},{120,136},{120,138},-1},f=2},
			{29,27,26,uv={{122,138},{122,136},{120,136},-1},f=2},
		},
		coll={{-12,0,-12,12,69,12}}
	},
	{ --Floor button (16)
		v={
			 {-32.4,4  ,-32.4},
			 {-36.9,0  ,-36.9},
			 {-32.4,4  ,32.4},
			 {-36.9,0  ,36.9},
			 {32.4,4  ,-32.4},
			 {36.9,0  ,-36.9},
			 {32.4,4  ,32.4},
			 {36.9,0  ,36.9},
			 {-33.3,5  ,-5.4},
			 {-36.9,2  ,-5.4},
			 {-33.3,5  ,5.4},
			 {-36.9,2  ,5.4},
			 {33.3,5  ,-5.4},
			 {36.9,2  ,-5.4},
			 {33.3,5  ,5.4},
			 {36.9,2  ,5.4},
		},
		f={ 
			 {2 ,3 ,1 ,uv={{32,248},{31,246},{31,248},-1},f=1},
			 {4 ,7 ,3 ,uv={{32,248},{31,246},{31,248},-1},f=1},
			 {8 ,5 ,7 ,uv={{31,248},{32,246},{31,248},-1},f=1},
			 {6 ,1 ,5 ,uv={{32,248},{31,246},{31,248},-1},f=1},
			 {7 ,1 ,3 ,uv={{31,247},{16,232},{16,247},-1},f=1},
			 {2 ,4 ,3 ,uv={{32,248},{32,246},{31,246},-1},f=1},
			 {4 ,8 ,7 ,uv={{32,248},{32,246},{31,246},-1},f=1},
			 {8 ,6 ,5 ,uv={{31,248},{32,246},{31,246},-1},f=1},
			 {6 ,2 ,1 ,uv={{32,248},{32,246},{31,246},-1},f=1},
			 {7 ,5 ,1 ,uv={{31,247},{31,232},{16,232},-1},f=1},
			 {10,11,9 ,uv={{16,248},{22,247},{16,247},-1},f=1},
			 {16,13,15,uv={{16,248},{22,247},{16,247},-1},f=1},
			 {10,12,11,uv={{16,248},{22,248},{22,247},-1},f=1},
			 {16,14,13,uv={{16,248},{22,248},{22,247},-1},f=1},
		},
		coll={}
	},
	{ --lift -X (17)
	v={
			{96   ,128 ,-96 },
			{96   ,0   ,0   },
			{96   ,0   ,-96 },
			{0    ,0   ,-96 },
			{96   ,0   ,96  },
			{0    ,0   ,96  },
			{-96  ,0   ,-96 },
			{0    ,0   ,0   },
			{-96  ,0   ,96  },
			{-96  ,0   ,0   },
			{-96  ,128 ,96  },
			{-96  ,0   ,47  },
			{-192 ,128 ,48  },
			{-192 ,128 ,-48 },
			{-192 ,0   ,-48 },
			{-192 ,0   ,48  },
			{96   ,128 ,0   },
			{96   ,128 ,96  },
			{0    ,128 ,-96 },
			{0    ,128 ,0   },
			{0    ,128 ,96  },
			{-96  ,128 ,0   },
			{-96  ,128 ,-96 },
			{-96  ,128 ,-48 },
			{-96  ,0   ,-48 },
			{-66  ,128 ,-96 },
			{-66  ,0   ,-96 },
			{-48  ,128 ,96  },
			{-48  ,0   ,96  },
			{-96  ,128 ,48  },
	},
	f={
		{19,3,4,uv={{48,0},{24,32},{48,32},-1},f=2},
		{18,6,5,uv={{48,0},{24,32},{48,32},-1},f=2},
		{23,4,7,uv={{48,0},{24,32},{48,32},-1},f=2},
		{21,9,6,uv={{48,0},{24,32},{48,32},-1},f=2},
		{24,27,25,uv={{48,0},{35,32},{48,32},-1},f=2},
		{28,12,29,uv={{40,0},{24,32},{40,32},-1},f=2},
		{19,1,3,uv={{48,0},{24,0},{24,32},-1},f=2},
		{18,21,6,uv={{48,0},{24,0},{24,32},-1},f=2},
		{23,19,4,uv={{48,0},{24,0},{24,32},-1},f=2},
		{21,11,9,uv={{48,0},{24,0},{24,32},-1},f=2},
		{24,26,27,uv={{48,0},{35,0},{35,32},-1},f=2},
		{28,30,12,uv={{40,0},{24,0},{24,32},-1},f=2},
		{8,3,2,uv={{120,120},{96,96},{96,120},-1},f=2},
		{6,2,5,uv={{120,120},{96,96},{96,120},-1},f=2},
		{10,4,8,uv={{120,120},{96,96},{96,120},-1},f=2},
		{9,8,6,uv={{120,120},{96,96},{96,120},-1},f=2},
		{16,25,12,uv={{120,120},{96,96},{96,120},-1},f=2},
		{30,16,12,uv={{72,96},{48,128},{72,128},-1},f=2},
		{17,21,18,uv={{96,120},{120,96},{96,96},-1},f=2},
		{1,20,17,uv={{96,120},{120,96},{96,96},-1},f=2},
		{22,21,20,uv={{120,120},{96,96},{96,120},-1},f=2},
		{19,22,20,uv={{96,120},{120,96},{96,96},-1},f=2},
		{14,30,24,uv={{120,120},{96,96},{96,120},-1},f=2},
		{8,4,3,uv={{120,120},{120,96},{96,96},-1},f=2},
		{6,8,2,uv={{120,120},{120,96},{96,96},-1},f=2},
		{10,7,4,uv={{120,120},{120,96},{96,96},-1},f=2},
		{9,10,8,uv={{120,120},{120,96},{96,96},-1},f=2},
		{16,15,25,uv={{120,120},{120,96},{96,96},-1},f=2},
		{30,13,16,uv={{72,96},{48,96},{48,128},-1},f=2},
		{17,20,21,uv={{96,120},{120,120},{120,96},-1},f=2},
		{1,19,20,uv={{96,120},{120,120},{120,96},-1},f=2},
		{22,11,21,uv={{120,120},{120,96},{96,96},-1},f=2},
		{19,23,22,uv={{96,120},{120,120},{120,96},-1},f=2},
		{14,13,30,uv={{120,120},{120,96},{96,96},-1},f=2},
		{16,14,15,uv={{72,128},{48,96},{48,128},-1},f=2},
		{14,25,15,uv={{72,96},{48,128},{72,128},-1},f=2},
		{30,25,12,uv={{96,96},{72,128},{96,128},-1},f=3},
		{16,13,14,uv={{72,128},{72,96},{48,96},-1},f=2},
		{14,24,25,uv={{72,96},{48,96},{48,128},-1},f=2},
		{30,24,25,uv={{96,96},{72,96},{72,128},-1},f=3},
	},
	coll={
		{-96,0  ,-96,96,0  ,96},
		{-96,128,-96,96,128,96},
		--
		{-96 ,0  ,-96, 96 ,128,-96},
		{-96 ,0  , 96, 96 ,128, 96},
		{-96 ,0  ,-96,-96 ,128,-48},
		{-96 ,0  , 48,-96 ,128, 96},
		{-192,0  ,-48,-96 ,0  , 48},
		{-192,128,-48,-96 ,128, 48},
		{-192,0  ,-48,-192,128, 48},
		{-192,0  ,-48,-96 ,128,-48},
		{-192,0  , 48,-96 ,128, 48}
	}
	},
	{ --lift +X (18)
	v={
			{-96,128 ,96},
			{-96,0   ,0},
			{-96,0   ,96},
			{0,0   ,96},
			{-96,0   ,-96},
			{0,0   ,-96},
			{96,0   ,96},
			{0,0   ,0},
			{96,0   ,-96},
			{96,0   ,0},
			{96,128 ,-96},
			{96,0   ,-47},
			{192,128 ,-48},
			{192,128 ,48},
			{192,0   ,48},
			{192,0   ,-48},
			{-96,128 ,0},
			{-96,128 ,-96},
			{0,128 ,96},
			{0,128 ,0},
			{0,128 ,-96},
			{96,128 ,0},
			{96,128 ,96},
			{96,128 ,48},
			{96,0   ,48},
			{66,128 ,96},
			{66,0   ,96},
			{48,128 ,-96},
			{48,0   ,-96},
			{96,128 ,-48},
	},
	f={
		{19,3,4,uv={{48,0},{24,32},{48,32},-1},f=2},
		{18,6,5,uv={{48,0},{24,32},{48,32},-1},f=2},
		{23,4,7,uv={{48,0},{24,32},{48,32},-1},f=2},
		{21,9,6,uv={{48,0},{24,32},{48,32},-1},f=2},
		{24,27,25,uv={{48,0},{35,32},{48,32},-1},f=2},
		{28,12,29,uv={{40,0},{24,32},{40,32},-1},f=2},
		{19,1,3,uv={{48,0},{24,0},{24,32},-1},f=2},
		{18,21,6,uv={{48,0},{24,0},{24,32},-1},f=2},
		{23,19,4,uv={{48,0},{24,0},{24,32},-1},f=2},
		{21,11,9,uv={{48,0},{24,0},{24,32},-1},f=2},
		{24,26,27,uv={{48,0},{35,0},{35,32},-1},f=2},
		{28,30,12,uv={{40,0},{24,0},{24,32},-1},f=2},
		{8,3,2,uv={{120,120},{96,96},{96,120},-1},f=2},
		{6,2,5,uv={{120,120},{96,96},{96,120},-1},f=2},
		{10,4,8,uv={{120,120},{96,96},{96,120},-1},f=2},
		{9,8,6,uv={{120,120},{96,96},{96,120},-1},f=2},
		{16,25,12,uv={{120,120},{96,96},{96,120},-1},f=2},
		{30,16,12,uv={{72,96},{48,128},{72,128},-1},f=2},
		{17,21,18,uv={{96,120},{120,96},{96,96},-1},f=2},
		{1,20,17,uv={{96,120},{120,96},{96,96},-1},f=2},
		{22,21,20,uv={{120,120},{96,96},{96,120},-1},f=2},
		{19,22,20,uv={{96,120},{120,96},{96,96},-1},f=2},
		{14,30,24,uv={{120,120},{96,96},{96,120},-1},f=2},
		{8,4,3,uv={{120,120},{120,96},{96,96},-1},f=2},
		{6,8,2,uv={{120,120},{120,96},{96,96},-1},f=2},
		{10,7,4,uv={{120,120},{120,96},{96,96},-1},f=2},
		{9,10,8,uv={{120,120},{120,96},{96,96},-1},f=2},
		{16,15,25,uv={{120,120},{120,96},{96,96},-1},f=2},
		{30,13,16,uv={{72,96},{48,96},{48,128},-1},f=2},
		{17,20,21,uv={{96,120},{120,120},{120,96},-1},f=2},
		{1,19,20,uv={{96,120},{120,120},{120,96},-1},f=2},
		{22,11,21,uv={{120,120},{120,96},{96,96},-1},f=2},
		{19,23,22,uv={{96,120},{120,120},{120,96},-1},f=2},
		{14,13,30,uv={{120,120},{120,96},{96,96},-1},f=2},
		{16,14,15,uv={{72,128},{48,96},{48,128},-1},f=2},
		{14,25,15,uv={{72,96},{48,128},{72,128},-1},f=2},
		{30,25,12,uv={{96,96},{72,128},{96,128},-1},f=3},
		{16,13,14,uv={{72,128},{72,96},{48,96},-1},f=2},
		{14,24,25,uv={{72,96},{48,96},{48,128},-1},f=2},
		{30,24,25,uv={{96,96},{72,96},{72,128},-1},f=3},
	},
	coll={
		{-96,0  ,-96,96,0  ,96},
		{-96,128,-96,96,128,96},
		--
		{-96 ,0  ,-96, 96 ,128,-96},
		{-96 ,0  , 96, 96 ,128, 96},
		{ 96 ,0  ,-96, 96 ,128,-48},
		{ 96 ,0  , 48, 96 ,128, 96},
		{ 96 ,0  ,-48, 192,0  , 48},
		{ 96 ,128,-48, 192,128, 48},
		{ 192,0  ,-48, 192,128, 48},
		{ 96 ,0  ,-48, 192,128,-48},
		{ 96 ,0  , 48, 192,128, 48}
	}
	},
	{ --lift -Z (19)
	v={
			{-96 ,128 ,-96},
			{0   ,0   ,-96},
			{-96 ,0   ,-96},
			{-96 ,0   ,0},
			{96  ,0   ,-96},
			{96  ,0   ,0},
			{-96 ,0   ,96},
			{0   ,0   ,0},
			{96  ,0   ,96},
			{0   ,0   ,96},
			{96  ,128 ,96},
			{47  ,0   ,96},
			{48  ,128 ,192},
			{-48 ,128 ,192},
			{-48 ,0   ,192},
			{48  ,0   ,192},
			{0   ,128 ,-96},
			{96  ,128 ,-96},
			{-96 ,128 ,0},
			{0   ,128 ,0},
			{96  ,128 ,0},
			{0   ,128 ,96},
			{-96 ,128 ,96},
			{-48 ,128 ,96},
			{-48 ,0   ,96},
			{-96 ,128 ,66},
			{-96 ,0   ,66},
			{96  ,128 ,48},
			{96  ,0   ,48},
			{48  ,128 ,96},
	},
	f={
		{19,3,4,uv={{48,0},{24,32},{48,32},-1},f=2},
		{18,6,5,uv={{48,0},{24,32},{48,32},-1},f=2},
		{23,4,7,uv={{48,0},{24,32},{48,32},-1},f=2},
		{21,9,6,uv={{48,0},{24,32},{48,32},-1},f=2},
		{24,27,25,uv={{48,0},{35,32},{48,32},-1},f=2},
		{28,12,29,uv={{40,0},{24,32},{40,32},-1},f=2},
		{19,1,3,uv={{48,0},{24,0},{24,32},-1},f=2},
		{18,21,6,uv={{48,0},{24,0},{24,32},-1},f=2},
		{23,19,4,uv={{48,0},{24,0},{24,32},-1},f=2},
		{21,11,9,uv={{48,0},{24,0},{24,32},-1},f=2},
		{24,26,27,uv={{48,0},{35,0},{35,32},-1},f=2},
		{28,30,12,uv={{40,0},{24,0},{24,32},-1},f=2},
		{8,3,2,uv={{120,120},{96,96},{96,120},-1},f=2},
		{6,2,5,uv={{120,120},{96,96},{96,120},-1},f=2},
		{10,4,8,uv={{120,120},{96,96},{96,120},-1},f=2},
		{9,8,6,uv={{120,120},{96,96},{96,120},-1},f=2},
		{16,25,12,uv={{120,120},{96,96},{96,120},-1},f=2},
		{30,16,12,uv={{72,96},{48,128},{72,128},-1},f=2},
		{17,21,18,uv={{96,120},{120,96},{96,96},-1},f=2},
		{1,20,17,uv={{96,120},{120,96},{96,96},-1},f=2},
		{22,21,20,uv={{120,120},{96,96},{96,120},-1},f=2},
		{19,22,20,uv={{96,120},{120,96},{96,96},-1},f=2},
		{14,30,24,uv={{120,120},{96,96},{96,120},-1},f=2},
		{8,4,3,uv={{120,120},{120,96},{96,96},-1},f=2},
		{6,8,2,uv={{120,120},{120,96},{96,96},-1},f=2},
		{10,7,4,uv={{120,120},{120,96},{96,96},-1},f=2},
		{9,10,8,uv={{120,120},{120,96},{96,96},-1},f=2},
		{16,15,25,uv={{120,120},{120,96},{96,96},-1},f=2},
		{30,13,16,uv={{72,96},{48,96},{48,128},-1},f=2},
		{17,20,21,uv={{96,120},{120,120},{120,96},-1},f=2},
		{1,19,20,uv={{96,120},{120,120},{120,96},-1},f=2},
		{22,11,21,uv={{120,120},{120,96},{96,96},-1},f=2},
		{19,23,22,uv={{96,120},{120,120},{120,96},-1},f=2},
		{14,13,30,uv={{120,120},{120,96},{96,96},-1},f=2},
		{16,14,15,uv={{72,128},{48,96},{48,128},-1},f=2},
		{14,25,15,uv={{72,96},{48,128},{72,128},-1},f=2},
		{30,25,12,uv={{96,96},{72,128},{96,128},-1},f=3},
		{16,13,14,uv={{72,128},{72,96},{48,96},-1},f=2},
		{14,24,25,uv={{72,96},{48,96},{48,128},-1},f=2},
		{30,24,25,uv={{96,96},{72,96},{72,128},-1},f=3},
	},
	coll={
		{-96,0  ,-96,96,0  ,96},
		{-96,128,-96,96,128,96},
		--
		{-96,0  ,-96 ,-96,128,96 },
		{ 96,0  ,-96 , 96,128,96 },
		{-96,0  , 96 ,-48,128,96 },
		{ 48,0  , 96 , 96,128,96 },
		{-48,0  , 96 , 48,0  ,192},
		{-48,128, 96 , 48,128,192},
		{-48,0  , 192, 48,128,192},
		{-48,0  , 96 ,-48,128,192},
		{ 48,0  , 96 , 48,128,192}
	}
	},
	{ --lift +Z (20)
	v={
			{96,128 ,96  },
			{0,0   ,96  },
			{96,0   ,96  },
			{96,0   ,0   },
			{-96,0   ,96  },
			{-96,0   ,0   },
			{96,0   ,-96 },
			{0,0   ,0   },
			{-96,0   ,-96 },
			{0,0   ,-96 },
			{-96,128 ,-96 },
			{-47,0   ,-96 },
			{-48,128 ,-192},
			{48,128 ,-192},
			{48,0   ,-192},
			{-48,0   ,-192},
			{0,128 ,96  },
			{-96,128 ,96  },
			{96,128 ,0   },
			{0,128 ,0   },
			{-96,128 ,0   },
			{0,128 ,-96 },
			{96,128 ,-96 },
			{48,128 ,-96 },
			{48,0   ,-96 },
			{96,128 ,-66 },
			{96,0   ,-66 },
			{-96,128 ,-48 },
			{-96,0   ,-48 },
			{-48,128 ,-96 },
	},
	f={
		{19,3,4,uv={{48,0},{24,32},{48,32},-1},f=2},
		{18,6,5,uv={{48,0},{24,32},{48,32},-1},f=2},
		{23,4,7,uv={{48,0},{24,32},{48,32},-1},f=2},
		{21,9,6,uv={{48,0},{24,32},{48,32},-1},f=2},
		{24,27,25,uv={{48,0},{35,32},{48,32},-1},f=2},
		{28,12,29,uv={{40,0},{24,32},{40,32},-1},f=2},
		{19,1,3,uv={{48,0},{24,0},{24,32},-1},f=2},
		{18,21,6,uv={{48,0},{24,0},{24,32},-1},f=2},
		{23,19,4,uv={{48,0},{24,0},{24,32},-1},f=2},
		{21,11,9,uv={{48,0},{24,0},{24,32},-1},f=2},
		{24,26,27,uv={{48,0},{35,0},{35,32},-1},f=2},
		{28,30,12,uv={{40,0},{24,0},{24,32},-1},f=2},
		{8,3,2,uv={{120,120},{96,96},{96,120},-1},f=2},
		{6,2,5,uv={{120,120},{96,96},{96,120},-1},f=2},
		{10,4,8,uv={{120,120},{96,96},{96,120},-1},f=2},
		{9,8,6,uv={{120,120},{96,96},{96,120},-1},f=2},
		{16,25,12,uv={{120,120},{96,96},{96,120},-1},f=2},
		{30,16,12,uv={{72,96},{48,128},{72,128},-1},f=2},
		{17,21,18,uv={{96,120},{120,96},{96,96},-1},f=2},
		{1,20,17,uv={{96,120},{120,96},{96,96},-1},f=2},
		{22,21,20,uv={{120,120},{96,96},{96,120},-1},f=2},
		{19,22,20,uv={{96,120},{120,96},{96,96},-1},f=2},
		{14,30,24,uv={{120,120},{96,96},{96,120},-1},f=2},
		{8,4,3,uv={{120,120},{120,96},{96,96},-1},f=2},
		{6,8,2,uv={{120,120},{120,96},{96,96},-1},f=2},
		{10,7,4,uv={{120,120},{120,96},{96,96},-1},f=2},
		{9,10,8,uv={{120,120},{120,96},{96,96},-1},f=2},
		{16,15,25,uv={{120,120},{120,96},{96,96},-1},f=2},
		{30,13,16,uv={{72,96},{48,96},{48,128},-1},f=2},
		{17,20,21,uv={{96,120},{120,120},{120,96},-1},f=2},
		{1,19,20,uv={{96,120},{120,120},{120,96},-1},f=2},
		{22,11,21,uv={{120,120},{120,96},{96,96},-1},f=2},
		{19,23,22,uv={{96,120},{120,120},{120,96},-1},f=2},
		{14,13,30,uv={{120,120},{120,96},{96,96},-1},f=2},
		{16,14,15,uv={{72,128},{48,96},{48,128},-1},f=2},
		{14,25,15,uv={{72,96},{48,128},{72,128},-1},f=2},
		{30,25,12,uv={{96,96},{72,128},{96,128},-1},f=3},
		{16,13,14,uv={{72,128},{72,96},{48,96},-1},f=2},
		{14,24,25,uv={{72,96},{48,96},{48,128},-1},f=2},
		{30,24,25,uv={{96,96},{72,96},{72,128},-1},f=3},
	},
	coll={
		{-96,0  ,-96,96,0  ,96},
		{-96,128,-96,96,128,96},
		--
		{-96,0  ,-96 ,-96,128, 96 },
		{ 96,0  ,-96 , 96,128, 96 },
		{-96,0  ,-96 ,-48,128,-96 },
		{ 48,0  ,-96 , 96,128,-96 },
		{-48,0  ,-192, 48,0  ,-96 },
		{-48,128,-192, 48,128,-96 },
		{-48,0  ,-192, 48,128,-192},
		{-48,0  ,-192,-48,128,-96 },
		{ 48,0  ,-192, 48,128,-96 }
	}
	},
	{ --display -X (21)
		v={
			 {0,60, 68},
			 {0,100,68},
			 {5,60, 68},
			 {5,100,68},
			 {0,60, 28},
			 {0,100,28},
			 {5,60, 28},
			 {5,100,28},
		},
		f={
			 {2,3,1,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {4,7,3,uv={{45,232},{32,245},{45,245},-1},f=2},
			 {8,5,7,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {7,1,3,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {4,6,8,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {2,4,3,uv={{45,246},{45,245},{32,245},-1},f=2},
			 {4,8,7,uv={{45,232},{32,232},{32,245},-1},f=2},
			 {8,6,5,uv={{45,246},{45,245},{32,245},-1},f=2},
			 {7,5,1,uv={{45,246},{45,245},{32,245},-1},f=2},
			 {4,2,6,uv={{45,246},{45,245},{32,245},-1},f=2},
		},
		coll={}
	},
	{ --display +X (22)
		v={
			 {96,60, 28},
			 {96,100,28},
			 {91,60, 28},
			 {91,100,28},
			 {96,60, 68},
			 {96,100,68},
			 {91,60, 68},
			 {91,100,68},
		},
		f={
			 {2,3,1,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {4,7,3,uv={{45,232},{32,245},{45,245},-1},f=2},
			 {8,5,7,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {7,1,3,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {4,6,8,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {2,4,3,uv={{45,246},{45,245},{32,245},-1},f=2},
			 {4,8,7,uv={{45,232},{32,232},{32,245},-1},f=2},
			 {8,6,5,uv={{45,246},{45,245},{32,245},-1},f=2},
			 {7,5,1,uv={{45,246},{45,245},{32,245},-1},f=2},
			 {4,2,6,uv={{45,246},{45,245},{32,245},-1},f=2},
		},
		coll={}
	},
	{ --display -Z (23)
		v={
			 {68,60, 96},
			 {68,100,96},
			 {68,60, 91},
			 {68,100,91},
			 {28,60, 96},
			 {28,100,96},
			 {28,60, 91},
			 {28,100,91},
		},
		f={
			 {2,3,1,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {4,7,3,uv={{45,232},{32,245},{45,245},-1},f=2},
			 {8,5,7,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {7,1,3,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {4,6,8,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {2,4,3,uv={{45,246},{45,245},{32,245},-1},f=2},
			 {4,8,7,uv={{45,232},{32,232},{32,245},-1},f=2},
			 {8,6,5,uv={{45,246},{45,245},{32,245},-1},f=2},
			 {7,5,1,uv={{45,246},{45,245},{32,245},-1},f=2},
			 {4,2,6,uv={{45,246},{45,245},{32,245},-1},f=2},
		},
		coll={}
	},
	{ --display +Z (24)
		v={
			 {28,60, 0},
			 {28,100,0},
			 {28,60, 5},
			 {28,100,5},
			 {68,60, 0},
			 {68,100,0},
			 {68,60, 5},
			 {68,100,5},
		},
		f={
			 {2,3,1,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {4,7,3,uv={{45,232},{32,245},{45,245},-1},f=2},
			 {8,5,7,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {7,1,3,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {4,6,8,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {2,4,3,uv={{45,246},{45,245},{32,245},-1},f=2},
			 {4,8,7,uv={{45,232},{32,232},{32,245},-1},f=2},
			 {8,6,5,uv={{45,246},{45,245},{32,245},-1},f=2},
			 {7,5,1,uv={{45,246},{45,245},{32,245},-1},f=2},
			 {4,2,6,uv={{45,246},{45,245},{32,245},-1},f=2},
		},
		coll={}
	},
}

local s = { --sounds
	t1=0,
	n={0,0,0} --The exact position of the current track
}

--enigma configuration: [5,8,7][2,19,6][7,24,9][3} [AO][QP][MN][EZ][XU]

local world_size={12,4,12}
world_size[4]=world_size[2]*world_size[3]
world_size[5]=world_size[1]*world_size[2]*world_size[3]
--world
local draw={
	objects={
		c={}, --cubes
		cd={}, --cube dispensers
		lb={}, --light bridges
		b={}, --buttons
		t={}, --turrets
		fb={}, --floor button
		l={}, --lifts
		d={}, --displays
	},
	world={v={},f={},sp={}}, --main world
	map={},
	pr={}, --particles
	pr_g={}, --particle generator (for a light bridge)
	lg={}--light bridge generators
}

--funcions
local addwall, addobj, respal, updpal, darkpal
local menu
--time
local t1=0 --The start time of the frame drawing
local t2=0 --The time for drawing the current frame
local t=0 -- Global timer (+1 for each code call)
local stt=0 --The timer of the start of the game
--mouse
local clp1,clp2
local mx, my, cl1, cl2, whl
local cid
local ins --is the cursor in the scene
--sprite editor
local function setpix(sx,sy,color)
	local id=sx//8+sy//8*16
	local adr=sx%8+sy%8*8
	poke4(0x8000+id*64+adr,color)
end

local function getpix(sx,sy)
	local id=sx//8+sy//8*16
	local adr=sx%8+sy%8*8
	return peek4(0x8000+id*64+adr)
end

--maps
local maps={}

--
local function sfx_(...)
	sfx(...)
end
local function addp(x,y,z,vx,vy,vz,lifetime,color) --add particle
	draw.pr[#draw.pr+1]={x=x,y=y,z=z,vx=vx,vy=vy,vz=vz,lt=lifetime,t=0,c=color}
end

--Texture cache

local b_f={} --Texture for the blue field
local p_t={{},{}} --portal texture
for y0=0,31 do
	b_f[y0]={}
	p_t[1][y0]={} --blue portal
	p_t[2][y0]={} --orange portal
	local c=false
	for x0=0,23 do
		local color1=getpix(x0+24,y0+32)
		local color2=getpix((x0+23)%24+24,y0+32)

		if color1~=15 then b_f[y0][3]=color1 c=true end
		if color1~=color2 then
			if color1==15 then b_f[y0][1]=x0 else b_f[y0][2]=x0 end
		end
		p_t[1][y0][x0]=getpix(96+x0,0 +y0)
		p_t[2][y0][x0]=getpix(0 +x0,32+y0)
	end

	b_f[y0].d=c
end

--collision

local function coll(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4) --collision of two cubes
	return (x1 < x4 and x2 > x3 and y1 < y4 and y2 > y3 and z1 < z4 and z2 > z3)
end

local function min_abs(a, b)
	if abs(a) < abs(b) then return a else return b end
end

local function coll_shift(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4, axis)
	if not coll(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4) then
		return 0
	end

	if axis == 1 then
		return min_abs(x3 - x2, x4 - x1)
	elseif axis == 2 then
		return min_abs(y3 - y2, y4 - y1)
	elseif axis == 3 then
		return min_abs(z3 - z2, z4 - z1)
	end
end

local function raycast_legacy(x1,y1,z1, x2,y2,z2, hitwalls,hitfloors, precise) -- walk along a segment, checking whether it collides with the walls
	-- convert to tile space
	x1, y1, z1, x2, y2, z2 = x1 / 96, y1 / 128, z1 / 96, x2 / 96, y2 / 128, z2 / 96
	-- DDA, loosely based on https://lodev.org/cgtutor/raycasting.html
	-- segment direction
	local dirx, diry, dirz = x2-x1, y2-y1, z2-z1
	-- length of one step along axes (only relative)
	-- n/0 = inf, which is fine for this algorithm
	local lx, ly, lz = abs(1 / dirx), abs(1 / diry), abs(1 / dirz)
	-- full tile step, matching direction with the segment
	local sx, sy, sz
	-- offset, for handling negative facing
	local ox, oy, oz
	-- current tile (offset if facing positive)
	local x, y, z = F(x1), F(y1), F(z1)
	-- distance to next tile in each axis
	local tx, ty, tz = (x1 - x) * lx, (y1 - y) * ly, (z1 - z) * lz
	if dirx < 0 then
		sx, ox = -1, 1
	else
		sx, ox = 1, 0
		tx = lx - tx
	end
	if diry < 0 then
		sy, oy = -1, 1
	else
		sy, oy = 1, 0
		ty = ly - ty
	end
	if dirz < 0 then
		sz, oz = -1, 1
	else
		sz, oz = 1, 0
		tz = lz - tz
	end

	if x < 0 or x > world_size[1] - 1 or
		y < 0 or y > world_size[2] - 1 or
		z < 0 or z > world_size[3] - 1 then
		return
	end

	while true do
		if tx < ty and tx < tz then
			x, tx = x + sx, tx + lx
			if (x + ox) * sx > x2 * sx or (x + ox) < 0 or (x + ox) > world_size[1] - 1 then
				return
			elseif hitwalls[draw.map[1][x + ox][y][z][2]] then
				if precise then
					local ratio = (x + ox - x1) / dirx
					return (x + ox) * 96, (y1 + diry * ratio) * 128, (z1 + dirz * ratio) * 96, 1
				else
					return x + ox, y, z, 1
				end
			elseif x < 0 then
				return
			end
		elseif ty < tz then
			y, ty = y + sy, ty + ly
			if (y + oy) * sy > y2 * sy or (y + oy) < 0 or (y + oy) > world_size[2] - 1 then
				return
			elseif hitfloors[draw.map[2][x][y + oy][z][2]] then
				if precise then
					local ratio = (y + oy - y1) / diry
					return (x1 + dirx * ratio) * 96, (y + oy) * 128, (z1 + dirz * ratio) * 96, 1
				else
					return x, y + oy, z, 2
				end
			elseif y < 0 then
				return
			end
		else
			z, tz = z + sz, tz + lz
			if (z + oz) * sz > z2 * sz or (z + oz) < 0 or (z + oz) > world_size[3] - 1 then
				return
			elseif hitwalls[draw.map[3][x][y][z + oz][2]] then
				if precise then
					local ratio = (z + oz - z1) / dirz
					return (x1 + dirx * ratio) * 96, (y1 + diry * ratio) * 128, (z + oz) * 96, 1
				else
					return x, y, z + oz, 3
				end
			elseif z < 0 then
				return
			end
		end
	end
end

local function get_tile(axis, x, y, z)
	local step = draw.map
	step = step[axis]
	step = step[x]
	if not step then return nil end
	step = step[y]
	if not step then return nil end
	step = step[z]
	return step
end

-- Calculate the difference between a value and the next step in a direction
local function to_next(val, interval, dir)
	if dir > 0 then
		return interval - val % interval
	else
		return (interval - val) % interval - interval
	end
end

-- Check if a ray hits an object's colliders
local function ray_object(x, y, z, rx, ry, rz, obj)
	local nearest = 1/0
	local colliders = obj.coll or model[obj.type].coll
	for _,collider in ipairs(colliders) do
		local cx1, cy1, cz1 =
			(obj.x + collider[1] - x) / rx, (obj.y + collider[2] - y) / ry, (obj.z + collider[3] - z) / rz
		local cx2, cy2, cz2 =
			(obj.x + collider[4] - x) / rx, (obj.y + collider[5] - y) / ry, (obj.z + collider[6] - z) / rz
		if cx1 > cx2 then cx1, cx2 = cx2, cx1 end
		if cy1 > cy2 then cy1, cy2 = cy2, cy1 end
		if cz1 > cz2 then cz1, cz2 = cz2, cz1 end
		local near, far = max(cx1, cy1, cz1), min(cx2, cy2, cz2)
		if near > 0 and near <= far and near < nearest then nearest = near end
	end
	if nearest ~= 1/0 then
		return nearest
	end
end

-- Check if a ray hits a box
local function ray_aabb(x, y, z, rx, ry, rz, cx1, cy1, cz1, cx2, cy2, cz2)
	cx1, cy1, cz1 = (cx1 - x) / rx, (cy1 - y) / ry, (cz1 - z) / rz
	cx2, cy2, cz2 = (cx2 - x) / rx, (cy2 - y) / ry, (cz2 - z) / rz
	if cx1 > cx2 then cx1, cx2 = cx2, cx1 end
	if cy1 > cy2 then cy1, cy2 = cy2, cy1 end
	if cz1 > cz2 then cz1, cz2 = cz2, cz1 end
	local near, far = max(cx1, cy1, cz1), min(cx2, cy2, cz2)
	if near > 0 and near <= far then
		return near
	end
end

local function raycast(x, y, z, rx, ry, rz, len, params)
	-- normalised ray vector
	local dist = math.sqrt(rx^2 + ry^2 + rz^2)
	local nx, ny, nz = rx / dist, ry / dist, rz / dist
	local tilehit

	-- allow passing an end point instead
	len = len or dist

	-- if we are starting out of bounds, adjust start
	if x < 0 or x > world_size[1] * 96 or y < 0 or y > world_size[2] * 128 or z < 0 or z > world_size[3] * 96 then
		local hit_len = ray_aabb(
			x, y, z, rx, ry, rz,
			-1, -1, -1,
			world_size[1] * 96 - 95, world_size[2] * 128 - 95, world_size[3] * 96 - 95
		)
		if hit_len and hit_len * dist < len then
			len = len - hit_len * dist
			x, y, z = x + rx * hit_len, y + ry * hit_len, z + rz * hit_len
		end
	end

	-- current scan coordinates and remaining length
	local cx, cy, cz = x, y, z
	local remaining_len = len

	while true do
		-- calculate the amount each component should step
		local sx, sy, sz = to_next(cx, 96, rx), to_next(cy, 128, ry), to_next(cz, 96, rz)
		-- calculate the distance travelled by each component step
		local lx, ly, lz = sx / nx, sy / ny, sz / nz
		-- select the smallest as the next step
		local lookup, axis
		if lx < ly and lx < lz then
			cx, cy, cz = cx + sx, cy + lx * ny, cz + lx * nz
			remaining_len = remaining_len - lx
			lookup, axis = params.walls, 1
		elseif ly < lz then
			cx, cy, cz = cx + ly * nx, cy + sy, cz + ly * nz
			remaining_len = remaining_len - ly
			lookup, axis = params.floors, 2
		else
			cx, cy, cz = cx + lz * nx, cy + lz * ny, cz + sz
			remaining_len = remaining_len - lz
			lookup, axis = params.walls, 3
		end
		-- stop if we've travelled far enough
		if len < 0 then break end
		-- fetch and check the current tile
		local tx, ty, tz = cx//96, cy//128, cz//96
		tile = get_tile(axis, tx, ty, tz)
		if not tile then break end
		if lookup[tile[2]] then
			-- we hit a tile, break out of the loop and start testing objects
			tilehit = {
				x=cx, y=cy, z=cz, len=len - remaining_len,
				tx=tx, ty=ty, tz=tz,
				axis=axis, tile=tile
			}
			break
		end
	end
	-- scan through all objects, find nearest intersection
	local objhit
	for _,ty in ipairs(params.objs) do
		for _,obj in ipairs(draw.objects[ty]) do
			local hit_len = ray_object(x, y, z, rx, ry, rz, obj)
			if hit_len and hit_len * dist < len then
				if not objhit or objhit.len > hit_len * dist then
					objhit = {
						x=x+rx*hit_len, y=y+ry*hit_len, z=z+rz*hit_len, len=hit_len*dist,
						obj=obj,
					}
				end
			end
		end
	end
	-- same for player
	if params.player then
		hit_len = ray_object(x, y, z, rx, ry, rz, {
			x=plr.x, y=plr.y, z=plr.z,
			coll={{-16,-64,-16,16,16,16}},
		})
		if hit_len and hit_len * dist < len then
			if not objhit or objhit.len > hit_len * dist then
				objhit = {
					x=x+rx*hit_len, y=y+ry*hit_len, z=z+rz*hit_len, len=hit_len*dist,
					player=true,
				}
			end
		end
	end
	-- return the shortest found intersection
	if not objhit or (tilehit and tilehit.len < objhit.len) then
		return tilehit
	else
		return objhit
	end
end

function unitic.update()
	--writing all polygons in unitic.poly
	unitic.poly = { v = {}, f = {}, sp = {} }
	unitic.obj  = {}
	unitic.p    = {}
	--world--
	for ind = 1, #draw.world.v do
		unitic.poly.v[ind] = {
			draw.world.v[ind][1],
			draw.world.v[ind][2],
			draw.world.v[ind][3]
		}
	end
	--faces
	for ind=1,#draw.world.f do
		unitic.poly.f[ind]={
			draw.world.f[ind][1],
			draw.world.f[ind][2],
			draw.world.f[ind][3],
			f=draw.world.f[ind].f,
			uv=draw.world.f[ind].uv,
			w=draw.world.f[ind].w
		} end
	--objects (1)--
	local i2=0
	
	local highlighting = nil
	local obj_index = {
		"c",
		"cd",
		"b",
		"fb",
		"t",
		"d",
		"lb",
		"l",
	}

	for ind = 1,#obj_index do
		for i = 1,#draw.objects[obj_index[ind]] do
			i2 = i2 + 1
			if menu.open and menu.type==2 and menu.o.tab == ind and menu.o.sel[menu.o.tab]==i then highlighting = i2 end
			unitic.obj[i2]=draw.objects[obj_index[ind]][i]
		end
	end
	--objects (2)--
	local i2=#unitic.poly.f

	for ind1 = 1, #unitic.obj do
		if unitic.obj[ind1].draw then
			local vt=#unitic.poly.v
			for ind2=1,#unitic.obj[ind1].model.v do
				local px=unitic.obj[ind1].model.v[ind2][1]+unitic.obj[ind1].x
				local py=unitic.obj[ind1].model.v[ind2][2]+unitic.obj[ind1].y
				local pz=unitic.obj[ind1].model.v[ind2][3]+unitic.obj[ind1].z
				unitic.poly.v[#unitic.poly.v+1]={px,py,pz}
			end
			for ind2=1,#unitic.obj[ind1].model.f do
				i2=i2+1
				unitic.poly.f[i2]={
					unitic.obj[ind1].model.f[ind2][1]+vt,
					unitic.obj[ind1].model.f[ind2][2]+vt,
					unitic.obj[ind1].model.f[ind2][3]+vt,
					f=unitic.obj[ind1].model.f[ind2].f,
					uv={
						x={unitic.obj[ind1].model.f[ind2].uv[1][1],unitic.obj[ind1].model.f[ind2].uv[2][1],unitic.obj[ind1].model.f[ind2].uv[3][1]},
						y={unitic.obj[ind1].model.f[ind2].uv[1][2],unitic.obj[ind1].model.f[ind2].uv[2][2],unitic.obj[ind1].model.f[ind2].uv[3][2]}
					},
					hl = (highlighting == ind1)
				}
			end
		end
	end
	--rotate all polygons
	local txsin = math.sin(cam.tx)
	local txcos = math.cos(cam.tx)
	local tysin = math.sin(-cam.ty)
	local tycos = math.cos(-cam.ty)

	for ind = 1, #unitic.poly.v do
		if unitic.poly.v[4]~=false then -- true or nil
		local a1 = unitic.poly.v[ind][1] - cam.x
		local b1 = unitic.poly.v[ind][2] - cam.y
		local c1 = unitic.poly.v[ind][3] - cam.z

		local c2 = c1 * tycos - a1 * tysin

		local a3 = c1 * tysin + a1 * tycos
		local b3 = b1 * txcos - c2 * txsin
		local c3 = b1 * txsin + c2 * txcos
		local c4 = c3
		if c4>-0.001 then c4=-0.001 end
		local z0 = unitic.fov / c4 --this saves one division (very important optimization)

		local x0 = a3 * z0 + 120
		local y0 = b3 * z0 + 68

		unitic.poly.v[ind][1]=x0
		unitic.poly.v[ind][2]=y0
		unitic.poly.v[ind][3]=-c4
		unitic.poly.v[ind][4]=c3>0
		end
	end

	--particles
	for ind = 1, #draw.pr do
		local a1 = draw.pr[ind].x - cam.x
		local b1 = draw.pr[ind].y - cam.y
		local c1 = draw.pr[ind].z - cam.z

		local c2 = c1 * tycos - a1 * tysin

		local x0 = c1 * tysin + a1 * tycos
		local y0 = b1 * txcos - c2 * txsin
		local z0 = b1 * txsin + c2 * txcos

		local dist=math.sqrt(x0^2+y0^2+z0^2)

		local draw_p=false
		if z0<0 then draw_p=true end

		if z0>-0.001 then z0=-0.001 end

		local z1 = unitic.fov / z0 --this saves one division (very important optimization)

		local x1 = x0 * z1 + 120
		local y1 = y0 * z1 + 68

		unitic.p[ind]={x1, y1, -z0, draw_p, draw.pr[ind].c, dist}
	end
end

function unitic.update_pr() --update particles
	local i=0 if #draw.pr~=0 then
	repeat
		i=i+1

		draw.pr[i].x = draw.pr[i].x+draw.pr[i].vx
		draw.pr[i].y = draw.pr[i].y+draw.pr[i].vy
		draw.pr[i].z = draw.pr[i].z+draw.pr[i].vz

		draw.pr[i].t = draw.pr[i].t+1

		if draw.pr[i].t==draw.pr[i].lt then table.remove(draw.pr,i) i=i-1 end
	until i>=#draw.pr end
end

function unitic.draw()
	for i = 1, #unitic.poly.f do
		local poly = unitic.poly.f[i]

		local uv = poly.uv
		
		local p2d = {
			x = { unitic.poly.v[poly[1]][1], unitic.poly.v[poly[2]][1], unitic.poly.v[poly[3]][1] },
			y = { unitic.poly.v[poly[1]][2], unitic.poly.v[poly[2]][2], unitic.poly.v[poly[3]][2] }
		}

		--we discard those polygons that will not be visible
		if poly.f~=0
		and not (unitic.poly.v[poly[1]][4] and unitic.poly.v[poly[2]][4] and unitic.poly.v[poly[3]][4])
		and not (p2d.x[1]<0 and p2d.x[2]<0 and p2d.x[3]<0)
		and not (p2d.y[1]<0 and p2d.y[2]<0 and p2d.y[3]<0)
		and not (p2d.x[1]>239 and p2d.x[2]>239 and p2d.x[3]>239)
		and not (p2d.y[1]>135 and p2d.y[2]>135 and p2d.y[3]>135)
		then

			local tri_face
			if  poly.f~=3 then
				tri_face = (p2d.x[2] - p2d.x[1]) * (p2d.y[3] - p2d.y[1]) - (p2d.x[3] - p2d.x[1]) * (p2d.y[2] - p2d.y[1]) < 0
			end

			if not (tri_face and poly.f==1)
			and not (not tri_face and poly.f==2)
			then
				ttri(
					p2d.x[1], p2d.y[1],
					p2d.x[2], p2d.y[2],
					p2d.x[3], p2d.y[3],
					uv.x[1], uv.y[1],
					uv.x[2], uv.y[2],
					uv.x[3], uv.y[3], 0, 15,
					unitic.poly.v[poly[1]][3],
					unitic.poly.v[poly[2]][3],
					unitic.poly.v[poly[3]][3])
			elseif poly.w then
					if poly.w[7]==1 then
						if poly.w[2]==2 then ttri(p2d.x[1],p2d.y[1],p2d.x[2],p2d.y[2],p2d.x[3],p2d.y[3],0,200,24,200,0,176,0,15,unitic.poly.v[poly[1]][3],unitic.poly.v[poly[2]][3],unitic.poly.v[poly[3]][3])
						else ttri(p2d.x[1],p2d.y[1],p2d.x[2],p2d.y[2],p2d.x[3],p2d.y[3],120,32,96,32,120,0,0,15,unitic.poly.v[poly[1]][3],unitic.poly.v[poly[2]][3],unitic.poly.v[poly[3]][3])
						end
					else
						if poly.w[2]==2 then ttri(p2d.x[1],p2d.y[1],p2d.x[2],p2d.y[2],p2d.x[3],p2d.y[3],24,200,24,176,0,176,0,15,unitic.poly.v[poly[1]][3],unitic.poly.v[poly[2]][3],unitic.poly.v[poly[3]][3])
						else ttri(p2d.x[1],p2d.y[1],p2d.x[2],p2d.y[2],p2d.x[3],p2d.y[3],96,32,96,0,120,0,0, 15,unitic.poly.v[poly[1]][3],unitic.poly.v[poly[2]][3],unitic.poly.v[poly[3]][3])
						end
					end
			end
			if menu.open then
				if menu.type==1 and poly.w then
					if poly.w[6] == menu.w.m_sel then
						line(p2d.x[1],p2d.y[1],p2d.x[2],p2d.y[2],13)
						line(p2d.x[2],p2d.y[2],p2d.x[3],p2d.y[3],13)
						line(p2d.x[3],p2d.y[3],p2d.x[1],p2d.y[1],13)
					elseif poly.w[6] == menu.w.sel then
						line(p2d.x[1],p2d.y[1],p2d.x[2],p2d.y[2],7)
						line(p2d.x[2],p2d.y[2],p2d.x[3],p2d.y[3],7)
						line(p2d.x[3],p2d.y[3],p2d.x[1],p2d.y[1],7)
					end
				elseif menu.type==2 then
					if poly.hl then
						line(p2d.x[1],p2d.y[1],p2d.x[2],p2d.y[2],12)
						line(p2d.x[2],p2d.y[2],p2d.x[3],p2d.y[3],12)
						line(p2d.x[3],p2d.y[3],p2d.x[1],p2d.y[1],12)
					end
				end
			end
		end
	end

	if #unitic.p~=0 then
		for i = 1, #unitic.p do
			if unitic.p[i][4] then
				local p2d = {x=unitic.p[i][1],y=unitic.p[i][2]}

				local color = unitic.p[i][5]
				local color1= color % 4
				local color2= color //4
				local size = 1/unitic.p[i][6]*2.4*unitic.fov

				if color == 0 then size = 1 end

				local z0 = unitic.p[i][3]

				ttri(
					p2d.x-size,p2d.y-size,
					p2d.x-size,p2d.y+size,
					p2d.x+size,p2d.y+size,
					24 + color1*2,248 + color2*2,
					24 + color1*2,249 + color2*2,
					25 + color1*2,248 + color2*2,
					0,-1,z0,z0,z0)
				ttri(
					p2d.x+size,p2d.y-size,
					p2d.x-size,p2d.y-size,
					p2d.x+size,p2d.y+size,
					24 + color1*2,248 + color2*2,
					24 + color1*2,249 + color2*2,
					25 + color1*2,248 + color2*2,
					0,-1,z0,z0,z0)
			end
		end
	end
end

local wall_coll={[1]=true,[2]=true,[3]=true,[4]=true,[8]=true,[9]=true,[10]=true,[13]=true,[14]=true,[16]=true,[17]=true,[18]=true}

function unitic.player_collision()
	local colx = false
	local coly = false
	local colz = false

	local function plr_collide(x1,y1,z1,x2,y2,z2)
		local ti=false
		if not coll(lx - 16, ly - 64, lz - 16, lx + 16, ly + 16, lz + 16, x1,y1,z1, x2,y2,z2) then
			if coll(plr.x - 16, ly - 64, lz - 16, plr.x + 16, ly + 16, lz + 16, x1,y1,z1, x2,y2,z2) then ti = true colx=true end
			if coll(lx - 16, plr.y - 64, lz - 16, lx + 16, plr.y + 16, lz + 16, x1,y1,z1, x2,y2,z2) then ti = true coly=true end
			if coll(lx - 16, ly - 64, plr.z - 16, lx + 16, ly + 16, plr.z + 16, x1,y1,z1, x2,y2,z2) then ti = true colz=true end
			if not ti and coll(plr.x - 16, plr.y - 64, plr.z - 16, plr.x + 16, plr.y + 16, plr.z + 16, x1,y1,z1, x2,y2,z2) then
				if y1~=y2 and z1~=z2 then colx=true end
				if x1~=x2 and z1~=z2 then coly=true end
				if x1~=x2 and y1~=y2 then colz=true end
			end
		end
	end

	local function obj_collide(id,x,y,z)
		if #model[id].coll==0 then return end
		for i=1,#model[id].coll do
			local col1=model[id].coll[i]
			plr_collide(x+col1[1],y+col1[2],z+col1[3], x+col1[4],y+col1[5],z+col1[6])
		end
	end

	local x1=max((plr.x-17)//96,0)
	local y1=max((plr.y-65)//128,0)
	local z1=max((plr.z-17)//96,0)

	local x2=min((plr.x+16)//96,world_size[1]-1)
	local y2=min((plr.y+16)//128,world_size[2]-1)
	local z2=min((plr.z+16)//96,world_size[3]-1)

	for x0 = x1,x2 do for y0 = y1,y2 do for z0 = z1,z2 do
		if wall_coll[draw.map[1][x0][y0][z0][2]] then
			plr_collide(x0 * 96, y0 * 128 + 2, z0 * 96 + 2, x0 * 96, y0 * 128 + 126, z0 * 96 + 94)
		elseif draw.map[1][x0][y0][z0][2]==5 or draw.map[1][x0][y0][z0][2]==6 then
			if not draw.p[1] or not draw.p[2] then
				plr_collide(x0 * 96, y0 * 128 + 2, z0 * 96 + 2, x0 * 96, y0 * 128 + 126, z0 * 96 + 94)
			else
				if coll(plr.x - 16, ly - 64, lz - 16, plr.x + 16, ly + 16, lz + 16, x0 * 96, y0 * 128 + 2, z0 * 96 + 2, x0 * 96, y0 * 128 + 126, z0 * 96 + 2)
				or coll(plr.x - 16, ly - 64, lz - 16, plr.x + 16, ly + 16, lz + 16, x0 * 96, y0 * 128 + 2, z0 * 96 + 94, x0 * 96, y0 * 128 + 126, z0 * 96 + 94)
				or coll(plr.x - 16, ly - 64, lz - 16, plr.x + 16, ly + 16, lz + 16, x0 * 96, y0 * 128 + 126, z0 * 96 + 2, x0 * 96, y0 * 128 + 126, z0 * 96 + 94) then colx = true end

				if coll(lx - 16, plr.y - 64, lz - 16, lx + 16, plr.y + 16, lz + 16, x0 * 96, y0 * 128 + 2, z0 * 96 + 2, x0 * 96, y0 * 128 + 126, z0 * 96 + 2)
				or coll(lx - 16, plr.y - 64, lz - 16, lx + 16, plr.y + 16, lz + 16, x0 * 96, y0 * 128 + 2, z0 * 96 + 94, x0 * 96, y0 * 128 + 126, z0 * 96 + 94)
				or coll(lx - 16, plr.y - 64, lz - 16, lx + 16, plr.y + 16, lz + 16, x0 * 96, y0 * 128 + 126, z0 * 96 + 2, x0 * 96, y0 * 128 + 126, z0 * 96 + 94) then coly = true end

				if coll(lx - 16, ly - 64, plr.z - 16, lx + 16, ly + 16, plr.z + 16, x0 * 96, y0 * 128 + 2, z0 * 96 + 2, x0 * 96, y0 * 128 + 126, z0 * 96 + 2)
				or coll(lx - 16, ly - 64, plr.z - 16, lx + 16, ly + 16, plr.z + 16, x0 * 96, y0 * 128 + 2, z0 * 96 + 94, x0 * 96, y0 * 128 + 126, z0 * 96 + 94)
				or coll(lx - 16, ly - 64, plr.z - 16, lx + 16, ly + 16, plr.z + 16, x0 * 96, y0 * 128 + 126, z0 * 96 + 2, x0 * 96, y0 * 128 + 126, z0 * 96 + 94) then colz = true end
			end
		elseif draw.map[1][x0][y0][z0][2]==11 then
			plr_collide(x0 * 96, y0 * 128 + 2, z0 * 96 + 62, x0 * 96, y0 * 128 + 126, z0 * 96 + 94)
		elseif draw.map[1][x0][y0][z0][2]==12 then
			plr_collide(x0 * 96, y0 * 128 + 2, z0 * 96 + 2, x0 * 96, y0 * 128 + 126, z0 * 96 + 34)
		elseif draw.map[1][x0][y0][z0][2]==7 then
			if coll(lx - 16, ly - 64, lz - 16, lx + 16, ly + 16, lz + 16, x0 * 96, y0 * 128 + 2, z0 * 96 + 2, x0 * 96, y0 * 128 + 126, z0 * 96 + 94) then plr.cd2=10 end
		elseif draw.map[1][x0][y0][z0][2]==15 then
			if coll(lx - 16, ly - 64, lz - 16, lx + 16, ly + 16, lz + 16, x0 * 96, y0 * 128 + 2, z0 * 96 + 2, x0 * 96, y0 * 128 + 126, z0 * 96 + 94) then plr.hp=0 sfx_(2,"C-3",-1,1) end
		end

		if draw.map[2][x0][y0][z0][2] > 0 and draw.map[2][x0][y0][z0][2]~=5 and draw.map[2][x0][y0][z0][2]~=8 and draw.map[2][x0][y0][z0][2]~=9 then
			plr_collide(x0 * 96 + 2, y0 * 128, z0 * 96 + 2, x0 * 96 + 94, y0 * 128, z0 * 96 + 94)
		elseif draw.map[2][x0][y0][z0][2]==5 then
			if coll(lx - 16, ly - 64, lz - 16, lx + 16, ly + 16, lz + 16, x0 * 96 + 2, y0 * 128, z0 * 96 + 2, x0 * 96 + 94, y0 * 128, z0 * 96 + 94) then plr.hp=0 sfx_(2,"C-3",-1,1) end
		elseif draw.map[2][x0][y0][z0][2]==8 or draw.map[2][x0][y0][z0][2]==9 then
			if coll(lx - 16, ly - 64, lz - 16, lx + 16, ly + 16, lz + 16, x0 * 96 + 2, y0 * 128, z0 * 96 + 2, x0 * 96 + 94, y0 * 128, z0 * 96 + 94) then plr.vy=12 sfx_(0,"C-6",-1,1) end
		end

		if wall_coll[draw.map[3][x0][y0][z0][2]] then
			plr_collide(x0 * 96 + 2, y0 * 128 + 2, z0 * 96, x0 * 96 + 94, y0 * 128 + 126, z0 * 96)
		elseif draw.map[3][x0][y0][z0][2]==5 or draw.map[3][x0][y0][z0][2]==6 then
			if not draw.p[1] or not draw.p[2] then
				plr_collide(x0 * 96, y0 * 128, z0 * 96, x0 * 96 + 96, y0 * 128 + 128, z0 * 96)
			else
				if coll(plr.x - 16, ly - 64, lz - 16, plr.x + 16, ly + 16, lz + 16, x0 * 96 + 2, y0 * 128 + 2, z0 * 96, x0 * 96 + 2, y0 * 128 + 126, z0 * 96)
				or coll(plr.x - 16, ly - 64, lz - 16, plr.x + 16, ly + 16, lz + 16, x0 * 96 + 94, y0 * 128 + 2, z0 * 96, x0 * 96 + 94, y0 * 128 + 126, z0 * 96)
				or coll(plr.x - 16, ly - 64, lz - 16, plr.x + 16, ly + 16, lz + 16, x0 * 96 + 2, y0 * 128 + 126, z0 * 96, x0 * 96 + 94, y0 * 128 + 126, z0 * 96) then colx = true end

				if coll(lx - 16, plr.y - 64, lz - 16, lx + 16, plr.y + 16, lz + 16, x0 * 96 + 2, y0 * 128 + 2, z0 * 96, x0 * 96 + 2, y0 * 128 + 126, z0 * 96)
				or coll(lx - 16, plr.y - 64, lz - 16, lx + 16, plr.y + 16, lz + 16, x0 * 96 + 94, y0 * 128 + 2, z0 * 96, x0 * 96 + 94, y0 * 128 + 126, z0 * 96)
				or coll(lx - 16, plr.y - 64, lz - 16, lx + 16, plr.y + 16, lz + 16, x0 * 96 + 2, y0 * 128 + 126, z0 * 96, x0 * 96 + 94, y0 * 128 + 126, z0 * 96) then coly = true end

				if coll(lx - 16, ly - 64, plr.z - 16, lx + 16, ly + 16, plr.z + 16, x0 * 96 + 2, y0 * 128 + 2, z0 * 96, x0 * 96 + 2, y0 * 128 + 126, z0 * 96)
				or coll(lx - 16, ly - 64, plr.z - 16, lx + 16, ly + 16, plr.z + 16, x0 * 96 + 94, y0 * 128 + 2, z0 * 96, x0 * 96 + 94, y0 * 128 + 126, z0 * 96)
				or coll(lx - 16, ly - 64, plr.z - 16, lx + 16, ly + 16, plr.z + 16, x0 * 96 + 2, y0 * 128 + 126, z0 * 96, x0 * 96 + 94, y0 * 128 + 126, z0 * 96) then colz = true end
			end
		elseif draw.map[3][x0][y0][z0][2]==7 then
			if coll(lx - 16, ly - 64, lz - 16, lx + 16, ly + 16, lz + 16, x0 * 96 + 2, y0 * 128 + 2, z0 * 96, x0 * 96 + 94, y0 * 128 + 126, z0 * 96) then plr.cd2=10 end
		elseif draw.map[3][x0][y0][z0][2]==11 then
			plr_collide(x0 * 96 + 62, y0 * 128 + 2, z0 * 96, x0 * 96 + 94, y0 * 128 + 126, z0 * 96)
		elseif draw.map[3][x0][y0][z0][2]==12 then
			plr_collide(x0 * 96 + 2, y0 * 128 + 2, z0 * 96, x0 * 96 + 34, y0 * 128 + 126, z0 * 96)
		elseif draw.map[3][x0][y0][z0][2]==15 then
			if coll(lx - 16, ly - 64, lz - 16, lx + 16, ly + 16, lz + 16, x0 * 96 + 2, y0 * 128 + 2, z0 * 96, x0 * 96 + 94, y0 * 128 + 126, z0 * 96) then plr.hp=0 sfx_(2,"C-3",-1,1) end
		end
	end end end
	--collision with objects
	for i=1,#draw.objects.c do
		local x0=draw.objects.c[i].x
		local y0=draw.objects.c[i].y
		local z0=draw.objects.c[i].z
		obj_collide(1, x0, y0, z0)
		if draw.objects.c[i].held and coll(lx - 16, ly - 64, lz - 16, lx + 16, ly + 16, lz + 16, x0 - 24, y0 + 24, z0 - 24, x0 + 24, y0 + 24.1, z0 + 24) then draw.objects.c[i].held=false plr.holding=false end
		if draw.objects.c[i].inp then
			local x0=draw.objects.c[i].x1
			local y0=draw.objects.c[i].y1
			local z0=draw.objects.c[i].z1
			obj_collide(1, x0, y0, z0)
		end
	end

	local object_types = {"cd", "lb", "b", "t", "l"}
	for _,type in ipairs(object_types) do
		for _,obj in ipairs(draw.objects[type]) do
			local x0, y0, z0 = obj.x, obj.y, obj.z
			obj_collide(obj.type, x0, y0, z0)
		end
	end

	if plr.noclip then return end
	if colx then plr.x = lx end
	if coly then plr.y = ly end
	if colz then plr.z = lz end
	plr.xy=coly
end

function unitic.cube_update() --all physics related to cubes
	-- dispensers
	for i=1,#draw.objects.cd do
		draw.objects.cd[i].t=draw.objects.cd[i].t-1
		if draw.objects.cd[i].t==1 then
			addobj(draw.objects.cd[i].x,draw.objects.cd[i].y,draw.objects.cd[i].z,draw.objects.cd[i].ct,i)
		end
	end
	--cubes
	local i=0
	if #draw.objects.c==0 then return end

	repeat
		i=i+1

		local clx=draw.objects.c[i].x
		local cly=draw.objects.c[i].y
		local clz=draw.objects.c[i].z

		local cx=draw.objects.c[i].x
		local cy=draw.objects.c[i].y
		local cz=draw.objects.c[i].z

		cx=cx + draw.objects.c[i].vx
		cy=cy + draw.objects.c[i].vy
		cz=cz + draw.objects.c[i].vz

		draw.objects.c[i].vx=draw.objects.c[i].vx*0.9
		draw.objects.c[i].vy=draw.objects.c[i].vy-0.5
		draw.objects.c[i].vz=draw.objects.c[i].vz*0.9

		if     draw.objects.c[i].vx<-20 then draw.objects.c[i].vx=-20
		elseif draw.objects.c[i].vx> 20 then draw.objects.c[i].vx= 20 end
		
		if     draw.objects.c[i].vy<-20 then draw.objects.c[i].vy=-20
		elseif draw.objects.c[i].vy> 20 then draw.objects.c[i].vy= 20 end
		
		if     draw.objects.c[i].vz<-20 then draw.objects.c[i].vz=-20
		elseif draw.objects.c[i].vz> 20 then draw.objects.c[i].vz= 20 end


		
		local bf = false --is the cube in the blue field

		local x1=(cx-25)//96
		local y1=(cy-25)//128
		local z1=(cz-25)//96

		if x1<0 then x1 = 0 end
		if y1<0 then y1 = 0 end
		if z1<0 then z1 = 0 end

		local x2=(cx+25)//96
		local y2=(cy+25)//128
		local z2=(cz+25)//96

		if x2>world_size[1]-1 then x2 = world_size[1]-1 end
		if y2>world_size[2]-1 then y2 = world_size[2]-1 end
		if z2>world_size[3]-1 then z2 = world_size[3]-1 end

		local function collide(x3, y3, z3, x4, y4, z4)
			-- try moving the current amount in each axis, partially cancelling if needed
			if not coll(cx - 24, cy - 24, cz - 24, cx + 24, cy + 24, cz + 24, x3, y3, z3, x4, y4, z4) then return end

			local sx = coll_shift(
				cx - 24, cly - 24, clz - 24, cx + 24, cly + 24, clz + 24,
				x3, y3, z3, x4, y4, z4, 1
			)
			if sx ~= 0 then draw.objects.c[i].vx = 0 end
			cx = cx + sx
			local sy = coll_shift(
				clx - 24, cy - 24, clz - 24, clx + 24, cy + 24, clz + 24,
				x3, y3, z3, x4, y4, z4, 2
			)
			if sy ~= 0 then draw.objects.c[i].vy = 0 end
			cy = cy + sy
			local sz = coll_shift(
				clx - 24, cly - 24, cz - 24, clx + 24, cly + 24, cz + 24,
				x3, y3, z3, x4, y4, z4, 3
			)
			if sz ~= 0 then draw.objects.c[i].vz = 0 end
			cz = cz + sz
		end

		local function obj_collide(id,x,y,z)
			if #model[id].coll==0 then return end
			for i=1,#model[id].coll do
				local col1=model[id].coll[i]
				collide(x+col1[1],y+col1[2],z+col1[3], x+col1[4],y+col1[5],z+col1[6])
			end
		end

		for x0 = x1,x2 do for y0 = y1,y2 do for z0 = z1,z2 do
			if wall_coll[draw.map[1][x0][y0][z0][2]] then
				collide(x0 * 96, y0 * 128 + 2, z0 * 96 + 2, x0 * 96, y0 * 128 + 126, z0 * 96 + 94)
			elseif draw.map[1][x0][y0][z0][2]==5 or draw.map[1][x0][y0][z0][2]==6 then
				if not draw.p[1] or not draw.p[2] then
					collide(x0 * 96, y0 * 128 + 2, z0 * 96 + 2, x0 * 96, y0 * 128 + 126, z0 * 96 + 94)
				else
					collide(x0 * 96, y0 * 128 + 2, z0 * 96 + 2, x0 * 96, y0 * 128 + 126, z0 * 96 + 2)
					collide(x0 * 96, y0 * 128 + 2, z0 * 96 + 94, x0 * 96, y0 * 128 + 126, z0 * 96 + 94)
					collide(x0 * 96, y0 * 128 + 126, z0 * 96 + 2, x0 * 96, y0 * 128 + 126, z0 * 96 + 94)
				end
			elseif draw.map[1][x0][y0][z0][2]==7 then
				if coll(clx - 24,  cly - 24, clz - 24, clx + 24,  cy + 24, clz + 24, x0 * 96, y0 * 128 + 2, z0 * 96 + 2, x0 * 96, y0 * 128 + 126, z0 * 96 + 94) then bf = true end		
			elseif draw.map[1][x0][y0][z0][2]==11 then
				collide(x0 * 96, y0 * 128 + 2, z0 * 96 + 62, x0 * 96, y0 * 128 + 126, z0 * 96 + 94)
			elseif draw.map[1][x0][y0][z0][2]==12 then
				collide(x0 * 96, y0 * 128 + 2, z0 * 96 + 2, x0 * 96, y0 * 128 + 126, z0 * 96 + 34)
			end

			if draw.map[2][x0][y0][z0][2] > 0 and draw.map[2][x0][y0][z0][2]~=5 and draw.map[2][x0][y0][z0][2]~=8 and draw.map[2][x0][y0][z0][2]~=9 then
				collide(x0 * 96 + 2, y0 * 128, z0 * 96 + 2, x0 * 96 + 94, y0 * 128, z0 * 96 + 94)
			elseif draw.map[2][x0][y0][z0][2]==8 or draw.map[2][x0][y0][z0][2]==9 then
				if coll(clx - 24, cly - 24, clz - 24, clx + 24, cly + 24, clz + 24, x0 * 96 + 2, y0 * 128, z0 * 96 + 2, x0 * 96 + 94, y0 * 128, z0 * 96 + 94) then draw.objects.c[i].vy=12 sfx_(0,"C-6",-1,1) end
			end

			if wall_coll[draw.map[3][x0][y0][z0][2]] then
				collide(x0 * 96 + 2, y0 * 128 + 2, z0 * 96, x0 * 96 + 94, y0 * 128 + 126, z0 * 96)
			elseif draw.map[3][x0][y0][z0][2]==5 or draw.map[3][x0][y0][z0][2]==6 then
				if not draw.p[1] or not draw.p[2] then
					collide(x0 * 96 + 2, y0 * 128 + 2, z0 * 96, x0 * 96 + 94, y0 * 128 + 126, z0 * 96)
				else
					collide(x0 * 96 + 2, y0 * 128 + 2, z0 * 96, x0 * 96 + 2, y0 * 128 + 126, z0 * 96)
					collide(x0 * 96 + 94, y0 * 128 + 2, z0 * 96, x0 * 96 + 94, y0 * 128 + 126, z0 * 96)
					collide(x0 * 96 + 2, y0 * 128 + 126, z0 * 96, x0 * 96 + 94, y0 * 128 + 126, z0 * 96)
				end
			elseif draw.map[3][x0][y0][z0][2]==7 then
				if coll(clx - 24, cly - 24, clz - 24, clx + 24, cly + 24, clz + 24, x0 * 96 + 2, y0 * 128 + 2, z0 * 96, x0 * 96 + 94, y0 * 128 + 126, z0 * 96) then bf=true end
			elseif draw.map[3][x0][y0][z0][2]==11 then
				collide(x0 * 96 + 62, y0 * 128 + 2, z0 * 96, x0 * 96 + 94, y0 * 128 + 126, z0 * 96)
			elseif draw.map[3][x0][y0][z0][2]==12 then
				collide(x0 * 96 + 2, y0 * 128 + 2, z0 * 96, x0 * 96 + 34, y0 * 128 + 126, z0 * 96)
			end

		end end end
		--collision with the player
		if not plr.noclip then --Correct the mystical disappearance of cubes when span through them
			local x0=plr.x
			local y0=plr.y
			local z0=plr.z
			collide(x0 - 16, y0 - 64, z0 - 16, x0 + 16, y0 + 16, z0 + 16)
		end

		--collision with objects
		for i2=1,#draw.objects.c do
			if i2~=i then
				local x0=draw.objects.c[i2].x
				local y0=draw.objects.c[i2].y
				local z0=draw.objects.c[i2].z
				obj_collide(1, x0, y0, z0)
				if draw.objects.c[i2].inp and draw.p[1] and draw.p[2] then
					x0=draw.objects.c[i].x1
					y0=draw.objects.c[i].y1
					z0=draw.objects.c[i].z1
					obj_collide(1, x0, y0, z0)
				end
			end
		end

		-- cube special cases

		for i2=1,#draw.objects.lb do
			local x0=draw.objects.lb[i2].x
			local y0=draw.objects.lb[i2].y+5 -- <--
			local z0=draw.objects.lb[i2].z
			obj_collide(draw.objects.lb[i].type , x0, y0, z0)
		end

		for i2=1,#draw.objects.fb do --exception for cubes
			local x0=draw.objects.fb[i2].x
			local y0=draw.objects.fb[i2].y
			local z0=draw.objects.fb[i2].z
			collide(x0 - 37, y0, z0 - 37, x0 + 37, y0 + 7, z0 + 37)
		end

		local object_types = {"b", "t", "l"}
		for _,type in ipairs(object_types) do
			for _,obj in ipairs(draw.objects[type]) do
				local x0, y0, z0 = obj.x, obj.y, obj.z
				obj_collide(obj.type, x0, y0, z0)
			end
		end

		--
		draw.objects.c[i].x = cx
		draw.objects.c[i].y = cy
		draw.objects.c[i].z = cz
		--
		if bf or draw.objects.c[i].y<-200 then
			sfx_(2)
			--particles
			for i2=1,80 do
				addp(cx-24       ,cy+R(-24,24),cz+R(-24,24),R()*2-1,R()*2-1,R()*2-1,R(30,60),1)
				addp(cx+24       ,cy+R(-24,24),cz+R(-24,24),R()*2-1,R()*2-1,R()*2-1,R(30,60),1)
				addp(cx+R(-24,24),cy-24       ,cz+R(-24,24),R()*2-1,R()*2-1,R()*2-1,R(30,60),1)
				addp(cx+R(-24,24),cy+24       ,cz+R(-24,24),R()*2-1,R()*2-1,R()*2-1,R(30,60),1)
				addp(cx+R(-24,24),cy+R(-24,24),cz-24       ,R()*2-1,R()*2-1,R()*2-1,R(30,60),1)
				addp(cx+R(-24,24),cy+R(-24,24),cz+24       ,R()*2-1,R()*2-1,R()*2-1,R(30,60),1)
			end
			--
			local i2=draw.objects.c[i].disp
			draw.objects.cd[i2].t=60
			draw.objects.cd[i2].ct=draw.objects.c[i].type
			--
			table.remove(draw.objects.c,i)
			i=i-1
		end
		--
	until i>=#draw.objects.c
end

function unitic.render() -------- 
	--dynamic textures
	for x0=0,15 do --light bridge
		for y0=0,11 do setpix(x0,y0+234,15) end
		local y0=(math.sin((-t%30+x0*2)/5)+1)*6
		local y1=(math.cos((-t%30+x0*2)/5)+1)*6
		local y2=(math.sin(t/20)+1)*6
		setpix(x0,F(y0)+234,11)
		setpix(x0,F(y1)+234,10)
		setpix(x0,F(y2)+234,11)
	end
	--blue / red field
	for y0=0,31,2 do
		if b_f[y0].d then
			setpix((b_f[y0][1]+t//2)%24+24,y0+32,b_f[y0][3])
			setpix((b_f[y0][2]+t//2)%24+24,y0+32,15)
			--red field
			setpix((b_f[y0][1]+t//2)%24+96,y0+64,b_f[y0][3]-2)
			setpix((b_f[y0][2]+t//2)%24+96,y0+64,15)

			setpix((b_f[y0][1]+t//2)%24+96,y0+152,b_f[y0][3]-2)
			setpix((b_f[y0][2]+t//2)%24+96,y0+152,15)
		end
		if b_f[y0+1].d then
			setpix((b_f[y0+1][1]+t//2*23)%24+24,y0+33,15)
			setpix((b_f[y0+1][2]+t//2*23)%24+24,y0+33,b_f[y0+1][3])
			--red field
			setpix((b_f[y0+1][1]+t//2*23)%24+96,y0+65,15)
			setpix((b_f[y0+1][2]+t//2*23)%24+96,y0+65,b_f[y0+1][3]-2)

			setpix((b_f[y0+1][1]+t//2*23)%24+96,y0+153,15)
			setpix((b_f[y0+1][2]+t//2*23)%24+96,y0+153,b_f[y0+1][3]-2)
		end
	end
	--particles
	for i=1,#draw.pr_g do
		local  x=draw.pr_g[i][1]*96
		local  y=draw.pr_g[i][2]*128+4
		local  z=draw.pr_g[i][3]*96
		local vx=draw.pr_g[i][4]
		local vz=draw.pr_g[i][5]
		for i=0,15 do
			if     vx==-1 then addp(x+96,y,z+i*6, R(1,4),R(-2,2), R(-2,2),R(2,10),R(10,11))
			elseif vx==1  then addp(x   ,y,z+i*6,-R(1,4),R(-2,2), R(-2,2),R(2,10),R(10,11))
			elseif vz==-1 then addp(x+i*6,y,z+96, R(-2,2),R(-2,2), R(1,4),R(2,10),R(10,11))
			elseif vz==1  then addp(x+i*6,y,z   , R(-2,2),R(-2,2),-R(1,4),R(2,10),R(10,11))
			end
		end
	end
	--
	cam.x, cam.y, cam.z, cam.tx, cam.ty = plr.x, plr.y, plr.z, plr.tx, plr.ty
	unitic.update_pr()
	unitic.update()
	unitic.draw_grid()
	unitic.draw()
	--cross
	pix(120,68,7)
end

function unitic.draw_grid()
	for x = 0, world_size[1]-1 do
		for z = 0, world_size[3]-2 do
			local p1=unitic.poly.v[x + z*world_size[4]+1]
			local p2=unitic.poly.v[x + (z+1)*world_size[4]+1]

			line(p1[1],p1[2], p2[1],p2[2],0)

			local p3=unitic.poly.v[z + x*world_size[4]+1]
			local p4=unitic.poly.v[z + x*world_size[4]+2]
			line(p3[1],p3[2], p4[1],p4[2],0)
		end
	end
end
--map
local walls = {}
local objects = {}

local function import()
	walls = {}

	for i=1,3 do
		draw.map[i]={}
		for x=0,world_size[1]-1 do
			draw.map[i][x]={}
			for y=0,world_size[2]-1 do
				draw.map[i][x][y]={}
				for z=0,world_size[3]-1 do
					draw.map[i][x][y][z]={0,0,0,0}
				end
			end
		end
	end

	local adr = 0
	while true do
		local bytes = (peek(0x08000 + adr * 3)<<16) + (peek(0x08000 + adr * 3 + 1)<<8) + peek(0x08000 + adr * 3 + 2)

		if bytes == 0 or adr>8160 then break end
		local type  = bytes % (1<<6)   bytes = bytes >> 6
		local face  = bytes % (1<<2)   bytes = bytes >> 2
		local angle = bytes % (1<<2)   bytes = bytes >> 2
		local z = bytes % (1<<4)   bytes = bytes >> 4
		local y = bytes % (1<<2)   bytes = bytes >> 2
		local x = bytes % (1<<4)   bytes = bytes >> 4

		adr = adr + 1

		addwall(x, y, z, angle, face, type, adr)
		walls[#walls+1] = {x, y, z, angle, face, type}
	end
	menu.w.sel = #walls
end

function addwall(x, y, z, angle, face, type,i)
	local bytes = 0 --converting a wall to bytes (3 bytes per wall)

	bytes = (bytes<<4) + x -- 4 bites
	bytes = (bytes<<2) + y -- 2 bites
	bytes = (bytes<<4) + z -- 4 bites
	bytes = (bytes<<2) + angle -- 2 bites
	bytes = (bytes<<2) + face  -- 2 bites
	bytes = (bytes<<6) + type  -- 6 bites
	draw.map[angle][x][y][z]={face,type,i, bytes}
	return bytes
end

function upd_walls()
	for i=1,3 do
		draw.map[i]={}
		for x=0,world_size[1]-1 do
			draw.map[i][x]={}
			for y=0,world_size[2]-1 do
				draw.map[i][x][y]={}
				for z=0,world_size[3]-1 do
					draw.map[i][x][y][z]={0,0,0,0}
				end
			end
		end
	end
	--export (1)
	for i = 0, 240*136-1 do
		poke(0x08000 + i, 0)
	end

	for i=1,#walls do
		bytes = addwall(walls[i][1],walls[i][2],walls[i][3],walls[i][4],walls[i][5],walls[i][6],i)
		poke(0x08000 + (i-1)*3    , bytes>>16)
		poke(0x08000 + (i-1)*3 + 1, bytes>>8)
		poke(0x08000 + (i-1)*3 + 2, bytes)
	end
	update_world()

	--export (2)
	sync(4, map_bank, true)
end

function addobj(x, y, z, type,t1) --objects
	local bytes = 0 --converting a object to bytes

	if type==1 or type==2 then --cubes
		draw.objects.c[#draw.objects.c+1]=
		{type=type, --type
		id=#draw.objects.c+1, --id
		x=x,y=y,z=z, --object coordinates
		vx=0, vy=0, vz=0, --velocity
		draw=true, --whether to display the model
		disp=t1, -- cube dispenser ID
		model=model[type]}
	elseif type==3 then --cube dispenser
		draw.objects.cd[#draw.objects.cd+1]=
		{type=type,
		id=#draw.objects.cd+1,
		x=x,y=y,z=z,
		draw=true,
		t=0,ct=0, --cube type
		model=model[type]}
	elseif type==4 or type==5 or type==6 or type==7 then --light bridges
		draw.objects.lb[#draw.objects.lb+1]=
		{type=type,
		id=#draw.objects.lb+1,
		x=x,y=y,z=z,
		draw=true,
		model=model[type]}
	elseif type==8 or type==9 or type==10 or type==11 then --buttons
		draw.objects.b[#draw.objects.b+1]=
		{type=type,
		id=#draw.objects.b+1,
		x=x,y=y,z=z,
		t=t1 or (math.huge), --button press time (math.huge for a constant signal, -1 to switch the signal)
		t1=0,
		tick=false, --sends a signal 1 tick long while pressing the button
		s=false, --button signal
		draw=true,model={v=model[type].v,f=model[type].f}}
	elseif type==12 or type==13 or type==14 or type==15 then --turrets
		draw.objects.t[#draw.objects.t+1]=
		{type=type,
		id=#draw.objects.t+1,
		x=x,y=y,z=z,
		cd=0,
		draw=true,model=model[type]}
	elseif type==16 then --floor button
		draw.objects.fb[#draw.objects.fb+1]=
		{type=type,
		id=#draw.objects.fb+1,
		x=x,y=y,z=z,
		tick=false,
		s=false,
		draw=true,model={v=model[type].v,f=model[type].f}}
	elseif type==17 or type==18 or type==19 or type==20 then --lifts
		draw.objects.l[#draw.objects.l+1]=
		{type=type,
		id=#draw.objects.l+1,
		x=x,y=y,z=z,
		draw=true,model=model[type]}
	elseif type==21 or type==22 or type==23 or type==24 then --display
		draw.objects.d[#draw.objects.d+1]=
		{type=type,
		id=#draw.objects.d+1,
		x=x,y=y,z=z,
		s=false, --signal
		draw=true,model={v=model[type].v,f=model[type].f}}

	elseif type<=#model and type>0 then error("unknown object | "..type) else error("unknown type | "..type) end
end

function upd_objs()
	draw.objects = {c={},cd={},lb={},b={},t={},fb={},l={},d={}}

	for i=1,#objects do
		for i2=1,#objects[i] do
			bytes = addobj(objects[i][i2][1],objects[i][i2][2],objects[i][i2][3],objects[i][i2][4])
		end
	end
end

function update_world()
	draw.world.f={}
	draw.pr_g={}

	for i=0,(world_size[1]-1)*(world_size[2]-1)*(world_size[3]-1) do draw.world.v[i+1][4] = false end

	for angle=1,3 do for x0=0,world_size[1]-1 do for y0=0,world_size[2]-1 do for z0=0,world_size[3]-1 do
		local face = draw.map[angle][x0][y0][z0][1]
		local type = draw.map[angle][x0][y0][z0][2]
		local id   = draw.map[angle][x0][y0][z0][3]

		if angle == 2 and (type == 6 or type>9) then type = 7 end
		if angle ~= 2 and type == 5 then type = 6 end

		type = type - 1
		local type1 = type%5
		local type2 = type//5
		------
		if type~=-1 then
			if angle==1 then
				table.insert(draw.world.f,{w={face,angle,x0,y0,z0,id,1},x0+y0*world_size[3]+z0*world_size[4]+1,x0+y0*world_size[3]+z0*world_size[4]+world_size[4]+1,x0+y0*world_size[3]+z0*world_size[4]+world_size[3]+1,f=face,uv={x={24+type1*24,type1*24,24+type1*24},y={32+type2*32,32+type2*32,0+type2*32}}})
				table.insert(draw.world.f,{w={face,angle,x0,y0,z0,id,2},x0+y0*world_size[3]+z0*world_size[4]+world_size[4]+1,x0+y0*world_size[3]+z0*world_size[4]+world_size[4]+world_size[3]+1,x0+y0*world_size[3]+z0*world_size[4]+world_size[3]+1,f=face,uv={x={type1*24,type1*24,24+type1*24},y={32+type2*32,0+type2*32,0+type2*32}}})
				--
				draw.world.v[x0+y0*world_size[3]+z0*world_size[4]+1][4]=true
				draw.world.v[x0+y0*world_size[3]+z0*world_size[4]+world_size[4]+1][4]=true
				draw.world.v[x0+y0*world_size[3]+z0*world_size[4]+world_size[3]+1][4]=true
				draw.world.v[x0+y0*world_size[3]+z0*world_size[4]+world_size[4]+world_size[3]+1][4]=true
			end

			if angle==2 then
				table.insert(draw.world.f,{w={face,angle,x0,y0,z0,id,1},x0+y0*world_size[3]+z0*world_size[4]+1,x0+y0*world_size[3]+z0*world_size[4]+2,x0+y0*world_size[3]+z0*world_size[4]+world_size[4]+1,f=face,uv={x={0+type1*24,0+type1*24,24+type1*24},y={152+type2*24,176+type2*24,152+type2*24}}})
				table.insert(draw.world.f,{w={face,angle,x0,y0,z0,id,2},x0+y0*world_size[3]+z0*world_size[4]+2,x0+y0*world_size[3]+z0*world_size[4]+world_size[4]+2,x0+y0*world_size[3]+z0*world_size[4]+world_size[4]+1,f=face,uv={x={0+type1*24,24+type1*24,24+type1*24},y={176+type2*24,176+type2*24,152+type2*24}}})
				draw.world.v[x0+y0*world_size[3]+z0*world_size[4]+1][4]=true
				draw.world.v[x0+y0*world_size[3]+z0*world_size[4]+2][4]=true
				draw.world.v[x0+y0*world_size[3]+z0*world_size[4]+world_size[4]+1][4]=true
				draw.world.v[x0+y0*world_size[3]+z0*world_size[4]+world_size[4]+2][4]=true
			end

			if angle==3 then
				table.insert(draw.world.f,{w={face,angle,x0,y0,z0,id,1},x0+y0*world_size[3]+z0*world_size[4]+1,x0+y0*world_size[3]+z0*world_size[4]+2,x0+y0*world_size[3]+z0*world_size[4]+world_size[3]+1,f=face,uv={x={24+type1*24,type1*24,24+type1*24},y={32+type2*32,32+type2*32,0+type2*32}}})
				table.insert(draw.world.f,{w={face,angle,x0,y0,z0,id,2},x0+y0*world_size[3]+z0*world_size[4]+2,x0+y0*world_size[3]+z0*world_size[4]+world_size[3]+2,x0+y0*world_size[3]+z0*world_size[4]+world_size[3]+1,f=face,uv={x={type1*24,type1*24,24+type1*24},y={32+type2*32,0+type2*32,0+type2*32}}})
				draw.world.v[x0+y0*world_size[3]+z0*world_size[4]+1][4]=true
				draw.world.v[x0+y0*world_size[3]+z0*world_size[4]+2][4]=true
				draw.world.v[x0+y0*world_size[3]+z0*world_size[4]+world_size[3]+2][4]=true
				draw.world.v[x0+y0*world_size[3]+z0*world_size[4]+world_size[3]+1][4]=true
			end


			if face == 2 and (angle == 1 or angle == 3) then
				local idx = #draw.world.f
				for i = 1, 3 do
					draw.world.f[idx - 1].uv.x[i] = (2 * type1 + 1) * 24 - draw.world.f[idx - 1].uv.x[i]
					draw.world.f[idx].uv.x[i] = (2 * type1 + 1) * 24 - draw.world.f[idx].uv.x[i]
				end
			end
		end
		------
	end end end end
	--light bridge generator
	draw.objects.lb={}
	draw.world.sp={}
	if draw.lg~=0 then
		for i=1,#draw.lg do
			local lx,ly,lz=draw.lg[i][1],draw.lg[i][2],draw.lg[i][3]
			local vx,vz=0,0
			if     draw.lg[i][4]==1 and draw.lg[i][5]==1 then vx=-1 lx=lx-1
			elseif draw.lg[i][4]==1 and draw.lg[i][5]==2 then vx=1
			elseif draw.lg[i][4]==3 and draw.lg[i][5]==1 then vz=1
			elseif draw.lg[i][4]==3 and draw.lg[i][5]==2 then vz=-1 lz=lz-1 else error(draw.lg[i][4].." | "..draw.lg[i][5])
			end
			for _=1,100 do --bridge lenght limiter
				if     vx==-1 then addobj(48+lx*96,ly*128,48+lz*96,4)
				elseif vx==1  then addobj(48+lx*96,ly*128,48+lz*96,5)
				elseif vz==-1 then addobj(48+lx*96,ly*128,48+lz*96,6)
				elseif vz==1  then addobj(48+lx*96,ly*128,48+lz*96,7)
				end

				lx=lx+vx
				lz=lz+vz

				--if the bridge collides with a wall, we stop the loop
				if lx<0 or lx>world_size[1]-1 or lz<0 or lz>world_size[3]-1 then draw.pr_g[#draw.pr_g+1]={lx,ly,lz,vx,vz} break end
				if (vx==1  and draw.map[1][lx  ][ly][lz  ][2]~=0 and draw.map[1][lx  ][ly][lz  ][2]~=3 and draw.map[1][lx  ][ly][lz  ][2]~=15)
				or (vx==-1 and draw.map[1][lx+1][ly][lz  ][2]~=0 and draw.map[1][lx+1][ly][lz  ][2]~=3 and draw.map[1][lx+1][ly][lz  ][2]~=15)
				or (vz==1  and draw.map[3][lx  ][ly][lz  ][2]~=0 and draw.map[3][lx  ][ly][lz  ][2]~=3 and draw.map[3][lx  ][ly][lz  ][2]~=15)
				or (vz==-1 and draw.map[3][lx  ][ly][lz+1][2]~=0 and draw.map[3][lx  ][ly][lz+1][2]~=3 and draw.map[3][lx  ][ly][lz+1][2]~=15) then draw.pr_g[#draw.pr_g+1]={lx,ly,lz,vx,vz} break
				end
			end
		end
	end
end

local function load_world() --Loads the world from the map RAM
	--init
	draw.map={}
	draw.world={v={},f={},sp={}}
	draw.pr={}
	draw.pr_g={}
	draw.lg={}
	draw.objects={
		c={}, --cubes
		cd={}, --cube dispensers
		lb={}, --light bridges
		b={}, --buttons
		t={}, --turrets
		fb={}, --floor button
		l={}, --lifts
		d={} --displays
	}

	for z=0,world_size[1]-1 do for y=0,world_size[2]-1 do for x=0,world_size[3]-1 do
		table.insert(draw.world.v,{x*96,y*128,z*96,false}) --this boolean is resposible for whether the point needs to be updated or not
		--addp(x*96,y*128,z*96,0,0,0, math.huge,0)
	end end end

	import()
	----
	update_world()
end
--palette
local pal="0000001c181c3838385d5d5d7d7d7dbababad6d6d6fffffff21018ff55553499ba65eef6b2f6faff8d18ffbe3c283040"

function savepal()
	local pal_1={}
	for i=0,48 do
		local val=peek(0x3FC0+i)
		pal_1[i]=val
	end
	return pal_1
end

function loadpal(pal_1)
	for i=0,48 do
		poke(0x3FC0+i,pal_1[i])
	end
end

function respal()
	for i=1,#pal,2 do
		poke(0x3FC0+i//6*3+i//2%3,tonumber(pal:sub(i,i+1),16))
	end
end

function updpal(r,g,b)
	for i=0,47,3 do
		poke(0x03FC0+i,peek(0x03FC0+i)*r) --RLUE
		poke(0x03FC1+i,peek(0x03FC1+i)*g) --BREEN
		poke(0x03FC2+i,peek(0x03FC2+i)*b) --GED
	end
end

function darkpal(c)
	for i=0,47 do --RGB
		poke(0x03FC0+i,peek(0x03FC0+i)*c)
	end
end

local x_p={x=0, y=7, mx=0, my=0, type=2, drag = false} --xyz pointer

local function xyz_pointer(p_x,p_y, type)
	if type == 0 then return end
   local xyz2={{0,0,-1,1},{0,0,-1,2},{0,0,-1,3}} --2d coordinates, depth, color
   local xyz3={{1,0,0,1},{0,1,0,2},{0,0,1,3}} --3d coordinates, color
   --magic
   for u=1,3 do
      --rotate
      local a1=xyz3[u][1]
      local b1=xyz3[u][2]
      local c1=xyz3[u][3]

      local c2=c1*math.cos(-cam.ty)-a1*math.sin(-cam.ty)
      local a2=c1*math.sin(-cam.ty)+a1*math.cos(-cam.ty)
      local b2=b1

      local b3=b2*math.cos(cam.tx)-c2*math.sin(cam.tx)
      local c3=b2*math.sin(cam.tx)+c2*math.cos(cam.tx)
      local a3=a2

      xyz3[u][1]=a3
      xyz3[u][2]=b3
      xyz3[u][3]=min(c3,-1)

      xyz2[u][1]=12*xyz3[u][1]/xyz3[u][3]+15+p_x
      xyz2[u][2]=12*xyz3[u][2]/xyz3[u][3]+15+p_y
      xyz2[u][3]=c3
   end --the end of the magic
	--sort
	local function sort_p(a,b)
		return a[3]<b[3]
	end
	table.sort(xyz2,sort_p)
	--render
	local colors = {10,13,8}
	for i = 1,3 do
		line(xyz2[i][1], xyz2[i][2], 15+p_x, 15+p_y, colors[xyz2[i][4]])
		pix(15+p_x, 15+p_y,7)
		if type==2 then spr(399+xyz2[i][4], xyz2[i][1]-2, xyz2[i][2]-3, 15) end
	end
end

local avf={} --average frame
local fr={0,0,0} --framerate

local f_m = false --fixed mouse cursor
local fmt = 0
--player speed
local speed=4
--init
local state
local tm1,tm2 = 0,0
local p={t=0} --pause
local ms={b={}} --main screen | Table with current buttons
local ee={t=600, i=0, draw = false} --easter egg
local mbc = 0 --map bank id
local ee_text = {
	"The cake its a lie",
	"Never gonna give you up",
	"By HanamileH & soxfox42",
	"Powered by UniTIC v1.3"
}
--buttons
local menu_options --It must be separate, otherwise local variables inside this table may not see each other

local function load_map_bank(i)
	ms.b = menu_options.mb
	map_bank_state[map_bank+1] = (#walls~=0)
	state="edit"
	poke(0x7FC3F,1,1)
	map_bank = i
	sync(4, map_bank, false)
	pmem(0, map_bank)
	load_world()
	trace("Current bank: "..map_bank,3)
end

menu_options = {
	p = { --pause
		{draw = true, y = 65, t=1, text = "Resume"       , func = function() state="edit" sfx_(17) poke(0x7FC3F,1,1) end},
		{draw = true, y = 85, t=1, text = "select a map bank", func = function() ms.b = menu_options.mb sfx_(16)end},
	},
	mb = { --map bank select
		{draw = true, y =  45, t=1, text = "Map bank 0", func = function()load_map_bank(0)end},
		{draw = true, y =  55, t=1, text = "Map bank 1", func = function()load_map_bank(1)end},
		{draw = true, y =  65, t=1, text = "Map bank 2", func = function()load_map_bank(2)end},
		{draw = true, y =  75, t=1, text = "Map bank 3", func = function()load_map_bank(3)end},
		{draw = true, y =  85, t=1, text = "Map bank 4", func = function()load_map_bank(4)end},
		{draw = true, y =  95, t=1, text = "Map bank 5", func = function()load_map_bank(5)end},
		{draw = true, y = 105, t=1, text = "Map bank 6", func = function()load_map_bank(6)end},
		{draw = true, y = 115, t=1, text = "Map bank 7", func = function()load_map_bank(7)end},
		{draw = true, y = 125, t=1, text = "Back", func = function() ms.b = menu_options.p sfx_(17)end},
	}
}

local function upd_buttons()
	for i = 1, #ms.b do
		local b = ms.b[i]
		if b.draw then
			if ms.b == menu_options.mb and i<9 then
				if map_bank == i-1 then
					print(b.text, min(24-b.t*20), b.y, 11)
					print("Current", 192, b.y, 11)
				elseif map_bank_state[i]  then
					print(b.text, min(24-b.t*20), b.y, 7)
				else
					print("Empty", 198, b.y, 2)
					print(b.text, min(24-b.t*20), b.y, 2)
				end

			else
				print(b.text, min(24-b.t*20), b.y, 7)
			end

			if my > b.y - 3 and my < b.y + 8 then
				b.t = max(b.t-0.05,0.5)
				cid = 1
				if clp1 then b.func() break end
			else
				b.t = min(1,b.t+0.05)
			end
		end
	end
end

local function upd_buttons_bdr(bdr_y,orig_pal)
	if bdr_y == 0 then
		orig_pal()
	end
	for i = 1, #ms.b + 1 do
		local b
		local lb
		if i<=#ms.b then b = ms.b[i] end
		if i>1 then lb = ms.b[i-1] end

		if lb and lb.draw and lb.y == bdr_y - 8 then
			orig_pal()
		end
		
		if b and b.draw and b.y == bdr_y + 2 then
			darkpal(b.t)
		end

	end
end

local function button(bx,by,bw,bh,cursor)
	if mx>=bx and my>=by and mx<bx+bw and my<by+bh then
		-- rectb(bx,by,bw,bh,13)
		if cursor~=false then cid=1 end --true or nil
		return true
	end
end

local function print_mid(text,x,y,color)
	local text_size=print(text,240,0)
	print(text,x - text_size//2, y, color)
end

local function clip_val(val, min_v,max_v)
	if val<min_v then return min_v end
	if val>max_v then return max_v end
	return val
end

menu = {
	open = true,
	type = 1,
	w={ --walls editor
		sel = 0, --select wall id
		m_sel = -1, --mouse selection
		sl = {id=0, val=0, val_2=0 , t=0, n= false} --slider
	},
	o={ --object editor
		tab = 1,
		sel = {}, --unique for each tab
		sl = {id=0, val=0, val_2=0 , t=0, n= false}, --slider
		magnet = false
	}
}

local objects_data = {
	names={
		"cube",
		"cube dispenser",
		"button",
		"floor button",
		"turret",
		"display",
		"light bridge gerenator",
		"lift"
	},
	types={
		{1,2},
		{3},
		{8,9,10,11},
		{16},
		{12,13,14,15},
		{21,22,23,24},
		nil, --special cases
		nil
	},
	m_step={ -- magnet step multiplier (the minimum lenght of 1 step)
		{24,24 ,24},
		{24,32 ,24},
		{24,128,24},
		{48,128,48},
		{48,128,48},
		{96,128,96},
		{96,128,96}
	}
}

for i = 1,#objects_data.names do menu.o.sel[i] = 0 objects[i]={} end

state="map_bank_check"

sync(4, map_bank, false)
function TIC()
	--counters
	t1 = time()
	t = t + 1
	--mouse
	mx, my, cl1, _, cl2, _, whl = mouse()
	cid=0 --cursor id

	local nclp2 = not clp2 and tm2~=0
	ins = true --is the cursor in the scene

	sc1 = tm1 <= 15 and tm1>0 and not cl1 --short click

	if cl1 then tm1 = tm1 + 1 else tm1 = 0 end
	if cl2 then tm2 = tm2 + 1 else tm2 = 0 end

	clp1 = tm1 == 1
	clp2 = tm2 == 1
	--------------------------
	-- map bank check --------
	--------------------------
	if state=="map_bank_check" then
		cls(0)
		print("Please wait...",85,63,1)
		if mbc >= 8 then
			sync(4, map_bank, false)
			state = "load lvl"
		else
			sync(4, mbc, false)
		end

		map_bank_state[mbc+1] = false
		for i = 0, 240*136-1 do
			if peek(0x08000+i) ~=0 then map_bank_state[mbc+1] = true break end
		end

		mbc = mbc + 1
	end
	--------------------------
	-- load lvl --------------
	--------------------------
	if state=="load lvl" then
		world_size={12,4,12,4*12,12*4*12}
		load_world()
		--
		mx,my=0,0
		poke(0x7FC3F,1,1)
		state="edit"
	end
	--------------------------
	-- pause -----------------
	--------------------------
	if state=="pause" then
		p.t=p.t+1
		--GUI
		vbank(0)
		memcpy(0x0,0x8000,240*136/2)
		vbank(1)
		cls(0)
		--logo
		spr(256,min(-104+p.t*6,8),4,0,1,0,0,13,3)

		if state=="pause" then
			print("Pause",min(p.t*2,37),35,7)
			upd_buttons()
		end

		--Resume
		if (keyp(44) and p.t>1) or (my>52 and my<63 and clp1 and state=="pause") then
			state="edit"
			sfx_(17)
			poke(0x7FC3F,1,1)
		 end
	end
	--------------------------
	-- game ------------------
	--------------------------
	if state=="edit" then
	 --counters
		if stt~=120 then stt=stt+1 end
	 --easter egg
		if easter_eggs then
			ee.t = ee.t - 1
			if ee.t==0 then ee.t = R(30*60, 120*60) ee.draw = not ee.draw ee.i = R(#ee_text) end
		end
	 --W A S D
		lx, ly, lz = plr.x, plr.y, plr.z

		if key(23) then plr.z = plr.z - math.cos(plr.ty) * speed plr.x = plr.x - math.sin(plr.ty) * speed end
		if key(19) then plr.z = plr.z + math.cos(plr.ty) * speed plr.x = plr.x + math.sin(plr.ty) * speed end
		if key(1) then plr.z = plr.z - math.cos(plr.ty - pi2) * speed plr.x = plr.x - math.sin(plr.ty - pi2) * speed end
		if key(4) then plr.z = plr.z + math.cos(plr.ty - pi2) * speed plr.x = plr.x + math.sin(plr.ty - pi2) * speed end

		if plr.noclip then speed = 12 else speed = 4 end

		if key(64) then speed = speed * 2 end

		if keyp(57) or keyp(22) then plr.noclip = not plr.noclip end
		if keyp(2) then plr.godmode = not plr.godmode end
	--zoom
		if key(65) then unitic.fov=min(unitic.fov*1.2,800) else unitic.fov=max(unitic.fov/1.2,80) end
	--jump
		if plr.noclip then
			if key(48) then plr.y = plr.y + speed end
			if key(63) then plr.y = plr.y - speed end
			plr.vy=0
		else
			if plr.xy then plr.vy=-1
				if keyp(48) then plr.vy = 8 end
			end
			plr.y = plr.y + plr.vy
			plr.vy=max(plr.vy-0.5,-20)
		end

		plr.y = max(-256, plr.y)
	--palette
		for i = 0,1 do
			vbank(i)
			respal()
		end
		vbank(0)

		if f_m then darkpal(0.85) else darkpal(0.6) end
	 --camera rotation
		fmt = fmt + 1
		if keyp(26) then fmt=0 f_m = not f_m mx,my = 0,0 end
		if clp2 then fmt=0 mx,my=0,0 end

		if cl2 then f_m = true
		elseif nclp2 then f_m = false end
		if not menu.w.sl.n and not menu.o.sl.n then
			if f_m then
				poke(0x7FC3F,1,1)
			else
				poke(0x7FC3F,0,1)
			end
		end

	 	if p.t==0 and stt>2 and f_m and fmt>1 then
			if key(65) then --zoom
				plr.tx = plr.tx + my/800
				plr.ty = plr.ty + mx/800
			else
				plr.tx = plr.tx + my/80
				plr.ty = plr.ty + mx/80
			end
	 	end
		plr.ty = plr.ty%(math.pi*2)
		plr.tx = max(min(plr.tx, pi2), -pi2)
	 --update + collision
		if not plr.d then unitic.player_collision() end
	 --render
		vbank(0)
		cls(15)
		unitic.render()
		memcpy(0x8000,0x0000,240*136/2)
		vbank(1)
		memcpy(0x0000,0x8000,240*136/2)
	 --sounds
		s.t1=max(s.t1-1,0)
		if (key(23) or key(19) or key(1) or key(4)) and s.t1==0 then sfx_(1) if key(64) then s.t1=15 else s.t1=20 end end
	 --pause
		if keyp(44) and p.t==0 then vbank(0) memcpy(0x8000,0x0000,240*136/2) state="pause" ms.b = menu_options.p for i=1,3 do s.n[i]=peek(0x13FFB+i) end music(3,7,0) poke(0x7FC3F,0,1) end
		p.t=0
	 --debug
	 	local debug_text={
			"FPS:  " .. F(1000 / fr[1]).."|"..F(1000 / (fr[3]+fr[2])*2).."  Frame:"..F(fr[1]+0.5).."|"..F((fr[3]+fr[2])/2+0.5).."  ms.".." v: " .. #unitic.poly.v .. " f:" .. #unitic.poly.f,
			"walls:"..#walls.." particles:"..#unitic.p.." objects:"..#unitic.obj,
			"camera X:" .. F(plr.x) .. " Y:" .. F(plr.y) .. " Z:" .. F(plr.z),
		}
	 --top debug panel
		if keyp(49) then
			if ee.draw then
				ee.draw = false
				ee.t = R(30*60, 120*60)
				ee.i = R(#ee_text)
			else
				plr.dt=plr.dt%#debug_text+1
			end
		end
		local top_text=debug_text[plr.dt]
	 --easter egg (2)
		if ee.draw then top_text = ee_text[ee.i] end
	 --bottom debug panel
		if plr.noclip then rect(0,129,35,7,0) print("Noclip", 2, 130, 7) end
		rect(0,0,240,7,0)
		line(220,0,220,6,7)
		line(230,0,230,6,7)
		if my<7 or mx<0 or mx>239 or my>135 then ins = false end
		if menu.open then
			if menu.type==1 then
				rect(220,0,10,7,7)
				spr(501,223,1,15)
				spr(502,233,1,15)
			else
				rect(230,0,10,7,7)
				spr(500,223,1,15)
				spr(503,233,1,15)
			end
		else
			spr(500,223,1,15)
			spr(502,233,1,15)
		end

		if button(231,0,9,7) then
			top_text = "Objects editor"
			if clp1 then
				if not menu.open then menu.open = true menu.type = 2
				elseif menu.open and menu.type==1 then menu.type = 2
				elseif menu.open and menu.type==2 then menu.open = false
				end
			end
		end
		
		if button(221,0,9,7) then
			cid=1
			top_text = "walls and floor editor"
			if clp1 then
				if not menu.open then menu.open = true menu.type = 1
				elseif menu.open and menu.type==2 then menu.type = 1
				elseif menu.open and menu.type==1 then menu.open = false
				end
			end
		end
		--xyz pointer
		if x_p.type ~=0 then
			if x_p.type<3 then rect(x_p.x,x_p.y,30,30,0) end
			xyz_pointer(x_p.x, x_p.y, (x_p.type-1)%2 + 1)
		end

		if (button(x_p.x,x_p.y,30,30) or x_p.drag) and not f_m and not menu.w.sl.n and not menu.o.sl.n then
			ins = false
			if x_p.drag then
				rectb(x_p.x,x_p.y,30,30,13)
			else
				rectb(x_p.x,x_p.y,30,30,7)
			end
			if sc1 then x_p.type = (x_p.type+1)%5 end --click
			if tm1==2 then --drag (init)
				x_p.drag = true
				x_p.mx = mx - x_p.x
				x_p.my = my - x_p.y
			elseif tm1>2 then --drag (update)
				x_p.x = mx - x_p.mx
				x_p.y = my - x_p.my

				x_p.x = clip_val(x_p.x, 0, 210)
				x_p.y = clip_val(x_p.y, 7, 106)
			else
				x_p.drag = false
			end
			top_text = "left click to change ["..x_p.type.."], drag to move"
		end
		--right menu
		if menu.open then
			-- walls menu
			if menu.type==1 then
				rect(162,7,78,68,0)
				if f_m then vbank(0) end

				if button(162,7,78,68,false) then ins = false end

				print("Walls: "..menu.w.sel.."/"..#walls,164,9,7,false,1,true)
				print("Add",220,9,4)
				if button(218,8,21,7) then
					print("Add",220,9,7)
					top_text = "Add a new wall"
					if clp1 then
						walls[#walls+1] = {0,0,0,1,3,1}
						menu.w.sel = #walls
						upd_walls()
					end
				end


				if menu.w.sel~=0 then
					if btnp(1,30,2) or btnp(2,30,2) then menu.w.sel = max(1, menu.w.sel-1) end
					if btnp(0,30,2) or btnp(3,30,2) then menu.w.sel = min(#walls, menu.w.sel+1) end

					local wall = walls[menu.w.sel]
					print("X:",164,19,11)
					print("Y:",164,27,14)
					print("Z:",164,35,9 )
					print("type:"  ,164,43,7)
					print("Normal:",164,51,7)
					print("Angle:" ,164,59,7)
					--
					local sl = menu.w.sl
					--
					local ind = {1,2,3,6}
					local min_max={{0,10},{0,2},{0,10},{1,17}}
					for i = 1,4 do
						-- rect(204,10+i*8,15,7,15)
						rectb(203,9+i*8,17,9,15)
						print_mid(wall[ind[i]],212,11+i*8,7)
						if button(204,10+i*8,15,7) then
							if clp1 then
								sl.n = true
								sl.id = i
								sl.val = wall[ind[i]]
								sl.val_2 = 0
								sl.t = 0
								mx = 0
								poke(0x7FC3F,1,1)
							end
						end
					end
					--
					if sl.n then
						if cl1 then
							sl.t = sl.t + 1
							if sl.t>2 then
								sl.val_2 = sl.val_2 + mx
								if mx ~=0 then
									upd_walls()
								end
								wall[ind[sl.id]] = sl.val + sl.val_2//30


								if wall[ind[sl.id]]>min_max[sl.id][2] then
									wall[ind[sl.id]]=min_max[sl.id][2]
									sl.val_2 = 0
									sl.val = wall[ind[sl.id]]
								elseif wall[ind[sl.id]]<min_max[sl.id][1] then
									wall[ind[sl.id]]=min_max[sl.id][1]
									sl.val_2 = 0
									sl.val = wall[ind[sl.id]]
								end
							end
						elseif not cl1 then
							sl.t = 0
							poke(0x7FC3F,0,1)
							sl.n = false
						end
					end
					--
					if f_m then
						spr(447 + wall[5],210,51,15)
						spr(431 + wall[4],210,59,15)
					else
						for vb = 0,1 do
							vbank(vb)
							spr(447 + wall[5],210,51,15)
							spr(431 + wall[4],210,59,15)
						end
					end
					--normal
					if button(210,51,5,5) then
						local text={
							"Only the front side is displayed",
							"Only the back side is displayed",
							"Both back side is displayed",
						}
						top_text = text[wall[5]]
						if clp1 then
							wall[5] = wall[5]%3 + 1
							upd_walls()
						end
					end

					--rotation
					if button(210,59,5,5) then
						local text={
							"Affects the rotation | YZ [wall]",
							"Affects the rotation | XZ [floor]",
							"Affects the rotation | XY [wall]",
						}
						top_text = text[wall[4]]
						if clp1 then
							wall[4] = wall[4]%3 + 1
							upd_walls()
						end
					end

					--delete button
					print("Delete",203,67,13)
					if button(203,67,35,5) then
						print("Delete",203,67,7)
						top_text = "Delete the current wall"
						if clp1 then
							table.remove(walls, menu.w.sel)
							menu.w.sel = menu.w.sel - 1
							upd_walls()
						end
					end

					--clone button
					print("Clone",164,67,11)
					if button(164,67,29,5) then
						print("Clone",164,67,7)
						top_text = "Clone the current wall"
						if clp1 then
							walls[#walls+1] = {wall[1],wall[2],wall[3],wall[4],wall[5],wall[6]}
							menu.w.sel = #walls
							upd_walls()
						end
					end
				else
					print([[Click "Add" to]],165,29,4)
					print([[add a wall]],172,36,4)
				end
			end
			-- objects menu --
			if menu.type==2 then
				local tab = menu.o.tab
				local objs = objects[tab]
				rect(162,7,78,75,0)
				if f_m then vbank(0) end

				if button(162,7,78,68,false) then ins = false end
				
				rectb(155+menu.o.tab*9,7,9,9,14)

				for i=1,#objects_data.names do
					spr(402+i,156+i*9,8,15)
					if button(155+i*9,7,9,9) then
						rectb(155+i*9,7,9,9,7)
						top_text = "["..i.."] "..objects_data.names[i].."s tab"
						if clp1 then menu.o.tab = i end
					end

					if keyp(27+i) then menu.o.tab = i end
				end

				if menu.o.tab <7 then
					print("Objects: "..menu.o.sel[tab].."/"..#objects[tab],164,18,7,false,1,true)

					print("Add",220,18,4)
					if button(218,17,21,7) then
						print("Add",220,18,7)
						top_text = "Add a new "..objects_data.names[tab]
						if clp1 then
							objs[#objs+1] = {48,64,48,objects_data.types[tab][1]} --X Y Z type t1
							menu.o.sel[tab] = #objs
							upd_objs()
						end
					end

					if #objs~=0 then
						if btnp(1,30,2) or btnp(2,30,2) then menu.o.sel[tab] = max(1, menu.o.sel[tab]-1) end
						if btnp(0,30,2) or btnp(3,30,2) then menu.o.sel[tab] = min(#objs, menu.o.sel[tab]+1) end
						local obj = objs[menu.o.sel[tab]] --current object
						local sl = menu.o.sl --slider
						--type
						print("type: "..obj[4],176,25,7,false,1,true)
						if f_m then
							if menu.o.magnet then --magnet button
								spr(451,164,25,15)
							else
								spr(435,164,25,15)
							end
							if tab==1 then spr(418+obj[4],226,25,15) end --change skin button
						else
							
							for vb = 0,1 do
								vbank(vb)
								if menu.o.magnet then --magnet button
									spr(451,164,25,15)
								else
									spr(435,164,25,15)
								end
								if tab==1 then spr(418+obj[4],226,25,15) end --change skin button
							end
						end
						--magnet button
						if button(164,25,6,7) then
							top_text = "Alignment of coordinates on the grid"
							if clp1 then menu.o.magnet = not menu.o.magnet end
						end
						--change skin button
						if tab==1 and button(226,25,7,7) then
							top_text = "Change the object's skin"
							if clp1 then
								obj[4] = obj[4] % 2 + 1
								upd_objs()
							end
						end
						--rotate buttons

						--X Y Z
						print("X:",164,39,11)
						print("Y:",164,47,14)
						print("Z:",164,55,9 )
						for i = 1,3 do
							rectb(198,29+i*8,27,9,15)
							print_mid(obj[i],212,31+i*8,7)
							if button(199,30+i*8,25,7) then
								if clp1 then
									sl.n = true
									sl.id = i
									sl.val = obj[i]
									sl.val_2 = 0
									sl.t = 0
									mx = 0
									poke(0x7FC3F,1,1)
								end
							end
						end
						--slider
						if sl.n then
							if cl1 then
								sl.t = sl.t + 1
								if sl.t>2 then
									if key(64) then
										sl.val_2 = sl.val_2 + mx / 30
									else
										sl.val_2 = sl.val_2 + mx
									end
									if mx ~=0 then
										upd_objs()
									end
									obj[sl.id] = sl.val + F(sl.val_2)
									if menu.o.magnet then
										local step = objects_data.m_step[tab][sl.id]
										obj[sl.id] = obj[sl.id] // step * step
									end
								end
							elseif not cl1 then
								sl.t = 0
								poke(0x7FC3F,0,1)
								sl.n = false
							end
						end
					else
						print([[Click "Add" to]],165,29+7,4)
						print([[add a object]],167,36+7,4)
					end
				end
			end

		end
		--mouse selection
			menu.w.m_sel = -1
			if (ins or cl2) then
			  local x1 = plr.x
			  local y1 = plr.y
			  local z1 = plr.z
			  
			  local x2 = -(mx - 120) * 100000 / unitic.fov
			  local y2 = -(my - 68 ) * 100000 / unitic.fov

			  if cl2 then x2,y2 = 0,0 end
			  local z2 = - 100000

			  local a1=x2
			  local b1=y2
			  local c1=z2
			  
			  local b2=b1*math.cos(-cam.tx)-c1*math.sin(-cam.tx)
			  local c2=b1*math.sin(-cam.tx)+c1*math.cos(-cam.tx)
			  local a2=a1
			  
			  local c3=c2*math.cos(cam.ty)-a2*math.sin(cam.ty)
			  local a3=c2*math.sin(cam.ty)+a2*math.cos(cam.ty)
			  local b3=b2

				x2 = a3 + plr.x
				y2 = b3 + plr.y
				z2 = c3 + plr.z
			  
				--debug

			  --only for walls, ignore objects
			  --local x3,y3,z3,angle = raycast_legacy(x1,y1,z1,x2,y2,z2,rc1,rc2,false)

			  local ray_params = {
				portals = false,
				walls = {true,true,true,true,true,true,true,true,true,true,true,true},
				floors = {true,true,true,true,true,true,true,true,true,true},
				objs = {}
			  }
			  local hit = raycast(x1,y1,z1,x2,y2,z2,9999,ray_params)
			  if hit then
				  menu.w.m_sel = hit.tile[3]
				  cid = 1
				  if sc1 then menu.w.sel = menu.w.m_sel end
			  end
		  end
		--top debug panel (2)
		print(top_text,1,1,7)
	end
	------------------
	--- end ----------
	------------------
	--cursor id
	vbank(0)
	poke4(0x07FF6,cid)
	--fps (2)
	do
		avf[t%60]=t2
		t2 = time() - t1
		fr = {0,math.huge,0}
		for i=1,#avf do
			fr[1]=fr[1]+avf[i]
			if avf[i]<fr[2] then fr[2]=avf[i] end
			if avf[i]>fr[3] then fr[3]=avf[i] end
		end
		fr[1]=fr[1]/#avf
	end
end


function BDR(scn_y) scn_y=scn_y-4
	vbank(0)
	if state=="pause" then
		vbank(1)poke(0x03FF9,0)respal()vbank(0)poke(0x03FF9,0)
		upd_buttons_bdr(scn_y, function()respal()darkpal(max(1-p.t/30,0.4)) end)
	end
	if state=="edit" then
	end
end

--config: [5,7,1][1,5,1][4,24,1][1} []

-- <TILES>
-- 000:4444444443333333434333334333333343333433433333334343334343333333
-- 001:4444444433333333433343333333333334333334333333333333333333333333
-- 002:4444444333333332433343323333333233343232333333323333333233333332
-- 003:6666666665555555656555556555555565555655655555556565556565555555
-- 004:6666666655555555655565555555555556555556555555555555555555555555
-- 005:6666666555555554655565545555555455565454555555545555555455555554
-- 006:555555555f4f4f4f54fff4ff5f4f4f4f5ff4fff45f4f4f4f54fff4ff5f4f4f4f
-- 007:555555554f4f4f4ff4fff4ff4f4f4f4ffff4fff44f4f4f4ff4fff4ff4f4f4f4f
-- 008:555555554f4f4f43f4fff4f34f4f4f43fff4fff34f4f4f43f4fff4f34f4f4f43
-- 009:555555555fffffff5fffffff5fffffff5fffffff5fffffff5fffffff5fffffbf
-- 010:55555555ffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 011:55555555fffffff5fffffff5fffffff4fffffff4fffffff4fffffff4fffffff4
-- 012:ddddddddd1111111d1111111d1111111d1111111d1111111d1111111d1111111
-- 013:dddddddd11111111111111111111111111111111111111111111111111111111
-- 014:dddddddd1111111d1111111d1111111d1111111d1111111d1111111d1111111d
-- 015:0000000010101010000000001010101000000000101010100000000010101010
-- 016:4333333343333333434333334333333343333333433333334343334343333333
-- 017:3433343333333333333333333333333333343333333333333333333333333333
-- 018:3332323233333332333333323333333232333332333323323333333233333332
-- 019:6555555565555555656555556555555565555555655555556565556565555555
-- 020:5655565555555555555555555555555555565555555555555555555555555555
-- 021:5554545455555554555555545555555454555554555545545555555455555554
-- 022:5ff4fff45f4f4f4f54fff4ff5f4f4f4f5ff4fff45f4f4f4f54fff4ff5f4f4f4f
-- 023:fff4fff44f4f4f4ff4fff4ff4f4f4f4ffff4fff44f4f4f4ff4fff4ff4f4f4f4f
-- 024:fff4fff34f4f4f43f4fff4f34f4f4f43fff4fff34f4f4f43f4fff4f34f4f4f43
-- 025:5ffffbcf5fffbcff5fffcfff5fffffff5fffffff5fffffff5fffffff5fffffff
-- 026:fffffffffffffffbffffffbcfffffbcffffffcfffffbffffffbcffffffcfffff
-- 027:fffffff4fffffff4fffffff4fffffff4fffffff4fffffff4fffffff4fffffff4
-- 028:d1111111d1111111d111111dd111111dd111111dd111111dd111111dd1111111
-- 029:1111111111111111dd111dd111d1d11d11d1d11d11d1d11d11d11dd111111111
-- 030:1111111d1111111d1111111d1111111d1111111d1111111d1111111d1111111d
-- 031:0000000010101010000000001010101000000000101010100000000010101010
-- 032:4333333343333333434333334333333343333333433333334333433343333333
-- 033:3433333333333233433333333333333333333233333333333323333333333333
-- 034:3332333233333332333333323333333232333232333333323333333233333332
-- 035:6555555565555555656555556555555565555555655555556555655565555555
-- 036:5655555555555455655555555555555555555455555555555545555555555555
-- 037:5554555455555554555555545555555454555454555555545555555455555554
-- 038:5ff4fff45f4f4f4f54fff4ff5f4f4f4f5ff4fff45f4f4f4f54fff4ff5f4f4f4f
-- 039:fff4fff44f4f4f4ff4fff4ff4f4f4f4ffff4fff44f4f4f4ff4fff4ff4f4f4f4f
-- 040:fff4fff34f4f4f43f4fff4f34f4f4f43fff4fff34f4f4f43f4fff4f34f4f4f43
-- 041:5fffffff5fffffff5fffffff5fffffff5fffffff5ffffffb5fffffbc5fffffcf
-- 042:fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb
-- 043:fffffff4fffffff4fffffff4fffffff4fffffff4fbfffff4bcfffff4cffffff4
-- 044:d1ddd11dd1d11d1dd1d11d1dd1d11d1dd1d11d1dd1ddd11dd1111111d1111111
-- 045:dd111dd111d1d11d11d1d11ddd11dddd11d1d11d11d1d11d1111111111111111
-- 046:1d111d1d1d111d1d1d111d1d1d1d1d1d1dd1dd1d1d111d1d1111111d1111111d
-- 047:0000000010101010000000001010101000000000101010100000000010101010
-- 048:4333333343333333433333334333333343343333433333334333333332222222
-- 049:3333333333333332233323333333333333333332333333333333333322222222
-- 050:3332333233333332333333323333333233233232333333323333333222222222
-- 051:6555555565555555655555556555555565565555655555556555555554444444
-- 052:5555555555555554455545555555555555555554555555555555555544444444
-- 053:5554555455555554555555545555555455455454555555545555555444444444
-- 054:5ff4fff45f4f4f4f54fff4ff5f4f4f4f5ff4fff45f4f4f4f54fff4ff33333333
-- 055:fff4fff44f4f4f4ff4fff4ff4f4f4f4ffff4fff44f4f4f4ff4fff4ff33333333
-- 056:fff4fff34f4f4f43f4fff4f34f4f4f43fff4fff34f4f4f43f4fff4f333333333
-- 057:5fffffff5fffffff5fffffff5fffffff5fffffff5fffffff5555555554444444
-- 058:fffffffcffffffffffffffffffffffffffffffffffffffff5554444444444444
-- 059:fffffff4fffffff4fffffff4fffffff4fffffff4fffffff44444444444444444
-- 060:d1111111d1111111d1111111d1111111d1111111d1111111d1111111dddddddd
-- 061:11111111111111111111111111111111111111111111111111111111dddddddd
-- 062:1111111d1111111d1111111d1111111d1111111d1111111d1111111ddddddddd
-- 063:0000000010101010000000001010101000000000101010100000000010101010
-- 064:8888888881111111811111118111111181111111811111118111111181111111
-- 065:8888888811111111111111111111111111111111111111111111111111111111
-- 066:8888888811111118111111181111111811111118111111181111111811111118
-- 067:ffffffffffaaaffffffffffffffffffffffffffffffffffaffffffffffffffff
-- 068:fffffffffffffffffffffffbffffffffffffffffaafffffffffffffffffffffa
-- 069:ffffffffffffffffbbffffffffffffffffffffffffffffffffffffffaaffffff
-- 070:6666666665555555656555556555555565555655655555556565556565555555
-- 071:6666666655555555655565555555555556555556555555555555555555555555
-- 072:6666666555555554655565545555555455565454555555545555555455555554
-- 073:4444444443333333434333334333333343333433433333334343334343333333
-- 074:4444444433333333433343333333333334333334333333333333333333333333
-- 075:4444444333333332433343323333333233343232333333323333333233333332
-- 076:6666666665671111656777776567711165671111656711776567117765671177
-- 077:6666666611111111777777771177771111177111711771177117711771177117
-- 078:6666666511117654777776541117765411117654771176547711765477117654
-- 079:0000000010101010000000001010101000000000101010100000000010101010
-- 080:8111111181111111811118888111181181111811811118118111181181111111
-- 081:1111111111111111111881188181181181811811818118118118811111111111
-- 082:1111111811111118881111188111111881111118811111188111111811111118
-- 083:ffffbbbfffffffffffffffffffffffffffffffffffffffffffffffffffaaafff
-- 084:fffffffffffffffffbbbfffffffffffffffffffffffffffabbbfffffffffffff
-- 085:ffffffffffffffffffffffffffffffffffffffffaaffffffffffffffffffffff
-- 086:6555555565555555656555556555555565555555655555556565556565555555
-- 087:5655565555555555555555555555555555565555555555555555555555555555
-- 088:5554545455555554555555545555555454555554555545545555555455555554
-- 089:4333333343333333434333334333333343333333433333334343334343333333
-- 090:3433343333333333333333333333333333343333333333333333333333333333
-- 091:3332323233333332333333323333333232333332333323323333333233333332
-- 092:6567117765671177656711776567117765671111656771116567777765671111
-- 093:7117711171177711711777777117711711177111117777117777777711111111
-- 094:1111765411117654771176547711765411117654111776547777765411117654
-- 095:0000000010101010000000001010101000000000101010100000000010101010
-- 096:8118118181181181811811818118118181118811811111118111111181111111
-- 097:8881888181118111888188111181811188818881111111111111111111111111
-- 098:8881111881181118811811188118111888811118111111181111111811111118
-- 099:fffffffffffffffffffffffffffbbbffffffffffffffffffffffffffffffffaa
-- 100:fffffffffffffffffffaaafffffffffffffffffbffffffffffffffffafffffff
-- 101:ffffffffffffffffffffffffffffffffbbffffffffffffffffffffffffffffff
-- 102:6555555565555555656555556555555565555555655555556555655565555555
-- 103:5655555555555455655555555555555555555455555555555545555555555555
-- 104:5554555455555554555555545555555454555454555555545555555455555554
-- 105:4333333343333333434333334333333343333333433333334333433343333333
-- 106:3433333333333233433333333333333333333233333333333323333333333333
-- 107:3332333233333332333333323333333232333232333333323333333233333332
-- 108:6567777765671717656717176567777765677117656771176567777765677117
-- 109:7777777717177777171777777777777711733711117337117777777733733733
-- 110:7777765477777654777776547777765473377654733776547777765471177654
-- 111:0000000010101010000000001010101000000000101010100000000010101010
-- 112:8111111181111111811111118111111181111111811111118111111188888888
-- 113:1111111111111111111111111111111111111111111111111111111188888888
-- 114:1111111811111118111111181111111811111118111111181111111888888888
-- 115:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 116:ffffffffffffffffffffffaafffffffffbbbffffffffffffffffffffffffffff
-- 117:ffffffffffffffffaffffffffffffffffffffffffbbbffffffffffffffffffff
-- 118:6555555565555555655555556555555565565555622222222311111152322222
-- 119:5555555555555554455545555555555555555554222ed2221111111122222222
-- 120:5554555455555554555555545555555455455454222222241111112322222234
-- 121:4333333343333333433333334333333343343333422222222311111132322222
-- 122:3333333333333332233323333333333333333332222ed2221111111122222222
-- 123:3332333233333332333333323333333233233232222222221111111322222232
-- 124:6567711765677777656666666555555565565555655556556555555554444444
-- 125:3373373377777777666666665555555555555554555545556555555544444444
-- 126:7117765477777654666666545555555455455454455555545555555444444444
-- 127:0000000010101010000000001010101000000000101010100000000010101010
-- 128:6666666665555555656555556555555565555655655555556565556565555555
-- 129:666666665555555565556555555555555655555655555552555555225555522f
-- 130:666666655555555465552222552222222222ffff22ffffffffffffffffffffff
-- 131:66666666655555552222555522222255ffff2222ffffff22ffffffffffffffff
-- 132:66666666555555556555655555555555565555562555555522555555f2255555
-- 133:6666666555555554655565545555555455565454555555545555555455555554
-- 134:6666666665555555656555556555555565555655655555556565556565555555
-- 135:6666666655555555655565555555555556555556555555525555552255555227
-- 136:6666666555555554655522225522222222227776227777767777777677777776
-- 137:6666666665555555222255552222225577772222777777227777777777777777
-- 138:6666666655555555655565555555555556555556255555552255555572255555
-- 139:6666666555555554655565545555555455565454555555545555555455555554
-- 140:ffffffffff888ffffffffffffffffffffffffffffffffff8ffffffffffffffff
-- 141:fffffffffffffffffffffff9ffffffffffffffff88fffffffffffffffffffff8
-- 142:ffffffffffffffff99ffffffffffffffffffffffffffffffffffffff88ffffff
-- 143:0000000010101010000000001010101000000000101010100000000010101010
-- 144:6555555565555555656555556555555565555555655555556565556565555555
-- 145:565522ff55522fff55222fff5522ffff522fffff522fffff22ffffff22ffffff
-- 146:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 147:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 148:ff225655fff22555fff22255ffff2255fffff225fffff225ffffff22ffffff22
-- 149:5554545455555554555555545555555454555554555545545555555455555554
-- 150:6555555565555555656555556555555565555555655555556565556565555555
-- 151:5655227755522777552227775522777752277777522777772277777722777777
-- 152:7777777677777776777777767777777677777776777777767777777677777776
-- 153:7777777777777777aaaaaaaaaaaabbbaaaabbbbbaabbbbbbaabbbbbbaabbbbbb
-- 154:7722565577722555aaaa2255aaaa2255aaaaa225baaaa225baaaaa22baaaaa22
-- 155:5554545455555554555555545555555454555554555545545555555455555554
-- 156:ffff999fffffffffffffffffffffffffffffffffffffffffffffffffff888fff
-- 157:fffffffffffffffff999fffffffffffffffffffffffffff8999fffffffffffff
-- 158:ffffffffffffffffffffffffffffffffffffffff88ffffffffffffffffffffff
-- 159:0000000010101010000000001010101000000000101010100000000010101010
-- 160:6555555565555555656555556555555265555552655555526555655265555552
-- 161:22ffffff22ffffff22ffffff2fffffff2fffffff2fffffff2fffffff2fffffff
-- 162:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 163:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 164:ffffff22ffffff22ffffff22fffffff2fffffff2fffffff2fffffff2fffffff2
-- 165:5554555455555554555555542555555424555454255555542555555425555554
-- 166:6555555565555555656555556555555265555552655555526555655265555552
-- 167:2277777722777777227777772777777727777777277777772777777727777777
-- 168:7777777677777766777776767777677677776776777767767777767677777766
-- 169:baabbbbbbbaabbbabbbaaaaabbbbaaaabbbbbaaabbbbbaaabbabbbaabaaabbbb
-- 170:aaaaaa22aaaaaa22aaaaaa22aaaaaaa2aaaaaaa2aaaaaaa2aaaaaaa2baaaaaa2
-- 171:5554555455555554555555542555555424555454255555542555555425555554
-- 172:fffffffffffffffffffffffffff999ffffffffffffffffffffffffffffffff88
-- 173:fffffffffffffffffff888fffffffffffffffff9ffffffffffffffff8fffffff
-- 174:ffffffffffffffffffffffffffffffff99ffffffffffffffffffffffffffffff
-- 175:0000000010101010000000001010101000000000101010100000000010101010
-- 176:6555555265555552655555526555555265565555655555556555555554444444
-- 177:2fffffff2fffffff2fffffff2fffffff22ffffff22ffffff22ffffff422fffff
-- 178:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 179:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 180:fffffff2fffffff2fffffff2fffffff2ffffff22ffffff22ffffff22fffff224
-- 181:2554555425555554255555542555555455455454555555545555555444444444
-- 182:6555555265555552655555526555555265565555655555556555555554444444
-- 183:2777777727777777277777772777777722777777227777772277777742277777
-- 184:7777777677777776777777767777777677777776777777767777777677777776
-- 185:bbaaabbbbbbaaaaaabbbaaaaaabbbaaaabbbaaaabbbaaaaabbaaaaaabaaaaaaa
-- 186:baaaaaa2aaaaaaa2aaaaaaa2aaaaaaa2aaaaaa22aaaaaa22aaaaaa22aaaaa224
-- 187:2554555425555554255555542555555455455454555555545555555444444444
-- 188:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 189:ffffffffffffffffffffff88fffffffff999ffffffffffffffffffffffffffff
-- 190:ffffffffffffffff8ffffffffffffffffffffffff999ffffffffffffffffffff
-- 191:0000000010101010000000001010101000000000101010100000000010101010
-- 192:555555555ccccccc5bbbbbbb5aaaaaaa5ccccccc5bbbbbbb5aaaaaaa5ccccccc
-- 193:55555555ccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaacccccccc
-- 194:55555555ccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaacccccccc
-- 195:55555555ccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaacccccccc
-- 196:55555555ccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaacccccccc
-- 197:55555555ccccccc4bbbbbbb4aaaaaaa4ccccccc4bbbbbbb4aaaaaaa4ccccccc4
-- 198:2b2444442b2433332b2433332b2433332b2433332b2433332b2433332b243333
-- 199:4444444433333333333333333333333333333333333333333333333333333333
-- 200:444442b2333342b2333342b2333342b2333342b2333342b2333342b2333342b2
-- 201:2b2222222b222222233333332355555523555555235555552355555523555555
-- 202:2222222222222222333333335555555555555555555555555555555555555555
-- 203:222222b2222222b2333333325555553255555532555555325555553255555532
-- 204:4444444343333332433433324333323243433332433323324333333232222222
-- 205:4444444343333332433433324333323243433332433323324333333232222222
-- 206:4444444343333332433433324333323243433332433323324333333232222222
-- 207:0000000010101010000000001010101000000000101010100000000010101010
-- 208:5bbbbbbb5aaaaaaa5ccccccc5bbbbbbb5aaaaaaa5ccccccc5bbbbbbb5aaaaaaa
-- 209:bbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaa
-- 210:bbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaa
-- 211:bbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaa
-- 212:bbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaa
-- 213:bbbbbbb4aaaaaaa4ccccccc4bbbbbbb4aaaaaaa4ccccccc4bbbbbbb4aaaaaaa4
-- 214:2b2433332b2433332b2433332b2433332b2433332b2433332b2433332b243333
-- 215:3333333333333333333333333333333333333333333333333333333333333333
-- 216:333342b2333342b2333342b2333342b2333342b2333342b2333342b2333342b2
-- 217:2355555523555555235555552355555523555555235555552355555523555555
-- 218:5555555555555555555555555555555555555555555555555555555555555555
-- 219:5555553255555532555555325555553255555532555555325555553255555532
-- 220:4444444343333332433433324333323243433332433323324333333232222222
-- 221:4444444343333332433433324333323243433332433323324333333232222222
-- 222:4444444343333332433433324333323243433332433323324333333232222222
-- 223:0000000010101010000000001010101000000000101010100000000010101010
-- 224:5ccccccc5bbbbbbb5aaaaaaa5ccccccc5bbbbbbb5aaaaaaa5ccccccc5bbbbbbb
-- 225:ccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbb
-- 226:ccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbb
-- 227:ccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbb
-- 228:ccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbb
-- 229:ccccccc4bbbbbbb4aaaaaaa4ccccccc4bbbbbbb4aaaaaaa4ccccccc4bbbbbbb4
-- 230:2b2433332b2433332b2433332b2444442b22222233333333333333332b222222
-- 231:3333333333333333333333334444444422222222333333333333333322222222
-- 232:333342b2333342b2333342b2444442b2222222b23333333333333333222222b2
-- 233:2355555523555555235555552355555523555555335555553355555523555555
-- 234:5555555555555555555555555555555555555555555555555555555555555555
-- 235:5555553255555532555555325555553255555532555555325555553255555532
-- 236:4444444343333332433433324333323243433332433323324333333232222222
-- 237:4444444343333332433433324333323243433332433323324333333232222222
-- 238:4444444343333332433433324333323243433332433323324333333232222222
-- 239:0000000010101010000000001010101000000000101010100000000010101010
-- 240:5aaaaaaa5ccccccc5bbbbbbb5aaaaaaa5ccccccc5bbbbbbb5555555554444444
-- 241:aaaaaaaaccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbb5555555544444444
-- 242:aaaaaaaaccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbb5555555544444444
-- 243:aaaaaaaaccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbb4444444444444444
-- 244:aaaaaaaaccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbb4444444444444444
-- 245:aaaaaaa4ccccccc4bbbbbbb4aaaaaaa4ccccccc4bbbbbbb44444444444444444
-- 246:2b2222222b2222222b2222222b2222222b2222222b2222222b2222222b222222
-- 247:2222222222222222222222222222222222222222222222222222222222222222
-- 248:222222b2222222b2222222b2222222b2222222b2222222b2222222b2222222b2
-- 249:2355555523555555235555552355555523555555235555552355555523555555
-- 250:5555555555555555555555555555555555555555555555555555555555555555
-- 251:5555553255555532555555325555553255555532555555325555553255555532
-- 252:0000000010101010000000001010101000000000101010100000000010101010
-- 253:0000000010101010000000001010101000000000101010100000000010101010
-- 254:0000000010101010000000001010101000000000101010100000000010101010
-- 255:0000000010101010000000001010101000000000101010100000000010101010
-- </TILES>

-- <TILES1>
-- 114:0000000000000000000000000000000000000044000044440044444444444444
-- 115:0000004400004444004444444444444444444444444444444444444444444444
-- 116:4400000044440000444444004444444444444444444444444444444444444444
-- 117:0000000000000000000000000000000044000000444400004444440044444444
-- 128:0000000000000000000000000000000000000044000000440000000000000000
-- 129:0000004400004444004444444444444444444444444444444444444400444444
-- 130:4444444444444444444444444444444444444400444400004400000000000000
-- 131:4444440044440000440000000000000000000000000000000000000000000000
-- 132:0044444400004444000000440000000000000000000000000000000000000000
-- 133:4444444444444444444444444444444400444444000044440000004400000000
-- 134:4400000044440000444444004444444444444444444444444444444444444444
-- 135:0000000000000000000000000000000044000000444400004444440044444444
-- 144:3300000033330000333333003333333333333333333333333333333333333333
-- 145:0000440000000000000000000000000033000000333300003333330033333333
-- 150:0044444400004444000000440000000000000000000000000000000000000000
-- 151:4444443344443333443333333333333333333333333333333333333333333333
-- 160:3333333333333333333333333333333333333333333333333333333333333333
-- 161:3333333333333333333333333333333333333333333333333333333333333333
-- 162:3300000033330000333333003333333333333333333333333333333333333333
-- 163:0000000000000000000000000000000033000000333300003333330033333333
-- 167:3333333333333333333333333333333333333333333333333333333333333333
-- 176:3333333333333333333333333333333333333333333333333333333333333333
-- 177:3333333333333333333333333333333333333333333333333333333333333333
-- 178:3333333333333333333333333333333333333333333333333333333333333333
-- 179:3333333333333333333333333333333333333333333333333333333333333333
-- 183:3333333333333333333333333333333333333333333333333333333333333333
-- 192:3333333333333333333333333333333333333333333333333333333333333333
-- 193:3333333333333333333333333333333333333333333333333333333333333333
-- 194:3333333333333333333333333333333333333333333333333333333333333333
-- 195:3333333333333333333333333333333333333333333333333333333333333333
-- 199:3333333333333333333333333333333333333333333333333333333333333333
-- 208:3333333333333333333333333333333333333333333333333333333333333333
-- 209:3333333333333333333333333333333333333333333333333333333333333333
-- 210:3333333333333333333333333333333333333333333333333333333333333333
-- 211:3333333333333333333333333333333333333333333333333333333333333333
-- 214:0000000000000000000000000000000000000000000000330000333300333333
-- 215:3333333333333333333333333333333333333333333333333333333333333333
-- 224:3333333300333333000033330000003300000000000000000000000000000000
-- 225:3333333333333333333333333333333333333333003333330000333300000033
-- 226:3333333333333333333333333333333333333333333333333333333333333333
-- 227:3333333333333333333333333333333333333333333333333333333333333333
-- 228:0000000000000000000000000000000000000000000000330000333300333333
-- 229:0000000000000033000033330033333333333333333333333333333333333333
-- 230:3333333333333333333333333333333333333333333333003333000033000000
-- 231:3333333333333300333300003300000000000000000000000000000000000000
-- 242:3333333300333333000033330000003300000000000000000000000000000000
-- 243:3333333333333333333333333333333333333333003333330000333300000033
-- 244:0033333300333333003333330033333300333333003333000033000000000000
-- 245:3333333333333300333300003300000000000000000000000000000000000000
-- </TILES1>

-- <SPRITES>
-- 000:0000000000000000000000000000000000777777007777770077711100777000
-- 001:0000000000000000000000000000000077770000777770001177770000177700
-- 002:0000000000000000000000000000000000777777077777777777111177710000
-- 003:0000000000000000000000000000000077000077777000777777007717770077
-- 004:0000000000000000000000000000000077777777777777777711117777000017
-- 005:0000000000000000000000000000000000007777700077777700111177000000
-- 006:0000000000000000000000000000000077777777777777777777111177770000
-- 007:0000000000000000000000000000000000007777000777770077777100777710
-- 008:0000000000000000000000000000000077770000777770001777770001777700
-- 009:0000000000000000000000000000000077770000777700007777000077770000
-- 011:0aa000000aa0000b0aa000bb0aa00bbb0aa00bbb0aa00bbb0aab00bb0aabb00b
-- 012:00000000bb000000bbb00000bbbb0000bbbb0000bbbb0000bbb00000bb000000
-- 013:0000000010101010000000001010101000000000101010100000000010101010
-- 014:0000000010101010000000001010101000000000101010100000000010101010
-- 015:999997b7988897b7988897b7988897b7999997e7222227e7222227e7222227e7
-- 016:0077700000767000006760000076767600676767006661110066600000666000
-- 017:0007770000067600006767007676710067671000111100000000000000000000
-- 018:7770000067600000767000006760000076700000666000006660000066660000
-- 019:0777007706760067076700760676006707670076066600660666006666660066
-- 020:7700000767000007760000766767676776767676661111666600006666000016
-- 021:7700000067000000760000006100000010000000600000006000000066000000
-- 022:7777000067670000767600006767000076760000666600006666000066660000
-- 023:0077770000676700007676000067676700767676006666110066660000666600
-- 024:0077770000676700007676006767670076767600116666000066660000666600
-- 025:7777000067670000767600006767000076760000666600006666000066660000
-- 027:0aabbb000aabbbb00aabbbbb0aabbbbb0aabbbbb0aabb0bb0aab000b0aabb000
-- 028:0000000000000000000000000000000000000000b0000000bb000000bbbbb000
-- 029:0000000010101010000000001010101000000000101010100000000010101010
-- 030:0000000010101010000000001010101000000000101010100000000010101010
-- 031:8822777788227777ffff7777f711711771ff77771fff77771fff77771fffffff
-- 032:0066600000666000001110000000000000000000000000000000000000000000
-- 034:1666666601666666001111110000000000000000000000000000000000000000
-- 035:6661006666100066110000110600060606000606060006060666016101110010
-- 036:6600000666000006110000010600000606000061060000660666001601110001
-- 037:6600000066000000110000000000606060066010106160606016606010011010
-- 038:6666000066660000111100000600666066606160161060600660666001101110
-- 039:0066660000666600001111006600000061600000601000006000000010000000
-- 040:0066660000666600001111000000000000000000000000000000000000000000
-- 041:6666666666666666111111110000000000000000000000000000000000000000
-- 042:6666000066660000111100000000000000000000000000000000000000000000
-- 043:0aabbb000aa0bbb00aa00bbb0aa0bbb00aabbb000aabb0000aab00000aa00000
-- 044:0bbbb00000000000000000000000000000000000000000000000000000000000
-- 045:0000000010101010000000001010101000000000101010100000000010101010
-- 046:0000000010101010000000001010101000000000101010100000000010101010
-- 047:0000000010101010000000001010101000000000101010100000000010101010
-- 048:4444444343333332433433324333323243433332433323324333333232222222
-- 049:4444444343333332433433324333323243433332433323324333333232222222
-- 050:4444444343333332433433324333323243433332433323324333333232222222
-- 051:7777777676666665766766657666656576766665766656657666666565555555
-- 052:7777777676666665766766657666656576766665766656657666666565555555
-- 053:7777777676666665766766657666656576766665766656657666666565555555
-- 054:555555555f4f4f4f54fff4ff5f4f4f4f5ff4fff45f4f4f4f54fff4ff5f4f4f4f
-- 055:555555554f4f4f4ff4fff4ff4f4f4f4ffff4fff44f4f4f4ff4fff4ff4f4f4f4f
-- 056:555555554f4f4f43f4fff4f34f4f4f43fff4fff34f4f4f43f4fff4f34f4f4f43
-- 057:555555555fffffff5fffffff5fffffff5fffffff5fffffff5fffffbf5ffffbcf
-- 058:55555555ffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 059:55555555fffffff5fffffff5fffffff4fffffff4fffffff4ffbffff4fbcffff4
-- 060:ffffffffff888ffffffffffffffffffffffffffffffffff8ffffffffffffffff
-- 061:fffffffffffffffffffffff9ffffffffffffffff88fffffffffffffffffffff8
-- 062:ffffffffffffffff99ffffffffffffffffffffffffffffffffffffff88ffffff
-- 063:0000000010101010000000001010101000000000101010100000000010101010
-- 064:4444444343333332433433324333323243433332433323324333333232222222
-- 065:4444444343333332433433324333323243433332433323324333333232222222
-- 066:4444444343333332433433324333323243433332433323324333333232222222
-- 067:7777777676666665766766657666656576766665766656657666666565555555
-- 068:7777777676666665766766657666656576766665766656657666666565555555
-- 069:7777777676666665766766657666656576766665766656657666666565555555
-- 070:5ff4fff45f4f4f4f54fff4ff5f4f4f4f5ff4fff45f4f4f4f54fff4ff5f4f4f4f
-- 071:fff4fff44f4f4f4ff4fff4ff4f4f4f4ffff4fff44f4f4f4ff4fff4ff4f4f4f4f
-- 072:fff4fff34f4f4f43f4fff4f34f4f4f43fff4fff34f4f4f43f4fff4f34f4f4f43
-- 073:5fffbcff5fffcfff5fffffff5fffffff5fffffff5fffffff5fffffff5fffffff
-- 074:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffbfffffff
-- 075:bcfffff4cffffff4fffffff4fffffff4fffffff4fffffff4fffffff4ffbffff4
-- 076:ffff999fffffffffffffffffffffffffffffffffffffffffffffffffff888fff
-- 077:fffffffffffffffff999fffffffffffffffffffffffffff8999fffffffffffff
-- 078:ffffffffffffffffffffffffffffffffffffffff88ffffffffffffffffffffff
-- 079:0000000010101010000000001010101000000000101010100000000010101010
-- 080:4444444343333332433433324333323243433332433323324333333232222222
-- 081:4444444343333332433433324333323243433332433323324333333232222222
-- 082:4444444343333332433433324333323243433332433323324333333232222222
-- 083:7777777676666665766766657666656576766665766656657666666565555555
-- 084:7777777676666665766766657666656576766665766656657666666565555555
-- 085:7777777676666665766766657666656576766665766656657666666565555555
-- 086:5ff4fff45f4f4f4f54fff4ff5f4f4f4f5ff4fff45f4f4f4f54fff4ff53333333
-- 087:fff4fff44f4f4f4ff4fff4ff4f4f4f4ffff4fff44f4f4f4ff4fff4ff33333333
-- 088:fff4fff34f4f4f43f4fff4f34f4f4f43fff4fff34f4f4f43f4fff4f333333333
-- 089:5ffffffb5ffffffc5fffffff5fffffff5fffffff5fffffff5fffffff54444444
-- 090:cffffffffffffffffffffffbfffffffcffffffffffffffffffffffff44444444
-- 091:fbcffff4bcfffff4cffffff4fffffff4fffffff4fffffff4fffffff444444444
-- 092:fffffffffffffffffffffffffff999ffffffffffffffffffffffffffffffff88
-- 093:fffffffffffffffffff888fffffffffffffffff9ffffffffffffffff8fffffff
-- 094:ffffffffffffffffffffffffffffffff99ffffffffffffffffffffffffffffff
-- 095:0000000010101010000000001010101000000000101010100000000010101010
-- 096:ddddddddd1111111d1111111d1111111d1111111d1111111d111111dd111111d
-- 097:dddddddd1111111111111111111111111111111111111111dd111dd111d1d11d
-- 098:dddddddd1111111d1111111d1111111d1111111d1111111d1111111d1111111d
-- 099:8888888881111111811111118111111181111111811111118111118881111181
-- 100:8888888811111111111111111111111111111111111111118118881818181811
-- 101:8888888811111118111111181111111811111118111111188811111881111118
-- 102:4444444343333332433433324333323243433332433323324333333232222222
-- 103:4444444343333332431111124122122112221222122212221232123212221222
-- 104:4444444343333332433433324333323213433332133323321333333212222222
-- 105:7777777676666665766766657666656576766665766656657666666565555555
-- 106:7777777676666665761111157122122112221222122212221232123212221222
-- 107:7777777676666665766766657666656516766665166656651666666515555555
-- 108:0000ffff0000ffff0000ffff0000ffffffff0000ffff0000ffff0000ffff0000
-- 109:0000ffff0000ffff0000ffff0000ffffffff0000ffff0000ffff0000ffff0000
-- 110:0000ffff0000ffff0000ffff0000ffffffff0000ffff0000ffff0000ffff0000
-- 111:0000000010101010000000001010101000000000101010100000000010101010
-- 112:d111111dd111111dd111111dd1111111d1ddd11dd1d11d1dd1d11d1dd1d11d1d
-- 113:11d1d11d11d1d11d11d11dd111111111dd111dd111d1d11d11d1d11ddd11dddd
-- 114:1111111d1111111d1111111d1111111d1d111d1d1d111d1d1d1d1d1d1dd1dd1d
-- 115:8111118181111181811111818111111181118118811181188111811881118118
-- 116:1818181118181811181888111111111118881888181118111888188811181811
-- 117:8111111881111118811111181111111818811118181811181818111818181118
-- 118:4444444343333332433433324333323243433332433323324333333232222222
-- 119:122212221222122212221222122212221232123212221222122ba222111aa111
-- 120:1444444313333332133433321333323213433332133323321333333212222222
-- 121:7777777676666665766766657666656576766665766656657666666565555555
-- 122:122212221222122212221222122212221232123212221222122ba222111aa111
-- 123:1777777616666665166766651666656516766665166656651666666515555555
-- 124:0000000010101010000000001010101000000000101010100000000010101010
-- 125:0000000010101010000000001010101000000000101010100000000010101010
-- 126:0000000010101010000000001010101000000000101010100000000010101010
-- 127:0000000010101010000000001010101000000000101010100000000010101010
-- 128:d1ddd11dd1111111d1111111d1111111d1111111d1111111d1111111dddddddd
-- 129:11d1d11d111111111111111111111111111111111111111111111111dddddddd
-- 130:1d111d1d1111111d1111111d1111111d1111111d1111111d1111111ddddddddd
-- 131:8111188181111111811111118111111181111111811111118111111188888888
-- 132:1888188811111111111111111111111111111111111111111111111188888888
-- 133:1881111811111118111111181111111811111118111111181111111888888888
-- 134:4444444343333332433433324333323243433332433323324333333232222222
-- 135:1222222212223222123222321222222212211222412112214311111232222222
-- 136:1444444313333332133433321333323213433332433323324333333232222222
-- 137:7777777676666665766766657666656576766665766656657666666565555555
-- 138:1222222212223222123222321222222212211222712112217611111565555555
-- 139:1777777616666665166766651666656516766665766656657666666565555555
-- 140:0000000010101010000000001010101000000000101010100000000010101010
-- 141:0000000010101010000000001010101000000000101010100000000010101010
-- 142:0000000010101010000000001010101000000000101010100000000010101010
-- 143:0000000010101010000000001010101000000000101010100000000010101010
-- 144:00000fff0a0a0fff0a0a0fff00a00fff0a0a0fff0a0a0fff00000fffffffffff
-- 145:00000fff0d0d0fff0d0d0fff0ddd0fff000d0fff0ddd0fff00000fffffffffff
-- 146:00000fff08880fff00080fff00800fff08000fff08880fff00000fffffffffff
-- 147:6646466f6444446f44bbb44f64b4b46f44bbb44f6444446f6646466fffffffff
-- 148:2222222f2333332f2333332f2222222f7fffffcf7fffffcf22bbb22fffffffff
-- 149:ffffffffff9fffffff79ffffff77ffffff77ffffff77fffff2222fffffffffff
-- 150:9999999f9889889f9899989f9998999f9899989f9889889f9999999fffffffff
-- 151:fff7ffffff777fffff787fffff777fffff777ffff2f7f2fff2fff2ffffffffff
-- 152:3333333f3aaaaa3f3a0a0a3f3aa0aa3f3a0a0a3f3aaaaa3f3333333fffffffff
-- 153:aaaaaaaffbfbfbffbfbfbfbffbfbfbffbfbfbfbffbfbfbffaaaaaaafffffffff
-- 154:2222222ff1b1b1fff1b1b1fff1b1b1fff1b1b1fff1b1b1ff2222222fffffffff
-- 155:0000000010101010000000001010101000000000101010100000000010101010
-- 156:0000000010101010000000001010101000000000101010100000000010101010
-- 157:0000000010101010000000001010101000000000101010100000000010101010
-- 158:0000000010101010000000001010101000000000101010100000000010101010
-- 159:0000000010101010000000001010101000000000101010100000000010101010
-- 160:a0a00000a0a000000a000000a0a00000a0a00000000000000000000000000000
-- 161:d0d00000d0d00000ddd0000000d00000ddd00000000000000000000000000000
-- 162:8880000000800000080000008000000088800000000000000000000000000000
-- 163:77f7f77f7fffff7fffbbbfff7fbfbf7fffbbbfff7fffff7f77f7f77fffffffff
-- 164:77f7f77f7fffff7fff9f9fff7f999f7ffff9ffff7fffff7f77f7f77fffffffff
-- 165:0000000010101010000000001010101000000000101010100000000010101010
-- 166:0000000010101010000000001010101000000000101010100000000010101010
-- 167:0000000010101010000000001010101000000000101010100000000010101010
-- 168:0000000010101010000000001010101000000000101010100000000010101010
-- 169:5555555556666665566666655666666556666665566666545666654455555444
-- 170:4555555445666654456666544566665444555544444444444444444444444444
-- 171:5555555556666665566666655666666556666665456666654456666544455555
-- 172:2222222223333333233333332332222223321111233211112332111123321111
-- 173:2222222233333333333333332222222211111111111111111111111111111111
-- 174:2222222233333332333333322222233211112332111123321111233211112332
-- 175:0000000010101010000000001010101000000000101010100000000010101010
-- 176:78888fffd0008fffdfff8fffdfff8fffdddd7fff00000fffffffffffffffffff
-- 177:7aaaafff8000afff8fffafff8fffafff88887fff00000fffffffffffffffffff
-- 178:7ddddfffa000dfffafffdfffafffdfffaaaa7fff00000fffffffffffffffffff
-- 179:22ff22ff00ff00ff22ff22ff22ff22ff222222ff022220fff0000fffffffffff
-- 180:ff777ffff7fff7ff7ffff7ff7fff777f7ffff7fff7ffffffff777fffffffffff
-- 181:0000000010101010000000001010101000000000101010100000000010101010
-- 182:0000000010101010000000001010101000000000101010100000000010101010
-- 183:0000000010101010000000001010101000000000101010100000000010101010
-- 184:0000000010101010000000001010101000000000101010100000000010101010
-- 185:4444444455554444566654495666544956665449566654445555444444444444
-- 186:4994499498899889887888888788888888888888988888894988889444988944
-- 187:4444444444445555944566659445666594456665444566654444555544444444
-- 188:2332111123321111233211112332111123321111233211112332111123321111
-- 189:1111111111111111111111111111111111111111111111111111111111111111
-- 190:1111233211112332111123321111233211112332111123321111233211112332
-- 191:0000000010101010000000001010101000000000101010100000000010101010
-- 192:f1111fff70111fff77011fff77701fff77770fff0000ffffffffffffffffffff
-- 193:f7777fff10777fff11077fff11107fff11110fff0000ffffffffffffffffffff
-- 194:f7777fff70777fff77077fff77707fff77770fff0000ffffffffffffffffffff
-- 195:77ff77ff00ff00ff77ff77ff77ff77ff777777ff077770fff0000fffffffffff
-- 196:ff777ffff7fff7fff7ffff7f777fff7ff7ffff7ffffff7ffff777fffffffffff
-- 197:0000000010101010000000001010101000000000101010100000000010101010
-- 198:0000000010101010000000001010101000000000101010100000000010101010
-- 199:0000000010101010000000001010101000000000101010100000000010101010
-- 200:0000000010101010000000001010101000000000101010100000000010101010
-- 201:5555544456666544566666545666666556666665566666655666666555555555
-- 202:4449944444444444444444444455554445666654456666544566665445555554
-- 203:4445555544566665456666655666666556666665566666655666666555555555
-- 204:2332111123321111233211112332111123322222233333332333333322222222
-- 205:1111111111111111111111111111111122222222333333333333333322222222
-- 206:1111233211112332111123321111233222222332333333323333333222222222
-- 207:0000000010101010000000001010101000000000101010100000000010101010
-- 208:ffffffffaaaaaaaafcfcfcfcbfbfbfbffcfcfcfcbfbfbfbffcfcfcfcbfbfbfbf
-- 209:ffffffffaaaaaaaafcfcfcfcbfbfbfbffcfcfcfcbfbfbfbffcfcfcfcbfbfbfbf
-- 210:2222222229999999298888892988888929888889298889992988898829999988
-- 211:2222222099999920888889208888892088888920998889208988892089999920
-- 212:333333333aaaaaaa3a1aaaaa3aa1aaaa3aaa1aaa3aaaa1a13aaaaa1a3aaaa1a1
-- 213:33333000aaaa3000aa1a3000a1aa30001aaa3000aaaa3000aaaa3000aaaa3000
-- 214:333333333ddddddd3ddddddd3ddddddd3ddddddd3ddddddd3d1ddddd3dd1ddd1
-- 215:33333000dddd3000dd1d3000d1dd3000d1dd30001ddd30001ddd3000dddd3000
-- 216:0000000010101010000000001010101000000000101010100000000010101010
-- 217:5555555556666665566666655666666556666665566666545666654455555444
-- 218:4555555445666654456666544566665444555544444444444444444444aaaa44
-- 219:5555555556666665566666655666666556666665456666654456666544455555
-- 220:2222222223333333234343432333333324343434233333332343434322222222
-- 221:2222222233333333434343433333333334343434333333334343434322222222
-- 222:2222222233333332434343423333333234343432333333324343434222222222
-- 223:0000000010101010000000001010101000000000101010100000000010101010
-- 224:fcfcfcfcbfbfbfbffcfcfcfcbfbfbfbffcfcfcfcbfbfbfbfaaaaaaaaffffffff
-- 225:fcfcfcfcbfbfbfbffcfcfcfcbfbfbfbffcfcfcfcbfbfbfbfaaaaaaaaffffffff
-- 226:298889882988899929888889298888892988888929999999222222227bbbb707
-- 227:89888920998889208888892088888920888889209999992022222226eeee7006
-- 228:3aaa1aaa3aa1aaaa3a1aaaaa3aaaaaaa33333333222222220000000000000000
-- 229:1aaa3000a1aa3000aa1a3000aaaa300033333000222220000000000000000000
-- 230:3ddd1d1d3ddd1d1d3dddd1dd3ddddddd33333333222222220000000000000000
-- 231:dddd3000dddd3000dddd3000dddd300033333000222220000000000000000000
-- 232:0000000010101010000000001010101000000000101010100000000010101010
-- 233:44444444555544445666544a5666544a5666544a5666544a5555444444444444
-- 234:aabbbbaaabbbbbbabbbaabbbbba44abbbba44abbbbbaabbbabbbbbbaaabbbbaa
-- 235:4444444444445555a4456665a4456665a4456665a44566654444555544444444
-- 236:7fffffff7fffffff7ffffcff7fffcfff7ffcffff7fffffff7fffffff7ffffffc
-- 237:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcfff
-- 238:fffffffcfffffffcfffffffcfffffffcfffcfffcffcffffcfffffffcfffffffc
-- 239:0000000010101010000000001010101000000000101010100000000010101010
-- 240:bb1b1111b11b111111111111bb11111111111111111111111111111111111111
-- 241:11111111111111111111111111111dd111111111111d11d1111d1dd111111111
-- 242:1113111111131111111111113311133111111111111311111113111111111111
-- 243:001122330011223344556677445566778899aabb8899aabbccddeeffccddeeff
-- 244:f7777fff7f777fff77f77fff777f7fff7777ffffffffffffffffffffffffffff
-- 245:f0000fff0f000fff00f00fff000f0fff0000ffffffffffffffffffffffffffff
-- 246:77f77fff7fff7fffff7fffff7fff7fff77f77fffffffffffffffffffffffffff
-- 247:00f00fff0fff0fffff0fffff0fff0fff00f00fffffffffffffffffffffffffff
-- 248:0000000010101010000000001010101000000000101010100000000010101010
-- 249:5555544456666544566666545666666556666665566666655666666555555555
-- 250:44aaaa4444444444444444444455554445666654456666544566665445555554
-- 251:4445555544566665456666655666666556666665566666655666666555555555
-- 252:7fffffcf7ffffcff7fffcfff7fffffff22222222233333332333333322222222
-- 253:fffcffffffcfffffffffffffffffffff2222222234bbbb4334bccb4322222222
-- 254:fffffffcfffffffcfffffffcfffffffc22222222333333323333333222222222
-- 255:0000000010101010000000001010101000000000101010100000000010101010
-- </SPRITES>

-- <MAP>
-- 000:00502800902800d028001128005128000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- </MAP>

-- <WAVES>
-- 000:00000000ffffffff00000000ffffffff
-- 001:0123456789abcdef0123456789abcdef
-- 002:0123456789abcdeffedcba9876543210
-- 003:000000000000ffff000000000000ffff
-- </WAVES>

-- <WAVES1>
-- 000:00000000ffffffff00000000ffffffff
-- 001:0123456789abcdeffedcba9876543210
-- 002:0123456789abcdef0123456789abcdef
-- 003:000000000000ffff000000000000ffff
-- </WAVES1>

-- <SFX>
-- 000:07000700171017202720273037403740475047605760577067806780779077a087a087b097c097c0a7d0b7e0b7e0c7f0d7f0d7f0e7f0f7f0f7f0f7f0590000000000
-- 001:6f007ff08f009f00af00cf00df00ef00ef00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00100000000000
-- 002:000010102020303030404050406050706080609060a070b070c080d080e090f090f0a0f0a0f0b0f0c0f0c0f0d0f0e0f0f0f0f0f0f0f0f0f0f0f0f000280000000000
-- 003:63b0734083d093b0a350b370c3a0d350e300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f30030b000000000
-- 004:048024e044f054d0649074809450a430b430c410c400c400c400c400d400e400e400f400f400f400f400f400f400f400f400f400f400f400f400f400200000000000
-- 005:340044006410742084309450a460a470a480b490c4a0c490d480f400f400f400f400f400f400f400f400f400f400f400f400f400f400f400f400f400214000000000
-- 006:03000308131013202320233033403340435043605360537063806380739073a083a083b093c093c0a3d0b3e0b3e0c3f0d3f0d3f0e3f0f3f0f3f0f3f0c80000000003
-- 007:03002300333043605380738083809380a380b380c380d380d380e380e380f380f380f380f380f380f380f380f380f380f380f380f380f380f380f380405000000000
-- 016:030003000300b300c300d300039003900390b390c390d390f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300305000000000
-- 017:030003000300b300c300d300039003900390b390c390d39003e003e003e0b3e0c3e0d3e0f3e0f300f300f300f300f300f300f300f300f300f300f300482000000000
-- 018:010001100110f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100402000000000
-- 019:c300a300b300c300d300d300e300e300e300e300e300e300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300400000000000
-- 059:020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200300000000000
-- 060:0100110011002100210031003100410041005100510061006100710071008100810091009100a100a100b100b100c100c100d100d100e100e100f100302000000000
-- 061:010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100302000000000
-- 062:000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000302000000000
-- 063:000000000000000000000000000000000000000000000000000000000000100020003000400050006000700080009000a000b000c000d000e000f000312000000000
-- </SFX>

-- <SFX1>
-- 000:0300130033004300530063009300a300b300c300d300d300e300e300e300e300f300f300f300f300f300f300f300f300f300f300f300f300f300f300341000000000
-- 001:0200120012002200220032003200420042005200520062006200720072008200820092009200a200a200b200b200c200c200d200d200e200e200f20034b000000000
-- </SFX1>

-- <PATTERNS>
-- 000:6008f5000000000000000000a008f5000000000000000000b008f5000000000000f008f5000000000000d008f50000006008f5000000000000000000a008f5000000000000000000b008f5000000000000f008f5000000000000d008f50000006008f5000000000000000000a008f5000000000000000000b008f5000000000000f008f5000000000000d008f50000006008f5000000000000000000a008f5000000000000000000b008f5000000000000f008f5000000000000d008f5000000
-- 001:6008f9000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b008f9a008f98008f98008f9000000000000a008f9000000000000000000000000000000000000000000000000000000b008f9a008f98008f98008f9000000000000a008f90000006008f90000008008f9d008f7000000000000000000000000000000000000000000000000
-- 002:8008f9000000a008f9b008f90000008008f90000000000005008f90000006008f98008f9000000d008f70000000000006008f9000000000000000000000000000000000000000000000000000000000000000000b008f9a008f98008f98008f9000000000000a008f9000000000000000000000000000000000000000000000000000000b008f9a008f98008f98008f9000000000000a008f90000006008f90000008008f9d008f7000000000000000000000000000000000000000000000000
-- 003:8008f9000000a008f9b008f90000008008f90000000000005008f90000006008f98008f9000000d008f7000000000000e008f70000000000006008f90000000000009008f9000000000000000000d008f9e008f9e008f9d008f99008f9000000d008f70000000000005008f90000000000008008f9000000000000b008f9d008f9d008f9b008f98008f95008f9000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 004:bff8f7aff8f78ff8f7810bf7010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 005:aff9e7aff9f7000000000000000000000000000000000000000000000000000000dff9f5bff9f7aff9f78ff9f78ff9e78ff9f7aff9e7aff9f70000006ff9e76ff9f78ff9f7dff9e5dff9e5dff9f5000000000000000000000000000000dff9f58ff9e78ff9f7aff9f7bff9e7bff9e7bff9f78ff9f75ff9e75ff9f76ff9e76ff9e76ff9f78ff9e78ff9f7dff9f5dff9e5dff9f5aff9e7aff9f7000000000000000000000000000000000000000000000000000000bff9f7aff9f78ff9f78ff9f7
-- 006:dff8f36ff8f5aff8f56ff8f5fff8f36ff8f5aff8f56ff8f5dff8f36ff8f5aff8f56ff8f5fff8f36ff8f5aff8f56ff8f5dff8f36ff8f5aff8f56ff8f5fff8f36ff8f5aff8f56ff8f5dff8f36ff8f5aff8f56ff8f5fff8f36ff8f5aff8f56ff8f5dff8f36ff8f5aff8f56ff8f5fff8f36ff8f5aff8f56ff8f5dff8f36ff8f5aff8f56ff8f5fff8f36ff8f5aff8f56ff8f5dff8f36ff8f5aff8f56ff8f5fff8f36ff8f5aff8f56ff8f5dff8f36ff8f5aff8f56ff8f5fff8f36ff8f5aff8f56ff8f5
-- 007:aff9e7aff9f7000000000000000000000000000000000000000000000000000000dff9f5bff9f7aff9f78ff9f78ff9e78ff9f7000000aff9f76ff9e76ff9f70000008ff9e7dff9e5dff9e5dff9f50000000000000000000000000000000000008ff9e78ff9f7aff9f7bff9e7bff9e7bff9f78ff9f75ff9e75ff9e75ff9f76ff9f78ff9e78ff9f7dff9f56ff9f78ff9f79ff9f78ff9f76ff9f74ff9f7000000000000dff9f5eff9f5000000000000000000000000000000000000000000000000
-- 008:dff8f36ff8f5aff8f56ff8f5fff8f36ff8f5aff8f56ff8f5dff8f36ff8f5aff8f56ff8f5fff8f36ff8f5aff8f56ff8f5dff8f36ff8f5aff8f56ff8f5fff8f36ff8f5aff8f56ff8f5dff8f36ff8f5aff8f56ff8f5fff8f36ff8f5aff8f56ff8f5dff8f36ff8f5aff8f56ff8f5fff8f36ff8f5aff8f56ff8f5dff8f36ff8f5aff8f56ff8f5fff8f36ff8f5aff8f56ff8f5dff8f36ff8f5aff8f56ff8f5000000000000000000030300000000000000000000000000000000000000000000000000
-- 009:4ff9e74ff9f79ff9e79ff9f78ff9f76ff9f76ff9f74ff9f76ff9f74ff9f74ff9e74ff9f74ff9e74ff9f7dff9e5eff9f54ff9e74ff9f79ff9e79ff9f7bff9f79ff9f78ff9f76ff9f76ff9f78ff9f79ff9e79ff9f79ff9e79ff9f7bff9f7dff9f7eff9f7eff9f7dff9f7bff9f7bff9e7bff9f79ff9f7bff9f7dff9f7dff9f7bff9f79ff9f79ff9e79ff9f76ff9f74ff9f76ff9f79ff9f79ff9f78ff9e78ff9f78ff9f7aff9f7aff9e7aff9e7aff9f7000000000000000000000000000000000000
-- 010:e889e34889e54889e54889f54889e54889e54889e54889f5e889e3e889e3e889e3e889f34889e54889e54889e54889f54889e54889e54889e54889f54889e54889e54889e54889f5e889e3e889e3e889e3e889f34889e54889e54889e54889f54889e54889e54889e54889f5e889e3e889e3e889e3e889f34889e54889e54889e54889f54889e54889e54889e54889f54889e54889e54889e54889f5e889e3e889e3e889e3e889f3dff9f36ff9f5aff9f56ff9f5fff9f36ff9f5aff9f56ff9f5
-- 011:9889e59889f59889e59889f58889e58889f58889e58889f54889e54889f54889e56889f59889e59889f59889e59889f59889e59889f59889e59889f58889e58889f58889e58889f54889e54889f54889f56889f59889f59889e59889f59889e58889f58889e58889f58889e54889f54889e54889e56889e59889f59889e59889f59889e59889f59889e59889f59889f58889e58889f58889e58889f54889e54889f54889f56889f5000000000000000000000000000000000000000000000000
-- 012:000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dff9f5bff9f7aff9f78ff9f78ff9e78ff9f7aff9e7aff9f7000000000000000000000000000000000000000000000000000000bff9f7aff9f78ff9f78ff9e78ff9e78ff9f7aff9f76ff9e76ff9f78ff9e78ff9f7dff9e5dff9e5dff9f50000000000000000000000000000000000008ff9e78ff9f7aff9f7bff9e7bff9e7bff9f78ff9e78ff9f7
-- 013:5ff9e75ff9f76ff9f78ff9e78ff9e78ff9f7dff9f5dff9e5dff9f5aff9e7aff9f7000000000000000000000000000000000000000000000000dff9f5bff9f7aff9f78ff9f78ff9f7aff9e7aff9f7000000000000000000000000000000000000000000000000000000dff9f5bff9f7aff9f78ff9f78ff9e78ff9f7000000aff9f7aff9e7aff9f70000008ff9f78aa9e78aa9e78aa9f70000000000000000000000000000000000008ff9e78ff9f7aff9f7bff9e7bff9e7bff9f78ff9e78ff9f7
-- 014:000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fff9f7dff9f7bff9f7bff9f7dff9e7dff9f7000000000000000000000000000000000000000000000000000000000000fff9f7dff9f7bff9f7bff9e7bff9f7000000dff9f76ff9e76ff9f7000000bff9f7dff9e5dff9e5dff9f5000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 015:5ff9e75ff9f76ff9f78ff9e78ff9e78ff9f7dff9f56ff9f78ff9f79ff9f78ff9f76ff9f74ff9f7000000dff9f5eff9f54ff9e74ff9f79ff9e79ff9f78ff9f76ff9f76ff9f74ff9f76ff9f74ff9f74ff9e74ff9f74ff9e74ff9f7dff9f5eff9f54ff9e74ff9f79ff9e79ff9f7bff9f79ff9f78ff9f76ff9f76ff9f78ff9f79ff9e79ff9f79ff9e79ff9f7bff9f7dff9f7eff9f7eff9f7dff9e7dff9f7bff9e7bff9f79ff9f7bff9f7dff9f7dff9f7bff9f79ff9f79ff9e79ff9f76ff9f74ff9f7
-- 016:dff9f36ff9f5aff9f56ff9f5fff9f36ff9f5aff9f56aa9f5daa9f36aa9f5aaa9f56aa9f5faa9f30000004ff9f54ff9f50000000000004ff9f54ff9f5000000eff9f3eff9f3000000dff9f3dff9f30000000000004ff9f54ff9f50000000000004ff9f54ff9f5000000eff9f3eff9f3000000dff9f3dff9f30000000000004ff9f54ff9f50000000000004ff9f54ff9f5000000eff9f3eff9f3000000dff9f3dff9f30000000000004ff9f54ff9f50000000000004ff9f54ff9f5000000eff9f3
-- 017:6ff9f79ff9f79ff9f78ff9e78ff9f78ff9f7aff9f7aff9e7aff9e7aff9f76ff9f7fff9e5fff9e5fff9f5fff9f56ff9e76ff9e76ff9f76ff9f7bff9e7bff9f7aff9e7aff9f78ff9f7aff9e7aff9e7aff9e7aff9f7fff9e5fff9e5fff9f5fff9f56ff9e76ff9e76ff9f76ff9f7bff9e7bff9f7aff9e7aff9f78ff9f7aff9e7aff9e7aff9e7aff9f7fff9e5fff9e5fff9f5fff9f56ff9e76ff9e76ff9f76ff9f7bff9e7bff9f7aff9e7aff9f78ff9f7aff9e7aff9e7aff9e7aff9f7fff9e5fff9e5
-- 018:eff9f3000000dff9f3dff9f30000000000004ff9f54ff9f5000000000000000000dff9f36ff9f5aff9f56ff9f5fff9f36ff9f5aff9f56ff9f5dff9f36ff9f5aff9f56ff9f5fff9f36ff9f5aff9f56ff9f5dff9f36ff9f5aff9f56ff9f5fff9f36ff9f5aff9f56ff9f5dff9f36ff9f5aff9f56ff9f5fff9f36ff9f5aff9f56ff9f5dff9f36ff9f5aff9f56ff9f5fff9f36ff9f5aff9f56ff9f5dff9f36ff9f5aff9f56ff9f5fff9f36ff9f5aff9f56ff9f5dff9f36ff9f5aff9f56ff9f5fff9f3
-- 019:fff9e5fff9f56ff9e76ff9e76ff9f76ff9f7bff9e7bff9f7aff9e7aff9f78ff9f7aff9e7aff9e7aff9e7aff9e7aff9e7aff9e7aff9f7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 020:6ff9f5aff9f56ff9f5dff9f36ff9f5aff9f56ff9f5fff9f3dff9f36ff9f5aff9f56ff9f5fff9f36ff9f5aff9f56ff9f5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 021:aff8e3aff8e3aff8e3aff8e3aff8e3aff8e3aff8e3aff8e3aff8e3aff8e3aff8e3aff8e3aff8e3aff8e3aff8e3aff8e35ff8e55ff8e55ff8e55ff8e55ff8e55ff8e55ff8e55ff8e5cff8e3cff8e3cff8e3cff8e3dff8e3dff8e3dff8e3dff8e36008e36008e36008e36008e36008e36008e36008e36008e36008e36008e36008e36008e36008e36008e36008e36008e38008e38008e38008e38008e38008e38008e38008e38008e39008e39008e39008e39008e39008e39008e39008e39008e3
-- 022:aff8e7aff8e7aff8f70000005ff8e95ff8e95ff8f9000000dff8e7dff8e7dff8f7000000fff8e7fff8e7fff8f7000000cff8e7cff8e7cff8f7000000dff8e7dff8e7dff8f7000000aff8e7aff8e7aff8f70000009ff8e79ff8e79ff8f7000000aff8e7aff8e7aff8f70000005ff8e95ff8e95ff8f9000000dff8e7dff8e7dff8f7000000fff8e7fff8e7fff8f70000006ff8e96ff8e96ff8f9000000cff8e7cff8e7cff8f7000000fff8e7fff8e7fff8f70000009ff8e79ff8e79ff8f7000000
-- 023:aff8e5aff8e5aff8f50000005ff8e75ff8e75ff8f7000000dff8e5dff8e5dff8f5000000fff8e5fff8e5fff8f5000000cff8e5cff8e5cff8f5000000dff8e5dff8e5dff8f5000000aff8e5aff8e5aff8f50000009ff8e59ff8e59ff8f5000000aff8e5aff8e5aff8f50000005ff8e75ff8e75ff8f7000000dff8e5dff8e5dff8f5000000fff8e5fff8e5fff8f50000006ff8e76ff8e76ff8f7000000cff8e5cff8e5cff8f5000000fff8e5fff8e5fff8f50000009ff8e59ff8e59ff8f5000000
-- 026:9ff9e94999ebbaa9e9cbb9e99ff9e94999ebbaa9e9cbb9e99ff9e94999ebbaa9e9cff9e9e999e9caa9e9bbb9e9cff9e99999e94aa9ebbbb9e9cff9e99999e94aa9ebbbb9e9cff9e99999e94aa9ebbbb9e9cff9e9e999e9caa9e9bbb9e9cff9e99ff9e94999ebbaa9e9cbb9e99ff9e94999ebbaa9e9cbb9e99ff9e94999ebbaa9e9cff9e9e999e9caa9e9bbb9e9cff9e99999e94aa9ebbbb9e9cff9e99999e94aa9ebbbb9e9cff9e99999e94aa9ebbbb9e9cff9e9e999e9caa9e9bbf9e9cff9e9
-- 027:9008c59008c59008c59008c59008c59008c59008c59008c54008c74008c74008c74008c7b008c5b008c5c008c5c008c55008c55008c55008c55008c55008c55008c55008c55008c57008c57008c57008c57008c58008c58008c58008c58008c59008c59008c59008c59008c59008c59008c59008c59008c54008c74008c74008c74008c7b008c5b008c5c008c5c008c55008c55008c55008c55008c55008c55008c55008c55008c57008c57008c57008c57008c58008c58008c58008c58008c5
-- 028:9008c79008c79008c79008c79008c79008c79008c79008c74008c94008c94008c94008c9b008c7b008c7c008c7c008c75008c75008c75008c75008c75008c75008c75008c75008c77008c77008c77008c77008c78008c78008c78008c78008c79008c79008c79008c79008c79008c79008c79008c79008c74008c94008c94008c94008c9b008c7b008c7c008c7c008c75008c75008c75008c75008c75008c75008c75008c75008c77008c77008c77008c77008c78008c78008c78008c78008c7
-- 029:9008e74008e9b008e7c008e79008e74008e9b008e7c008e79008e74008e9b008e7c008e7e008e7c008e7b008e7c008e79008e74008e9b008e7c008e79008e74008e9b008e7c008e79008e74008e9b008e7c008e7e008e7c008e7b008e7c008e79008e74008e9b008e7c008e79008e74008e9b008e7c008e79008e74008e9b008e7c008e7e008e7c008e7b008e7c008e79008e74008e9b008e7c008e79008e74008e9b008e7c008e79008e74008e9b008e7c008e7e008e7c008e7b008e7c008e7
-- 030:9008e99008f9000000000000000000000000000000000000040300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 031:9008e79008f7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 032:9008e90000004008eb000000c008e9000000e008e9000000b008e9000000c008e90000009008e90000008008e90000009008e90000004008eb000000c008e9000000e008e90000005008eb000000b008e9000000e008e90000008008e90000009008e90000004008eb000000c008e9000000e008e9000000b008e9000000c008e90000009008e90000008008e90000009008e90000004008eb000000c008e9000000e008e90000005008eb000000b008e9000000e008e90000008008e9000000
-- 033:9008e70000004008e9000000c008e7000000e008e7000000b008e7000000c008e70000009008e70000008008e70000009008e70000004008e9000000c008e7000000e008e70000005008e9000000b008e7000000e008e70000008008e70000009008e70000004008e9000000c008e7000000e008e7000000b008e7000000c008e70000009008e70000008008e70000009008e70000004008e9000000c008e7000000e008e70000005008e9000000b008e7000000e008e70000008008e7000000
-- 034:9008d94008dbc008d9e008d9b008d9c008d99008d98008d99008d94008dbc008d9e008d95008dbb008d9e008d98008d99008d94008dbc008d9e008d9b008d9c008d99008d98008d99008d94008dbc008d9e008d95008dbb008d9e008d98008d99008d94008dbc008d9e008d9b008d9c008d99008d98008d99008d94008dbc008d9e008d95008dbb008d9e008d98008d99008d94008dbc008d9e008d9b008d9c008d99008d98008d99008d94008dbc008d9e008d95008dbb008d9e008d98008d9
-- 035:9008d54008d7c008d5e008d5b008d5c008d59008d58008d59008d54008d7c008d5e008d55008d7b008d5e008d58008d59008d54008d7c008d5e008d5b008d5c008d59008d58008d59008d54008d7c008d5e008d55008d7b008d5e008d58008d59008d54008d7c008d5e008d5b008d5c008d59008d58008d59008d54008d7c008d5e008d55008d7b008d5e008d58008d59008d54008d7c008d5e008d5b008d5c008d59008d58008d59008d54008d7c008d5e008d55008d7b008d5e008d58008d5
-- 036:9008d94008dbb008d9c008d99008d94008dbb008d9c008d99008d94008dbb008d9c008d9e008d9c008d9b008d9c008d99008d94008dbb008d9c008d99008d94008dbb008d9c008d99008d94008dbb008d9c008d9e008d9c008d9b008d9c008d99008d94008dbb008d9c008d99008d94008dbb008d9c008d99008d94008dbb008d9c008d9e008d9c008d9b008d9c008d99008d94008dbb008d9c008d99008d94008dbb008d9c008d99008d94008dbb008d9c008d9e008d9c008d9b008d9c008d9
-- 037:9008d5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 038:9008d7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 039:9008e99008e99008f90000009008e99008e99008f9000000c008e9c008e9c008e9c008e9c008f9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 040:9008e79008e79008f70000009008e79008e79008f70000009008e79008e79008e79008e79008f7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 041:9008d79008d79008c70000009008d79008d79008c7000000c008d7c008d7c008d7c008d7c008c7000000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 042:9008d59008d59008c50000009008d59008d59008c5000000c008d5c008d5c008d5c008d5c008c5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 043:9008c5902cc59008c59008c59008c59008c59008c59008c54008c74008c74008c74008c7b008c5b008c5c008c5c008c55008c55008c55008c55008c55008c55008c55008c55008c57008c57008c57008c57008c58008c58008c58008c58008c59008c59028c59008c59008c59008c59008c59008c59008c54008c74008c74008c74008c7b008c5b008c5c008c5c008c55008c55008c55008c55008c55008c55008c55008c55008c57008c57008c57008c57008c58008c58008c58008c58008c5
-- 044:9418d7905cc74008d94008c9c008d7c008c7e008d7e008c7b008d7b008c7c008d7c008c79008d79008c78008d78008c79008d79008c74008d94008c9c008d7c008c7e008d7e008c75008d95008c9b008d7b008c7e008d7e008c78008d78008c79008d79008c74008d94008c9c008d7c008c7e008d7e008c7b008d7b008c7c008d7c008c79008d79008c78008d78008c79008d79008c74008d94008c9c008d7c008c7e008d7e008c75008d95008c9b008d7b008c7e008d7e008c78008d78008c7
-- 045:9028c3902cc39008c39008c39008c39008c39008c39008c34008c54008c54008c54008c5b008c3b008c3c008c3c008c35008c35008c35008c35008c35008c35008c35008c35008c37008c37008c37008c37008c38008c38008c38008c38008c39008c39028c39008c39008c39008c39008c39008c39008c34008c54008c54008c54008c5b008c3b008c3c008c3c008c35008c35008c35008c35008c35008c35008c35008c35008c37008c37008c37008c37008c38008c38008c38008c38008c3
-- 046:9418d5905cc54008d74008c7c008d5c008c5e008d5e008c5b008d5b008c5c008d5c008c59008d59008c58008d58008c59008d59008c54008d74008c7c008d5c008c5e008d5e008c55008d75008c7b008d5b008c5e008d5e008c58008d58008c59008d59008c54008d74008c7c008d5c008c5e008d5e008c5b008d5b008c5c008d5c008c59008d59008c58008d58008c59008d59008c54008d74008c7c008d5c008c5e008d5e008c55008d75008c7b008d5b008c5e008d5e008c58008d58008c5
-- 047:9058e79428f74008e94008f9c008e7c008f7e008e7e008f7b008e7b008f7c008e7c008f79008e79008f78008e78008f79008e79008f74008e94008f9c008e7c008f7e008e7e008f75008e95008f9b008e7b008f7e008e7e008f78008e78008f79008e79008f74008e94008f9c008e7c008f7e008e7e008f7b008e7b008f7c008e7c008f79008e79008f78008e78008f79008e79008f74008e94008f9c008e7c008f7e008e7e008f75008e95008f9b008e7b008f7e008e7e008f78008e78008f7
-- 048:9058e59428f54008e74008f7c008e5c008f5e008e5e008f5b008e5b008f5c008e5c008f59008e59008f58008e58008f59008e59008f54008e74008f7c008e5c008f5e008e5e008f55008e75008f7b008e5b008f5e008e5e008f58008e58008f59008e59008f54008e74008f7c008e5c008f5e008e5e008f5b008e5b008f5c008e5c008f59008e59008f58008e58008f59008e59008f54008e74008f7c008e5c008f5e008e5e008f55008e75008f7b008e5b008f5e008e5e008f58008e58008f5
-- 049:9028b59028b59008b59008b59008b59008b59008b59008b54008b74008b74008b74008b7b008b5b008b5c008b5c008b55008b55008b55008b55008b55008b55008b55008b55008b57008b57008b57008b57008b58008b58008b58008b58008b59008b59028b59008b59008b59008b59008b59008b59008b54008b74008b74008b74008b7b008b5b008b5c008b5c008b55008b55008b55008b55008b55008b55008b55008b55008b57008b57008b57008b57008b58008b58008b58008b5870bb5
-- 050:9828b99028b94008bb4008bbc008b9c008b9e008b9e008b9b008b9b008b9c008b9c008b99008b99008b98008b98008b99008b99008b94008bb4008bbc008b9c008b9e008b9e008b95008bb5008bbb008b9b008b9e008b9e008b98008b98008b99008b99008b94008bb4008bbc008b9c008b9e008b9e008b9b008b9b008b9c008b9c008b99008b99008b98008b98008b99008b99008b94008bb4008bbc008b9c008b9e008b9e008b95008bb5008bbb008b9b008b9e008b9e008b98008b98008b9
-- </PATTERNS>

-- <PATTERNS1>
-- 000:9fd1140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009fd1140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009fd1140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009fd114000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 001:4ce1140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004ce1140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004ce1140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005ce114000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 002:0000000000009cf106000000000000000000cdf1060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009af106000000000000000000ccf106000000000000000000000000000000000000000000edf106000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 003:000000000000000000000000bfe106000000000000000000eda106000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bfd1060000000000000000004fa1080000000000000000000000000000000000004e9108ebd1060000000000000000000000000000000000000000000000000000000000000000004fa108000000000000000000
-- </PATTERNS1>

-- <TRACKS>
-- 000:0001800001c00001010000000000000000000000000000000000000000000000000000000000000000000000000000002e0000
-- 001:000795000795006795006795000000000000000000000000000000000000000000000000000000000000000000000000a00020
-- 002:0c6c57b97c57b97c570c7020048c571a8c570c8c57329c57b596e986aaea000000000000000000000000000000000000000060
-- 003:00000b000d2b000e2b0cbd2b00003b04c03b0000000002fc000000000000000000000000000000000000000000000000e10021
-- 007:5000006c1000842000ac2c00dc1000ec1f000540002d4000455000000000000000000000000000000000000000000000ae0060
-- </TRACKS>

-- <TRACKS1>
-- 000:180301000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040
-- </TRACKS1>

-- <SCREEN>
-- 000:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 001:f77777f7777fff7777f77fffffffff7777fff777ff77777f7ff77ff77777f77777fffffffff77777fffffffffffffffffffffffff77f77777f7ff777fffffffffffffffffffffffffffffffffff77fffff77777f77777ff777ffffffff777f77ff77fff777ffffffffffffffffffffffffffffffffffffff
-- 002:f77ffff77ff7f777fff77ffffffffffff77f77f77f77ffff7f777fffff77ffff77fffffffff77ffff7777fff7777f77f7fff777ff77f77ffff7f77ff7fffffffff77f7fff7777ffffffff77ff7f77fffff77fffffff77f77fffffffff77fff77f777ff77f77fffffffffffffffffffffffffffffffffffff
-- 003:f7777ff77ff7ff777ffffffffffffff777ff777f7f7777ff7ff77ffff77ffff77ffffffffff7777ff77ff7f7ff77f77777f77f77ffff7777ff7ff777ffffffffff77777f777ffffffffff77ff7ffffffff7777ffff77ff7777ffffff77777fffff77ff777f7fffffffffffffffffffffffffffffffffffff
-- 004:f77ffff7777ffff777f77fffffffff77ffff77ff7ffff77f7ff77ff7ff77f7ff77fffffffff77ffff77ffff7ff77f7f7f7f777fff77ffff77f7f77ff7fffffffff7f7f7fff777f77ffffff777ff77ffffffff77ff77fff77ff7ffffff77fff77ff77ff77ff7fffffffffffffffffffffffffffffffffffff
-- 005:f77ffff77ffff7777ff77fffffffff77777ff777ff7777ff7f7777ff777fff777ffffffffff77ffff77fffff7777f7f7f7ff777ff77f7777ff7ff777ffffffffff7f7f7f7777ff77fffffff7fff77fffff7777ff77fffff777fffffff77fff77f7777ff777ffffffffffffffffffffffffffffffffffffff
-- 006:ffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 007:ffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 008:fffffffffffffffffffffffffffffffffffffffffffffffffff00fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 009:fffffffffffffffffffffffffffffffffffffffffffffffffff00fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f7fffff77ff77ffffffffff777fffff777ffffffffffffffffffffff444fffff44ffff44fff
-- 010:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f7f77fff7fff7fff77f7fff7fffff7f7fffffffffffffffffffffff44ff4ff4444ff4444fff
-- 011:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f7ff77ff7fff7ff77ffffff77fff7ff77ffffffffffffffffffffff44ff4f4ff44f4ff44fff
-- 012:fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00fffffffffffffffffffffffffffffffffffffffffffffff777f7f7ff7fff7ffff7f7fffff7f7fffff7fffffffffffffffffffff44444f4ff44f4ff44fff
-- 013:fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00fffffffffffffffffffffffffffffffffffffffffffffff777f777f777f777f77ffffff77ffffff77ffffffffffffffffffffff44ff4ff4444ff4444fff
-- 014:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 015:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00fffffffffffffffffffffffff00fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 016:fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 017:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff
-- 018:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00fffffffffffffffffffffff00fffffffffffffff
-- 019:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbbffbfbbffffffffffffffffffffffffffffffffffffff777ffffffffff00fffffffffffffff
-- 020:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbbffbfbbfffffffffffffffffffffffffffffffffffff77f77ffffffffffffffffffffffffff
-- 021:fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbbbfffffffffffffffffffffffffffffffffffffffff777f7ffffffffffffffffffffffffff
-- 022:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbbffbfbbfffffffffffffffffffffffffffffffffffff77ff7ffffffffffffffffffffffffff
-- 023:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbbffbfbbffffffffffffffffffffffffffffffffffffff777fffffffffffffffffffffffffff
-- 024:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 025:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 026:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 027:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeefefeefffffffffffffffffffffffffffffffffffffff777fffffffffffffffffffffffffff
-- 028:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeefefeeffffffffffffffffffffffffffffffffffffff77f77ffffffffffffffffffffffffff
-- 029:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeeeefffffffffffffffffffffffffffffffffffffffff777f7ffffffffffffffffffffffffff
-- 030:fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeeffeeffffffffffffffffffffffffffffffffffffff77ff7ffffffffffffffffffffffffff
-- 031:fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeeffeefffffffffffffffffffffffffffffffffffffff777fffffffffffffffffffffffffff
-- 032:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 033:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 034:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 035:ffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff99999f99fffffffffffffffffffffffffffffffffffff77777ffffffffffffffffffffffffff
-- 036:ffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff99ff99fffffffffffffffffffffffffffffffffffff77fffffffffffffffffffffffffffff
-- 037:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff99ffffffffffffffffffffffffffffffffffffffffff7777fffffffffffffffffffffffffff
-- 038:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00fffffffffffffffffffffffffffffffffffffffffffffffffff00fffffffffffffffffffffffffffffffffffffffffffffff99ffff99ffffffffffffffffffffffffffffffffffffffff77ffffffffffffffffffffffffff
-- 039:fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00fffffffffffffffffffffffffffffffffffffffffffffff99999f99fffffffffffffffffffffffffffffffffffff7777fffffffffffffffffffffffffff
-- 040:fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 041:fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 042:fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00fffffffffffffffffffffffffffffff
-- 043:fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff77fffffffffffffffffffff77fffffffffffffffffff7777fffffffffffffffffffffffffff
-- 044:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff77777f7ff77f7777fff777ff77ffffffffffffffffffffff77ffffffffffffffffffffffffff
-- 045:fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff77fff7ff77f77ff7f77f77fffffffffffffffffffffff777fffffffffffffffffffffffffff
-- 046:fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff77ffff7777f77ff7f777fff77fffffffffffffffffff77fffffffffffffffffffffffffffff
-- 047:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff777ffff77f7777fff777ff77fffffffffffffffffff77777ffffffffffffffffffffffffff
-- 048:fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff777ff77ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 049:ffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 050:ffffffffffff00fffffffffffffffffffffffffffffffffff00fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 051:fffffffffffffffffffffffffffffffffffffffffffffffff006666666666666666666666fffffffff00ffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffff77ff7fffffffffffffffffffffffff77fff77ffffffffff7777fffffffffffffffffffffffff
-- 052:fffffffffffffffffffffffffffffffffffffffffffffffff665555666666666666666666666666666566666666666666666666666666666665dddddddddddddddddddddddddddddd00fffffffffffffffff777f7ff7770f7777ff77f7fff7777f77fff77fffffffff10777fffffffffffffffffffffffff
-- 053:fffffffffffffffffffffffffffffffffffffffffffffffff665555555555555555555555555555555466555555555555555555555555566665dd6666666666666666666666666665d06666666666666666677777677657777777777777777777777777700ffffffff11077fffffffffff00ffffffffffff
-- 054:fffffffffffffffffffffffffffffffffffffffffffffffff665665555555655555655556655556555466565555555555555555555555555554dd5555555555555555555555555554d65555555555555555577677677657677666676767676677677666770ffffffff11107fffffffffff00ffffffffffff
-- 055:fffffffffffffffffffffffffffffffffffffffffffffffff665555555555555555555555555556555466565555555665555655556555565554d6d655555556555565555655556554d65655555555555555577557557777777555575757557777557775777ffffffff11110fffffffffffffffffffffffff
-- 056:fffffffffffffffffffffffffffffffffffffffffffffffff665555555555555555555555555555555466555555555555555555555555555554d65d55555555555555555555556554d65655555566555655556555565547576555556555565556555565547ffffffff0000ffffffffffffffffffffffffff
-- 057:fffffffffffffffffffffffffffffffffffffffffffffffff665555566555566555555565555665445466555556555556555555565555654454d655d5555555555555555555555554d65555555555555555555555555547557555555555555555555555547ffffffffffffffffffffffffffffffffffffff
-- 058:fffffffffffffffffffffffffffffffffffffffffffffffff665555555555555555555555555555555466555555555555555555565555654454d655d5565555655555556555665454d65555565555655555565556654547557556555565555555555555547ffffffffffffffffffffffffffffffffffffff
-- 059:fffffffffffffffffffffffffffffffffffffffffffffffff665655555655555555555555555555555466555555555555555555555555555554d6555d555555555555555555555554d65555555555555555557775555547555756577565555566775654547ffffffff78888fffffffffffffffffffffffff
-- 060:fffffffffffffffffffffffffffffffffffffffffffffffff655655555655555555555555555555555466565555665555555555555555555554d65655d56555555555555555555554d65655556555555555577557577777657775577555577755775555547ffffffffd0008fffffffffffffffffffffffff
-- 061:fffffffffffffffffffffffffffffffffffffffffffffffff655555555555555555555555555555555466555555555555555555555555555554d655555d5555555555555555555554d65655556555555555577557577547676577677555775775555555547ffffffffdfff8fffffffffffffffffffffffff
-- 062:fffffffffffffffffffffffffffffffffffffffffffffffff655555555555565555565555555445455466555555555566555565555555555554d655555d5555555555555555555555d65555555555555555577777577547677777577555777555775555547ffffffffdfff8fffffffffffffffffffffffff
-- 063:fffffffffffffffffffffffffffffffffffffffffffffffff655555555555555555555555555445455465555555555566555565555555454454d6555555d555655556555555545455d65555555555655556577557477547655577757775577755775454557ffffffffdddd7fffffffffffffffffffffffff
-- 064:fffffffffffffffffffffffffffffffffffffffffffffffff655555555555555555555555555555555465555555555555555555555555555554d65555555d55555555555555555555d65555555555555555555555555547657775575555556655555454557ffffffff00000fffffffffffffffffffffffff
-- 065:fffffffffffffffffffffffffffffffffffffffffffffffff655655555555555555555555555555555465565555555555555555555555555554d656555555d5555555555555555555d65655555555555555555555555547655555557555555555555555557ffffffffffffffffffffffffffffffffffffff
-- 066:fffffffffffffffffffffffffffffffffffffffffffffffff655555555555555555555555555555555465555555555555555555555555555554d655555555d5555555555555555555d65665555555555555555555555547656555557555555555555555557ffffffffffffffffffffffffffffffffffffff
-- 067:fffffffffffffffffffffffffffffffffffffffffffffffff655555555555555555555555555555555465555555555555555555555555555554d6555555555d555555555555555555d6555555555555555555bbb55bb547655555555755555555555555557fddddffffffffddffffffffffddfffffffffff
-- 068:fffffffffffffffffffffffffffffffffffffffffffffffff655555555555555565555555445555555465555555555555565555555455555554d65557555555d55655555545555555d655555555555565555bb44b5bb5576bbb55bbbb756bbb55545555557fddffdffdddffddffffdddffdddddffdddffff
-- 069:fffffffffffffffffffffffffffffffffffffffffffffffff655555555555555555555555555544555465555555555555555555555555545554d655555555555d5555555555554555d655555555555555555bb5555bb557bb55b5bb55b7bb5bb55555545547ddffdfddfddfddfffddfddffddfffddfddfff
-- 070:ffffffffffffffffffffffffffffffffffffffffffffffff6656655556655555555555555555555555465565555665555555555555555555554d656555565555d5555555555555555d656655565555555555bb55b5bb557bb55b5bb55b7bbb5555555545547ddffdfdddfffddfffdddffffddfffdddfffff
-- 071:ffffffffffffffffffffffffffffffffffffffffffffffff6656655556655555555555555555555554465565555665555555555555555555554d6565555655555d555555555555555d6566555665555555555bbb555bbb76bbb55bb55b57bbb555555555547ddddfffdddfffdddffdddffffdddffdddffff
-- 072:ffffffffffffffffffffffffffffffffffffffffffffffff6655555555555555555555555555555554465555555555555555555555555555554d65555555555555d55555555555555d655555555555555555555555555576555555555555755555555555547fffffffffffffffffffffffffffffffffffff
-- 073:ffffffffffffffffffffffffffffffffffffffffffffffff6655555555555665555555555555455554465555555555566555555555555455554d655555555556555d5555555545555d655555555556555555555554555576555555555655575555555455547fffffffffffffffffffffffffffffffffffff
-- 074:ffffffffffffffffffffffffffffffffffffffffffffffff6655555555555555555445555555555554465555555555555555545555555555554d655555555555555d4555555555555d655555555555555545555555555576555555555555574555555555547fffffffffffffffffffffffffffffffffffff
-- 075:ffffffffffffffffffffffffffffffffffffffffffffffff6655555555555555555445555555555554465555555555555555545555555555554d6555555555555555d5555555555554655555555555555545555555555576565555556555557555555555547fffffffffffffffffffffffffffffffffffff
-- 076:ffffffffffffffffffffffffffffffffffffffffffffffff6656655555556555555555555555555554465565555555655555555555555555554d65655555556555555d555555555554656655555565555555555555555547566555556555555755555555547fffffffffffffffffffffffffffffffffffff
-- 077:ffffffffffffffffffffffffffffffffffffffffffffffff6655555555555555555555555555555554465555555555555555555555555555554d655555555555555555d55555555554655555555555555555555555555547555555555555555575555555547fffffffffffffffffffffffffffffffffffff
-- 078:ffffffffffffffffffffffffffffffffffffffffffffffff6555555555555555555555555455554454465555555555555555545555455554454d655555555555555545d55445554454655555555555555545555455554547555555555555554575545554547fffffffffffffffffffffffffffffffffffff
-- 079:ffffffffffffffffffffffffffffffffffffffffffffffff6555555555555555555455555455554454465555555555555555545555455554454d6555555555555555455d5555555554655555555555555555555555555547555555555555555557555555557fffffffffffffffffffffffffffffffffffff
-- 080:ffffffffffffffffffffffffffffffffffffffffffffffff6555555555555555555555555555555554465555555555555555555555555555554d65555555555555555555d555555554655555555555555555555555555547555565555554555555755555557fffffffffffffffffffffffffffffffffffff
-- 081:ffffffffffffffffffffffffffffffffffffffffffffffff6555556555555554555555555555555554465555665555554455555555555555554d655556555555445555555d55555554655556555555445555555555555547555565555554555555575555557fffffffffffffffffffffffffffffffffffff
-- 082:ffffffffffffffffffffffffffffffffffffffffffffffff6555556555555554555555555555555554465555655555555555555555555555554d655555555555555555555d55555554655555555555555555555555555547555555555555555555575555557fffffffffffffffffffffffffffffffffffff
-- 083:ffffffffffffffffffffffffffffffffffffffffffffffff6555555555555555555555555555555554465555555555555555555555555555554d6555555555555555555555d5455554655555555555555555555554455547655555555555555555557455557fffffffffffffffffffffffffffffffffffff
-- 084:ffffffffffffffffffffffffffffffffffffffffffffffff6555555555555555555555555554455554665555555555555555555555555455554d65555555555555555555555d4555546555555555555555555455555555476555555555555555545557555547ffffffffffffffffffffffffffffffffffff
-- 085:ffffffffffffffffffffffffffffffffffffffffffffffff6555555555555555555555455555555554665555555555555555555445555555554d655555555555555555545555d555546555555555555555555455555555476555555554555445555555755547ffffffffffffffffffffffffffffffffffff
-- 086:ffffffffffffffffffffffffffffffffffffffffffffffff6555555555555555555555455555555554665555555555555554555555555555554d655555555545555455555555d555546555555555455554555555555555476555555554555445555555755547ffffffffffffffffffffffffffffffffffff
-- 087:fffffffffffffffffffffffffffffffffffffffffffffff66555555555544555544555555555555554665555555555455554555555555555554d6555555555555555555555555d55546555555555555555555555555555476555555555555555555555575547ffffffffffffffffffffffffffffffffffff
-- 088:fffffffffffffffffffffffffffffffffffffffffffffff66555555555555555555555555555555554665555555555555555555555555555554d65555555555555555555555555d5546655655555555555555455445545476556555555555555545544557547ffffffffffffffffffffffffffffffffffff
-- 089:fffffffffffffffffffffffffffffffffffffffffffffff66555555555555555555555555555555554665556555555555555555445544554454d655665555555555555545554554d546655655555555555555455555555476555555555555555555555555747ffffffffffffffffffffffffffffffffffff
-- 090:fffffffffffffffffffffffffffffffffffffffffffffff66555655555555555555554455545554554665556555555555555555455555555554d655555555555555555555555555d546655555555555555555555555555476555555555555555555555555747ffffffffffffffffffffffffffffffffffff
-- 091:fffffffffffffffffffffffffffffffffffffffffffffff66555555555555555555555555555555554665555555555555555555555555555554d6555555555555555555555555555d46655555555555555555555555555476555555555555555555554444477fffffffffffffffffffffffff00fffffffff
-- 092:fffffffffffffffffffffffffffffffffffffffffffffff66555555555555555555555555555555554665555555555555555555555555555554d65555555555555555555555555554d55444444444444444444444444444004444444477777777777777777700ffffffffffffffffffffffff00fffffffff
-- 093:fffffffffffffffffffffffffffffffffffffffffffffff6655555555555555555555555555555555466555555444444444444444444444444005444444444444444444ddddddddddd05444444444444fffffffffffffff0077777777ffffffffffffffffff00fffffffffffffffffffffffffffffffffff
-- 094:fffffffffffffffffffffffffffffffffffffffffffffff554444444444444444444444444444444440544444444444444444444444444ffff00dddddddddddddddddddffffffffff00fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 095:fffffffff00fffffffffffffffffffffffffffffffffff0054444444444ffffffffffffffffffffff00fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 096:fffffffff00fffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 097:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 098:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 099:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 100:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 101:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 102:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 103:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 104:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffff
-- 105:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffff
-- 106:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 107:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 108:fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 109:fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffffffff00fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 110:fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 111:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 112:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 113:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 114:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 115:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 116:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 117:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 118:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 119:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 120:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 121:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 122:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 123:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 124:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 125:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 126:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 127:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 128:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 129:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 130:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 131:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 132:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 133:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 134:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 135:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- </SCREEN>

-- <PALETTE>
-- 000:0000001c181c3838385d5d5d7d7d7dbababad6d6d6fffffff21018ff55553499ba65eef6b2f6faff8d18ffbe3c283040
-- </PALETTE>

