-- title:  Portal 3D lvl editor
-- author: HanamileH, soxfox42
-- desc:   version 1.0 (powered by UniTIC v 1.3)
-- script: lua
-- saveid: portal3d_unitic_lvl_editor

local save_reminder = true

--[[
Everything related to portals or other less important
parts has been cut out in order to speed up the code
]]

--[[
license:

Copyright 2022 HanamileH
Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated
documentation files (the "Software"), to deal in the
Software without restriction, including without limitation
the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall
be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH
THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
]]


--- Compression routines - placed high as they may be used to compress various pieces of data in the source
local function bitwriter()
	return {
		cur = 0,
		bits = 0,
		output = {},

		write = function(self, val, bits)
			self.cur = self.cur | (val << self.bits)
			self.bits = self.bits + bits
			self:flush()
		end,
		flush = function(self)
			while self.bits >= 8 do
				self.output[#self.output + 1] = string.char(self.cur & 0xFF)
				self.bits = self.bits - 8
				self.cur = self.cur >> 8
			end
		end,
		finish = function(self)
			self.output[#self.output + 1] = string.char(self.cur)
			self.bits = 0
			self.cur = 0
			return table.concat(self.output)
		end,
	}
end

local function bitreader(data)
	return {
		data = data,
		pos = 1,
		bits = 0,

		read = function(self, bits)
			local value = 0
			local cur = 0

			if self.bits > 0 then
				if bits >= (8 - self.bits) then
					value = self:byte() >> self.bits
					cur = 8 - self.bits
					self.bits = 0
					self.pos = self.pos + 1
				else
					value = (self:byte() >> self.bits) & ((1 << bits) - 1)
					self.bits = self.bits + bits
					return value
				end
			end

			while (cur + 8) <= bits do
				value = value | (self:byte() << cur)
				cur = cur + 8
				self.pos = self.pos + 1
			end

			if cur < bits then
				value = value | (self:byte() & ((1 << bits - cur) - 1)) << cur
				self.bits = bits - cur
			end

			return value
		end,
		byte = function(self)
			return string.byte(self.data, self.pos, self.pos)
		end,
	}
end

local function compress(str)
	local writer = bitwriter()

	local codes = {}
	for i = 1, 256 do
		codes[string.char(i - 1)] = i
	end
	local count = 256
	local bits = 9
	local inc = 512

	local start = 1

	while start <= #str do
		for i = start, #str do
			local cur = str:sub(start, i)
			if i == #str then
				writer:write(codes[cur], bits)
				start = i + 1
				break
			end

			local nxt = str:sub(start, i + 1)
			if not codes[nxt] then
				writer:write(codes[cur], bits)
				count = count + 1
				codes[nxt] = count
				start = i + 1
				break
			end
		end

		if count == inc then
			inc = inc * 2
			bits = bits + 1
		end
	end

	writer:write(0, bits)
	return writer:finish()
end

local function decompress(str)
	local reader = bitreader(str)

	local codes = {}
	for i = 1, 256 do
		codes[i] = string.char(i - 1)
	end
	local bits = 9
	local inc = 512

	local result = {}
	local prev

	while true do
		local code = reader:read(bits)
		if code == 0 then
			return table.concat(result)
		end

		if codes[code] then
			result[#result + 1] = codes[code]
			if prev then
				codes[#codes + 1] = prev .. codes[code]:sub(1, 1)
			end
			prev = codes[code]
		else
			local new = prev .. prev:sub(1, 1)
			result[#result + 1] = new
			codes[#codes + 1] = new
			prev = new
		end

		if #codes == inc - 1 then
			inc = inc * 2
			bits = bits + 1
		end
	end
end

local F, R, min, max, abs = math.floor, math.random, math.min, math.max, math.abs
local pi2 = math.pi / 2

--camera
local cam = { x = 0, y = 0, z = 0, tx = 0, ty = 0 }
--player
local plr = { x = 0, y = 64, z = 0, tx = 0, ty = 0, vy=0 , xy=false , noclip = true , cd = 0 , dt= 1}

--engine settings:
local unitic = {
	version = 1.3, --engine version
	--drawing
	fov = 80, --lens distance to camera
	--system tables (dont touch)
	poly = {},
	obj  = {}, --objects
	p    = {} --particles
}


-- Please note than some objects do not have collisions. (coll={})
local model={
	{--cube (1)
	v={{ 23.9, 23.9, 23.9},{ 23.9,-23.9, 23.9},{ 23.9, 23.9,-23.9},{ 23.9,-23.9,-23.9},{-23.9, 23.9, 23.9},{-23.9,-23.9, 23.9},{-23.9, 23.9,-23.9},{-23.9,-23.9,-23.9},},
	f={
		 {5,3,1,uv={{96,256},{72,232},{72,256},-1},f=2},
		 {3,8,4,uv={{96,232},{72,256},{96,256},-1},f=2},
		 {7,6,8,uv={{96,232},{72,256},{96,256},-1},f=2},
		 {2,8,6,uv={{96,256},{72,232},{72,256},-1},f=2},
		 {1,4,2,uv={{96,232},{72,256},{96,256},-1},f=2},
		 {5,2,6,uv={{96,232},{72,256},{96,256},-1},f=2},
		 {5,7,3,uv={{96,256},{96,232},{72,232},-1},f=2},
		 {3,7,8,uv={{96,232},{72,232},{72,256},-1},f=2},
		 {7,5,6,uv={{96,232},{72,232},{72,256},-1},f=2},
		 {2,4,8,uv={{96,256},{96,232},{72,232},-1},f=2},
		 {1,3,4,uv={{96,232},{72,232},{72,256},-1},f=2},
		 {5,1,2,uv={{96,232},{72,232},{72,256},-1},f=2},
	},
	coll={{-24,-24,-24,24,24,24}} --collision cube {XYZ, XYZ}
	},
	{--cube companion (2)
	v={{ 23.9, 23.9, 23.9},{ 23.9,-23.9, 23.9},{ 23.9, 23.9,-23.9},{ 23.9,-23.9,-23.9},{-23.9, 23.9, 23.9},{-23.9,-23.9, 23.9},{-23.9, 23.9,-23.9},{-23.9,-23.9,-23.9},},
	f={
		 {5,3,1,uv={{96,256-24},{72,232-24},{72,256-24},-1},f=2},
		 {3,8,4,uv={{96,232-24},{72,256-24},{96,256-24},-1},f=2},
		 {7,6,8,uv={{96,232-24},{72,256-24},{96,256-24},-1},f=2},
		 {2,8,6,uv={{96,256-24},{72,232-24},{72,256-24},-1},f=2},
		 {1,4,2,uv={{96,232-24},{72,256-24},{96,256-24},-1},f=2},
		 {5,2,6,uv={{96,232-24},{72,256-24},{96,256-24},-1},f=2},
		 {5,7,3,uv={{96,256-24},{96,232-24},{72,232-24},-1},f=2},
		 {3,7,8,uv={{96,232-24},{72,232-24},{72,256-24},-1},f=2},
		 {7,5,6,uv={{96,232-24},{72,232-24},{72,256-24},-1},f=2},
		 {2,4,8,uv={{96,256-24},{96,232-24},{72,232-24},-1},f=2},
		 {1,3,4,uv={{96,232-24},{72,232-24},{72,256-24},-1},f=2},
		 {5,1,2,uv={{96,232-24},{72,232-24},{72,256-24},-1},f=2},
	},
	coll={{-24,-24,-24,24,24,24}}
	},
	{ --cube dispenser (3)
		v={
			{ 32, 31, 32},
			{ 32,-32, 32},
			{ 32, 31,-32},
			{ 32,-32,-32},
			{-32, 31, 32},
			{-32,-32, 32},
			{-32, 31,-32},
			{-32,-32,-32},
		},
		f={
			{5,3,1,uv={{120,232},{96, 208},{96 ,232},-1},f=3},
			{3,8,4,uv={{120,232},{96, 256},{120,256},-1},f=3},
			{7,6,8,uv={{120,232},{96, 256},{120,256},-1},f=3},
			{2,8,6,uv={{120,232},{96, 208},{96 ,232},-1},f=3},
			{1,4,2,uv={{120,232},{96, 256},{120,256},-1},f=3},
			{5,2,6,uv={{120,232},{96, 256},{120,256},-1},f=3},
			{5,7,3,uv={{120,232},{120,208},{96 ,208},-1},f=3},
			{3,7,8,uv={{120,232},{96, 232},{96 ,256},-1},f=3},
			{7,5,6,uv={{120,232},{96, 232},{96 ,256},-1},f=3},
			{2,4,8,uv={{120,232},{120,208},{96 ,208},-1},f=3},
			{1,3,4,uv={{120,232},{96, 232},{96 ,256},-1},f=3},
			{5,1,2,uv={{120,232},{96, 232},{96 ,256},-1},f=3}
		},
		coll={{-24,-24,-24,24,24,24}}
	},
	{--light bridge (-X) (4)
		v={{-48,4, 48},{ 48,4, 48},{-48,4,-48},{ 48,4,-48}},
		f={{2,1,4,uv={{0,232},{16,232},{0,248}},f=3},{1,4,3,uv={{16,232},{0,248},{16,248}},f=3}},
		coll={{-48,0,-48,48,0,48}}
	},
	{ --light bridge (+X) (5)
		v={{-48,4,-48},{ 48,4,-48},{-48,4, 48},{ 48,4, 48}},
		f={{1,2,3,uv={{0,232},{16,232},{0,248}},f=3},{2,3,4,uv={{16,232},{0,248},{16,248}},f=3}},
		coll={{-48,0,-48,48,0,48}}
	},
	{--light bridge (-Z) (6)
		v={{-48,4,-48},{-48,4, 48},{ 48,4,-48},{ 48,4, 48}},
		f={{2,1,4,uv={{0,232},{16,232},{0,248}},f=3},{1,4,3,uv={{16,232},{0,248},{16,248}},f=3}},
		coll={{-48,0,-48,48,0,48}}
	},
	{--light bridge (+Z) (7)
		v={{ 48,4, 48},{ 48,4,-48},{-48,4, 48},{-48,4,-48}},
		f={{2,1,4,uv={{0,232},{16,232},{0,248}},f=3},{1,4,3,uv={{16,232},{0,248},{16,248}},f=3}},
		coll={{-48,0,-48,48,0,48}}
	},
	{--button -X (8)
		v={
			{6   ,46  ,6   },
			{6   ,0   ,6   },
			{6   ,46  ,-6  },
			{6   ,0   ,-6  },
			{-6  ,51.2,6   },
			{-6  ,0   ,6   },
			{-6  ,51.2,-6  },
			{-6  ,0   ,-6  },
			{-4.5,51.2,-4.5},
			{-4.5,51.2,4.5 },
			{5.5 ,47.2,-4.5},
			{5.5 ,47.2,4.5 },
		},
		f={
			{5 ,3 ,1 ,uv={{125,136},{120,133},{120,136},-1},f=2},
			{3 ,8 ,4 ,uv={{128,128},{125,132},{128,132},-1},f=2},
			{7 ,6 ,8 ,uv={{128,128},{125,132},{128,132},-1},f=2},
			{1 ,4 ,2 ,uv={{125,132},{128,128},{125,128},-1},f=2},
			{6 ,1 ,2 ,uv={{128,132},{125,128},{125,132},-1},f=2},
			{10,11,12,uv={{125,133},{120,128},{120,133},-1},f=3},
			{5 ,7 ,3 ,uv={{125,136},{125,133},{120,133},-1},f=2},
			{3 ,7 ,8 ,uv={{128,128},{125,128},{125,132},-1},f=2},
			{7 ,5 ,6 ,uv={{128,128},{125,128},{125,132},-1},f=2},
			{1 ,3 ,4 ,uv={{125,132},{128,132},{128,128},-1},f=2},
			{6 ,5 ,1 ,uv={{128,132},{128,128},{125,128},-1},f=2},
			{10,9 ,11,uv={{125,133},{125,128},{120,128},-1},f=3},
		},
		coll={{-6,0,-6,6,52,6}}
	},
	{--button +X (9)
		v={
			{-6   ,46  ,-6  },
			{-6   ,0   ,-6  },
			{-6   ,46  ,6   },
			{-6   ,0   ,6   },
			{6    ,51.2,-6  },
			{6    ,0   ,-6  },
			{6    ,51.2,6   },
			{6    ,0   ,6   },
			{4.5  ,51.2,4.5 },
			{4.5  ,51.2,-4.5},
			{-5.5 ,47.2,4.5 },
			{-5.5 ,47.2,-4.5},
		},
		f={
			{5 ,3 ,1 ,uv={{125,136},{120,133},{120,136},-1},f=2},
			{3 ,8 ,4 ,uv={{128,128},{125,132},{128,132},-1},f=2},
			{7 ,6 ,8 ,uv={{128,128},{125,132},{128,132},-1},f=2},
			{1 ,4 ,2 ,uv={{125,132},{128,128},{125,128},-1},f=2},
			{6 ,1 ,2 ,uv={{128,132},{125,128},{125,132},-1},f=2},
			{10,11,12,uv={{125,133},{120,128},{120,133},-1},f=3},
			{5 ,7 ,3 ,uv={{125,136},{125,133},{120,133},-1},f=2},
			{3 ,7 ,8 ,uv={{128,128},{125,128},{125,132},-1},f=2},
			{7 ,5 ,6 ,uv={{128,128},{125,128},{125,132},-1},f=2},
			{1 ,3 ,4 ,uv={{125,132},{128,132},{128,128},-1},f=2},
			{6 ,5 ,1 ,uv={{128,132},{128,128},{125,128},-1},f=2},
			{10,9 ,11,uv={{125,133},{125,128},{120,128},-1},f=3},
		},
		coll={{-6,0,-6,6,52,6}}
	},
	{--button -Z (10)
		v={
			{-6  ,46  ,6   },
			{-6  ,0   ,6   },
			{6   ,46  ,6   },
			{6   ,0   ,6   },
			{-6  ,51.2,-6  },
			{-6  ,0   ,-6  },
			{6   ,51.2,-6  },
			{6   ,0   ,-6  },
			{4.5 ,51.2,-4.5},
			{-4.5,51.2,-4.5},
			{4.5 ,47.2,5.5 },
			{-4.5,47.2,5.5 },
		},
		f={
			{5 ,3 ,1 ,uv={{125,136},{120,133},{120,136},-1},f=2},
			{3 ,8 ,4 ,uv={{128,128},{125,132},{128,132},-1},f=2},
			{7 ,6 ,8 ,uv={{128,128},{125,132},{128,132},-1},f=2},
			{1 ,4 ,2 ,uv={{125,132},{128,128},{125,128},-1},f=2},
			{6 ,1 ,2 ,uv={{128,132},{125,128},{125,132},-1},f=2},
			{10,11,12,uv={{125,133},{120,128},{120,133},-1},f=3},
			{5 ,7 ,3 ,uv={{125,136},{125,133},{120,133},-1},f=2},
			{3 ,7 ,8 ,uv={{128,128},{125,128},{125,132},-1},f=2},
			{7 ,5 ,6 ,uv={{128,128},{125,128},{125,132},-1},f=2},
			{1 ,3 ,4 ,uv={{125,132},{128,132},{128,128},-1},f=2},
			{6 ,5 ,1 ,uv={{128,132},{128,128},{125,128},-1},f=2},
			{10,9 ,11,uv={{125,133},{125,128},{120,128},-1},f=3},
		},
		coll={{-6,0,-6,6,52,6}}
	},
	{--button +Z (11)
		v={
			{6   ,46  ,-6   },
			{6   ,0   ,-6   },
			{-6  ,46  ,-6   },
			{-6  ,0   ,-6   },
			{6   ,51.2,6    },
			{6   ,0   ,6    },
			{-6  ,51.2,6    },
			{-6  ,0   ,6    },
			{-4.5,51.2,4.5  },
			{4.5 ,51.2,4.5  },
			{-4.5,47.2,-5.5 },
			{4.5 ,47.2,-5.5 },
		},
		f={
			{5 ,3 ,1 ,uv={{125,136},{120,133},{120,136},-1},f=2},
			{3 ,8 ,4 ,uv={{128,128},{125,132},{128,132},-1},f=2},
			{7 ,6 ,8 ,uv={{128,128},{125,132},{128,132},-1},f=2},
			{1 ,4 ,2 ,uv={{125,132},{128,128},{125,128},-1},f=2},
			{6 ,1 ,2 ,uv={{128,132},{125,128},{125,132},-1},f=2},
			{10,11,12,uv={{125,133},{120,128},{120,133},-1},f=3},
			{5 ,7 ,3 ,uv={{125,136},{125,133},{120,133},-1},f=2},
			{3 ,7 ,8 ,uv={{128,128},{125,128},{125,132},-1},f=2},
			{7 ,5 ,6 ,uv={{128,128},{125,128},{125,132},-1},f=2},
			{1 ,3 ,4 ,uv={{125,132},{128,132},{128,128},-1},f=2},
			{6 ,5 ,1 ,uv={{128,132},{128,128},{125,128},-1},f=2},
			{10,9 ,11,uv={{125,133},{125,128},{120,128},-1},f=3},
		},
		coll={{-6,0,-6,6,52,6}}
	},
	{ --turret -X (12)
		v={
			 {7,0  ,0},
			 {28,27 ,0},
			 {7,27 ,0},
			 {28,0  ,0},
			 {-24,0  ,-19},
			 {-4,27 ,-8},
			 {-24,27 ,-19},
			 {-4,0  ,-8},
			 {-24,0  ,18},
			 {-4,27 ,7},
			 {-24,27 ,18},
			 {-4,0  ,7},
			 {12,41 ,-12},
			 {8,12 ,-9},
			 {-9,67 ,-9},
			 {-12,41 ,-12},
			 {-9,12 ,-9},
			 {0,76 ,0},
			 {-9,67 ,8},
			 {-12,41 ,12},
			 {-9,12 ,8},
			 {8,67 ,8},
			 {12,41 ,12},
			 {8,12 ,8},
			 {8,67 ,-9},
			 {-12,37 ,0},
			 {-12,42 ,4},
			 {-12,42 ,-5},
			 {-12,47 ,0},
			 {12,41 ,-22},
			 {8,12 ,-19},
			 {-9,67 ,-19},
			 {-12,41 ,-22},
			 {-9,12 ,-19},
			 {8,67 ,-19},
			 {-9,67 ,18},
			 {-12,41 ,22},
			 {-9,12 ,18},
			 {8,67 ,18},
			 {12,41 ,22},
			 {8,12 ,18},
			 {0,28 ,20},
			 {0,55 ,20},
			 {0,28 ,-20},
			 {0,55 ,-20},
			 {0,43 ,-22},
			 {0,43 ,21},
		},
		f={
			{3 ,4 ,1 ,uv={{124,138},{120,144},{124,144},-1},f=3},
			{7 ,8 ,5 ,uv={{120,138},{124,144},{120,144},-1},f=3},
			{11,12,9 ,uv={{120,138},{124,144},{120,144},-1},f=3},
			{45,47,46,uv={{124,138},{123,136},{123,138},-1},f=3},
			{44,47,42,uv={{122,138},{123,136},{122,136},-1},f=3},
			{3 ,2 ,4 ,uv={{124,138},{120,138},{120,144},-1},f=3},
			{7 ,6 ,8 ,uv={{120,138},{124,138},{124,144},-1},f=3},
			{11,10,12,uv={{120,138},{124,138},{124,144},-1},f=3},
			{45,43,47,uv={{124,138},{124,136},{123,136},-1},f=3},
			{44,46,47,uv={{122,138},{123,138},{123,136},-1},f=3},
			{25,18,15,uv={{126,138},{128,138},{128,136},-1},f=2},
			{25,16,13,uv={{125,140},{125,140},{126,139},-1},f=2},
			{13,17,14,uv={{125,140},{125,140},{126,139},-1},f=2},
			{15,20,16,uv={{124,138},{124,139},{125,138},-1},f=2},
			{17,20,21,uv={{124,138},{124,139},{125,138},-1},f=2},
			{15,18,19,uv={{124,138},{124,139},{125,138},-1},f=2},
			{20,22,23,uv={{125,140},{125,140},{126,139},-1},f=2},
			{21,23,24,uv={{125,140},{125,140},{126,139},-1},f=2},
			{19,18,22,uv={{124,138},{124,139},{125,138},-1},f=2},
			{22,18,25,uv={{124,138},{124,139},{125,138},-1},f=2},
			{22,13,23,uv={{124,138},{124,139},{125,138},-1},f=2},
			{23,14,24,uv={{124,138},{124,139},{125,138},-1},f=2},
			{25,15,16,uv={{125,140},{125,140},{126,139},-1},f=2},
			{13,16,17,uv={{125,140},{125,140},{126,139},-1},f=2},
			{15,19,20,uv={{124,138},{124,139},{125,138},-1},f=2},
			{17,16,20,uv={{124,138},{124,139},{125,138},-1},f=2},
			{20,19,22,uv={{125,140},{125,140},{126,139},-1},f=2},
			{21,20,23,uv={{125,140},{125,140},{126,139},-1},f=2},
			{22,25,13,uv={{124,138},{124,139},{125,138},-1},f=2},
			{23,13,14,uv={{124,138},{124,139},{125,138},-1},f=2},
			{35,33,30,uv={{128,136},{124,140},{128,140},-1},f=3},
			{30,34,31,uv={{128,143},{124,140},{124,143},-1},f=3},
			{36,40,37,uv={{128,136},{124,140},{128,140},-1},f=3},
			{38,40,41,uv={{128,143},{124,140},{124,143},-1},f=3},
			{35,32,33,uv={{128,136},{124,136},{124,140},-1},f=3},
			{30,33,34,uv={{128,143},{128,140},{124,140},-1},f=3},
			{36,39,40,uv={{128,136},{124,136},{124,140},-1},f=3},
			{38,37,40,uv={{128,143},{128,140},{124,140},-1},f=3},
			{29,26,28,uv={{122,138},{120,136},{120,138},-1},f=2},
			{29,27,26,uv={{122,138},{122,136},{120,136},-1},f=2},
		},
		coll={{-12,0,-12,12,69,12}}
	},
	{ --turret +X (13)
		v={
			 {-7,0,0},
			 {-28,27,0},
			 {-7,27,0},
			 {-28,0,0},
			 {24,0,19},
			 {4,27,8},
			 {24,27,19},
			 {4,0,8},
			 {24,0,-18},
			 {4,27,-7},
			 {24,27,-18},
			 {4,0,-7},
			 {-12,41,12},
			 {-8,12,9},
			 {9,67,9},
			 {12,41,12},
			 {9,12,9},
			 {0,76,0},
			 {9,67,-8},
			 {12,41,-12},
			 {9,12,-8},
			 {-8,67,-8},
			 {-12,41,-12},
			 {-8,12,-8},
			 {-8,67,9},
			 {12,37,0},
			 {12,42,-4},
			 {12,42,5},
			 {12,47,0},
			 {-12,41,22},
			 {-8,12,19},
			 {9,67,19},
			 {12,41,22},
			 {9,12,19},
			 {-8,67,19},
			 {9,67,-18},
			 {12,41,-22},
			 {9,12,-18},
			 {-8,67,-18},
			 {-12,41,-22},
			 {-8,12,-18},
			 {0,28,-20},
			 {0,55,-20},
			 {0,28,20},
			 {0,55,20},
			 {0,43,22},
			 {0,43,-21},
		},
		f={
			{3 ,4 ,1 ,uv={{124,138},{120,144},{124,144},-1},f=3},
			{7 ,8 ,5 ,uv={{120,138},{124,144},{120,144},-1},f=3},
			{11,12,9 ,uv={{120,138},{124,144},{120,144},-1},f=3},
			{45,47,46,uv={{124,138},{123,136},{123,138},-1},f=3},
			{44,47,42,uv={{122,138},{123,136},{122,136},-1},f=3},
			{3 ,2 ,4 ,uv={{124,138},{120,138},{120,144},-1},f=3},
			{7 ,6 ,8 ,uv={{120,138},{124,138},{124,144},-1},f=3},
			{11,10,12,uv={{120,138},{124,138},{124,144},-1},f=3},
			{45,43,47,uv={{124,138},{124,136},{123,136},-1},f=3},
			{44,46,47,uv={{122,138},{123,138},{123,136},-1},f=3},
			{25,18,15,uv={{126,138},{128,138},{128,136},-1},f=2},
			{25,16,13,uv={{125,140},{125,140},{126,139},-1},f=2},
			{13,17,14,uv={{125,140},{125,140},{126,139},-1},f=2},
			{15,20,16,uv={{124,138},{124,139},{125,138},-1},f=2},
			{17,20,21,uv={{124,138},{124,139},{125,138},-1},f=2},
			{15,18,19,uv={{124,138},{124,139},{125,138},-1},f=2},
			{20,22,23,uv={{125,140},{125,140},{126,139},-1},f=2},
			{21,23,24,uv={{125,140},{125,140},{126,139},-1},f=2},
			{19,18,22,uv={{124,138},{124,139},{125,138},-1},f=2},
			{22,18,25,uv={{124,138},{124,139},{125,138},-1},f=2},
			{22,13,23,uv={{124,138},{124,139},{125,138},-1},f=2},
			{23,14,24,uv={{124,138},{124,139},{125,138},-1},f=2},
			{25,15,16,uv={{125,140},{125,140},{126,139},-1},f=2},
			{13,16,17,uv={{125,140},{125,140},{126,139},-1},f=2},
			{15,19,20,uv={{124,138},{124,139},{125,138},-1},f=2},
			{17,16,20,uv={{124,138},{124,139},{125,138},-1},f=2},
			{20,19,22,uv={{125,140},{125,140},{126,139},-1},f=2},
			{21,20,23,uv={{125,140},{125,140},{126,139},-1},f=2},
			{22,25,13,uv={{124,138},{124,139},{125,138},-1},f=2},
			{23,13,14,uv={{124,138},{124,139},{125,138},-1},f=2},
			{35,33,30,uv={{128,136},{124,140},{128,140},-1},f=3},
			{30,34,31,uv={{128,143},{124,140},{124,143},-1},f=3},
			{36,40,37,uv={{128,136},{124,140},{128,140},-1},f=3},
			{38,40,41,uv={{128,143},{124,140},{124,143},-1},f=3},
			{35,32,33,uv={{128,136},{124,136},{124,140},-1},f=3},
			{30,33,34,uv={{128,143},{128,140},{124,140},-1},f=3},
			{36,39,40,uv={{128,136},{124,136},{124,140},-1},f=3},
			{38,37,40,uv={{128,143},{128,140},{124,140},-1},f=3},
			{29,26,28,uv={{122,138},{120,136},{120,138},-1},f=2},
			{29,27,26,uv={{122,138},{122,136},{120,136},-1},f=2},
		},
		coll={{-12,0,-12,12,69,12}}
	},
	{ --turret -Z (14)
		v={
			{0  ,0  ,7},
			{0  ,27 ,28},
			{0  ,27 ,7},
			{0  ,0  ,28},
			{19 ,0  ,-24},
			{8  ,27 ,-4},
			{19 ,27 ,-24},
			{8  ,0  ,-4},
			{-18,0  ,-24},
			{-7 ,27 ,-4},
			{-18,27 ,-24},
			{-7 ,0  ,-4},
			{12 ,41 ,12},
			{9  ,12 ,8},
			{9  ,67 ,-9},
			{12 ,41 ,-12},
			{9  ,12 ,-9},
			{0  ,76 ,0},
			{-8 ,67 ,-9},
			{-12,41 ,-12},
			{-8 ,12 ,-9},
			{-8 ,67 ,8},
			{-12,41 ,12},
			{-8 ,12 ,8},
			{9  ,67 ,8},
			{0  ,37 ,-12},
			{-4 ,42 ,-12},
			{5  ,42 ,-12},
			{0  ,47 ,-12},
			{22 ,41 ,12},
			{19 ,12 ,8},
			{19 ,67 ,-9},
			{22 ,41 ,-12},
			{19 ,12 ,-9},
			{19 ,67 ,8},
			{-18,67 ,-9},
			{-22,41 ,-12},
			{-18,12 ,-9},
			{-18,67 ,8},
			{-22,41 ,12},
			{-18,12 ,8},
			{-20,28 ,0},
			{-20,55 ,0},
			{20 ,28 ,0},
			{20 ,55 ,0},
			{22 ,43 ,0},
			{-21,43 ,0},
		},
		f={
			{3 ,4 ,1 ,uv={{124,138},{120,144},{124,144},-1},f=3},
			{7 ,8 ,5 ,uv={{120,138},{124,144},{120,144},-1},f=3},
			{11,12,9 ,uv={{120,138},{124,144},{120,144},-1},f=3},
			{45,47,46,uv={{124,138},{123,136},{123,138},-1},f=3},
			{44,47,42,uv={{122,138},{123,136},{122,136},-1},f=3},
			{3 ,2 ,4 ,uv={{124,138},{120,138},{120,144},-1},f=3},
			{7 ,6 ,8 ,uv={{120,138},{124,138},{124,144},-1},f=3},
			{11,10,12,uv={{120,138},{124,138},{124,144},-1},f=3},
			{45,43,47,uv={{124,138},{124,136},{123,136},-1},f=3},
			{44,46,47,uv={{122,138},{123,138},{123,136},-1},f=3},
			{25,18,15,uv={{126,138},{128,138},{128,136},-1},f=2},
			{25,16,13,uv={{125,140},{125,140},{126,139},-1},f=2},
			{13,17,14,uv={{125,140},{125,140},{126,139},-1},f=2},
			{15,20,16,uv={{124,138},{124,139},{125,138},-1},f=2},
			{17,20,21,uv={{124,138},{124,139},{125,138},-1},f=2},
			{15,18,19,uv={{124,138},{124,139},{125,138},-1},f=2},
			{20,22,23,uv={{125,140},{125,140},{126,139},-1},f=2},
			{21,23,24,uv={{125,140},{125,140},{126,139},-1},f=2},
			{19,18,22,uv={{124,138},{124,139},{125,138},-1},f=2},
			{22,18,25,uv={{124,138},{124,139},{125,138},-1},f=2},
			{22,13,23,uv={{124,138},{124,139},{125,138},-1},f=2},
			{23,14,24,uv={{124,138},{124,139},{125,138},-1},f=2},
			{25,15,16,uv={{125,140},{125,140},{126,139},-1},f=2},
			{13,16,17,uv={{125,140},{125,140},{126,139},-1},f=2},
			{15,19,20,uv={{124,138},{124,139},{125,138},-1},f=2},
			{17,16,20,uv={{124,138},{124,139},{125,138},-1},f=2},
			{20,19,22,uv={{125,140},{125,140},{126,139},-1},f=2},
			{21,20,23,uv={{125,140},{125,140},{126,139},-1},f=2},
			{22,25,13,uv={{124,138},{124,139},{125,138},-1},f=2},
			{23,13,14,uv={{124,138},{124,139},{125,138},-1},f=2},
			{35,33,30,uv={{128,136},{124,140},{128,140},-1},f=3},
			{30,34,31,uv={{128,143},{124,140},{124,143},-1},f=3},
			{36,40,37,uv={{128,136},{124,140},{128,140},-1},f=3},
			{38,40,41,uv={{128,143},{124,140},{124,143},-1},f=3},
			{35,32,33,uv={{128,136},{124,136},{124,140},-1},f=3},
			{30,33,34,uv={{128,143},{128,140},{124,140},-1},f=3},
			{36,39,40,uv={{128,136},{124,136},{124,140},-1},f=3},
			{38,37,40,uv={{128,143},{128,140},{124,140},-1},f=3},
			{29,26,28,uv={{122,138},{120,136},{120,138},-1},f=2},
			{29,27,26,uv={{122,138},{122,136},{120,136},-1},f=2},
		},
		coll={{-12,0,-12,12,69,12}}
	},
	{ --turret +Z (15)
		v={
			 {0,0  ,-7 },
			 {0,27 ,-28},
			 {0,27 ,-7 },
			 {0,0  ,-28},
			 {-19,0  ,24 },
			 {-8,27 ,4  },
			 {-19,27 ,24 },
			 {-8,0  ,4  },
			 {18,0  ,24 },
			 {7,27 ,4  },
			 {18,27 ,24 },
			 {7,0  ,4  },
			 {-12,41 ,-12},
			 {-9,12 ,-8 },
			 {-9,67 ,9  },
			 {-12,41 ,12 },
			 {-9,12 ,9  },
			 {0,76 ,0  },
			 {8,67 ,9  },
			 {12,41 ,12 },
			 {8,12 ,9  },
			 {8,67 ,-8 },
			 {12,41 ,-12},
			 {8,12 ,-8 },
			 {-9,67 ,-8 },
			 {0,37 ,12 },
			 {4,42 ,12 },
			 {-5,42 ,12 },
			 {0,47 ,12 },
			 {-22,41 ,-12},
			 {-19,12 ,-8 },
			 {-19,67 ,9  },
			 {-22,41 ,12 },
			 {-19,12 ,9  },
			 {-19,67 ,-8 },
			 {18,67 ,9  },
			 {22,41 ,12 },
			 {18,12 ,9  },
			 {18,67 ,-8 },
			 {22,41 ,-12},
			 {18,12 ,-8 },
			 {20,28 ,0  },
			 {20,55 ,0  },
			 {-20,28 ,0  },
			 {-20,55 ,0  },
			 {-22,43 ,0  },
			 {21,43 ,0  },
		},
		f={
			{3 ,4 ,1 ,uv={{124,138},{120,144},{124,144},-1},f=3},
			{7 ,8 ,5 ,uv={{120,138},{124,144},{120,144},-1},f=3},
			{11,12,9 ,uv={{120,138},{124,144},{120,144},-1},f=3},
			{45,47,46,uv={{124,138},{123,136},{123,138},-1},f=3},
			{44,47,42,uv={{122,138},{123,136},{122,136},-1},f=3},
			{3 ,2 ,4 ,uv={{124,138},{120,138},{120,144},-1},f=3},
			{7 ,6 ,8 ,uv={{120,138},{124,138},{124,144},-1},f=3},
			{11,10,12,uv={{120,138},{124,138},{124,144},-1},f=3},
			{45,43,47,uv={{124,138},{124,136},{123,136},-1},f=3},
			{44,46,47,uv={{122,138},{123,138},{123,136},-1},f=3},
			{25,18,15,uv={{126,138},{128,138},{128,136},-1},f=2},
			{25,16,13,uv={{125,140},{125,140},{126,139},-1},f=2},
			{13,17,14,uv={{125,140},{125,140},{126,139},-1},f=2},
			{15,20,16,uv={{124,138},{124,139},{125,138},-1},f=2},
			{17,20,21,uv={{124,138},{124,139},{125,138},-1},f=2},
			{15,18,19,uv={{124,138},{124,139},{125,138},-1},f=2},
			{20,22,23,uv={{125,140},{125,140},{126,139},-1},f=2},
			{21,23,24,uv={{125,140},{125,140},{126,139},-1},f=2},
			{19,18,22,uv={{124,138},{124,139},{125,138},-1},f=2},
			{22,18,25,uv={{124,138},{124,139},{125,138},-1},f=2},
			{22,13,23,uv={{124,138},{124,139},{125,138},-1},f=2},
			{23,14,24,uv={{124,138},{124,139},{125,138},-1},f=2},
			{25,15,16,uv={{125,140},{125,140},{126,139},-1},f=2},
			{13,16,17,uv={{125,140},{125,140},{126,139},-1},f=2},
			{15,19,20,uv={{124,138},{124,139},{125,138},-1},f=2},
			{17,16,20,uv={{124,138},{124,139},{125,138},-1},f=2},
			{20,19,22,uv={{125,140},{125,140},{126,139},-1},f=2},
			{21,20,23,uv={{125,140},{125,140},{126,139},-1},f=2},
			{22,25,13,uv={{124,138},{124,139},{125,138},-1},f=2},
			{23,13,14,uv={{124,138},{124,139},{125,138},-1},f=2},
			{35,33,30,uv={{128,136},{124,140},{128,140},-1},f=3},
			{30,34,31,uv={{128,143},{124,140},{124,143},-1},f=3},
			{36,40,37,uv={{128,136},{124,140},{128,140},-1},f=3},
			{38,40,41,uv={{128,143},{124,140},{124,143},-1},f=3},
			{35,32,33,uv={{128,136},{124,136},{124,140},-1},f=3},
			{30,33,34,uv={{128,143},{128,140},{124,140},-1},f=3},
			{36,39,40,uv={{128,136},{124,136},{124,140},-1},f=3},
			{38,37,40,uv={{128,143},{128,140},{124,140},-1},f=3},
			{29,26,28,uv={{122,138},{120,136},{120,138},-1},f=2},
			{29,27,26,uv={{122,138},{122,136},{120,136},-1},f=2},
		},
		coll={{-12,0,-12,12,69,12}}
	},
	{ --Floor button (16)
		v={
			 {-32.4,4  ,-32.4},
			 {-36.9,0  ,-36.9},
			 {-32.4,4  ,32.4},
			 {-36.9,0  ,36.9},
			 {32.4,4  ,-32.4},
			 {36.9,0  ,-36.9},
			 {32.4,4  ,32.4},
			 {36.9,0  ,36.9},
			 {-33.3,5  ,-5.4},
			 {-36.9,2  ,-5.4},
			 {-33.3,5  ,5.4},
			 {-36.9,2  ,5.4},
			 {33.3,5  ,-5.4},
			 {36.9,2  ,-5.4},
			 {33.3,5  ,5.4},
			 {36.9,2  ,5.4},
		},
		f={ 
			 {2 ,3 ,1 ,uv={{32,248},{31,246},{31,248},-1},f=1},
			 {4 ,7 ,3 ,uv={{32,248},{31,246},{31,248},-1},f=1},
			 {8 ,5 ,7 ,uv={{31,248},{32,246},{31,248},-1},f=1},
			 {6 ,1 ,5 ,uv={{32,248},{31,246},{31,248},-1},f=1},
			 {7 ,1 ,3 ,uv={{31,247},{16,232},{16,247},-1},f=1},
			 {2 ,4 ,3 ,uv={{32,248},{32,246},{31,246},-1},f=1},
			 {4 ,8 ,7 ,uv={{32,248},{32,246},{31,246},-1},f=1},
			 {8 ,6 ,5 ,uv={{31,248},{32,246},{31,246},-1},f=1},
			 {6 ,2 ,1 ,uv={{32,248},{32,246},{31,246},-1},f=1},
			 {7 ,5 ,1 ,uv={{31,247},{31,232},{16,232},-1},f=1},
			 {10,11,9 ,uv={{16,248},{22,247},{16,247},-1},f=1},
			 {16,13,15,uv={{16,248},{22,247},{16,247},-1},f=1},
			 {10,12,11,uv={{16,248},{22,248},{22,247},-1},f=1},
			 {16,14,13,uv={{16,248},{22,248},{22,247},-1},f=1},
		},
		coll={}
	},
	{ --lift -X (17)
	v={
			{96   ,128 ,-96 },
			{96   ,0   ,0   },
			{96   ,0   ,-96 },
			{0    ,0   ,-96 },
			{96   ,0   ,96  },
			{0    ,0   ,96  },
			{-96  ,0   ,-96 },
			{0    ,0   ,0   },
			{-96  ,0   ,96  },
			{-96  ,0   ,0   },
			{-96  ,128 ,96  },
			{-96  ,0   ,47  },
			{-192 ,128 ,48  },
			{-192 ,128 ,-48 },
			{-192 ,0   ,-48 },
			{-192 ,0   ,48  },
			{96   ,128 ,0   },
			{96   ,128 ,96  },
			{0    ,128 ,-96 },
			{0    ,128 ,0   },
			{0    ,128 ,96  },
			{-96  ,128 ,0   },
			{-96  ,128 ,-96 },
			{-96  ,128 ,-48 },
			{-96  ,0   ,-48 },
			{-66  ,128 ,-96 },
			{-66  ,0   ,-96 },
			{-48  ,128 ,96  },
			{-48  ,0   ,96  },
			{-96  ,128 ,48  },
	},
	f={
		{19,3,4,uv={{48,0},{24,32},{48,32},-1},f=2},
		{18,6,5,uv={{48,0},{24,32},{48,32},-1},f=2},
		{23,4,7,uv={{48,0},{24,32},{48,32},-1},f=2},
		{21,9,6,uv={{48,0},{24,32},{48,32},-1},f=2},
		{24,27,25,uv={{48,0},{35,32},{48,32},-1},f=2},
		{28,12,29,uv={{40,0},{24,32},{40,32},-1},f=2},
		{19,1,3,uv={{48,0},{24,0},{24,32},-1},f=2},
		{18,21,6,uv={{48,0},{24,0},{24,32},-1},f=2},
		{23,19,4,uv={{48,0},{24,0},{24,32},-1},f=2},
		{21,11,9,uv={{48,0},{24,0},{24,32},-1},f=2},
		{24,26,27,uv={{48,0},{35,0},{35,32},-1},f=2},
		{28,30,12,uv={{40,0},{24,0},{24,32},-1},f=2},
		{8,3,2,uv={{120,120},{96,96},{96,120},-1},f=2},
		{6,2,5,uv={{120,120},{96,96},{96,120},-1},f=2},
		{10,4,8,uv={{120,120},{96,96},{96,120},-1},f=2},
		{9,8,6,uv={{120,120},{96,96},{96,120},-1},f=2},
		{16,25,12,uv={{120,120},{96,96},{96,120},-1},f=2},
		{30,16,12,uv={{72,96},{48,128},{72,128},-1},f=2},
		{17,21,18,uv={{96,120},{120,96},{96,96},-1},f=2},
		{1,20,17,uv={{96,120},{120,96},{96,96},-1},f=2},
		{22,21,20,uv={{120,120},{96,96},{96,120},-1},f=2},
		{19,22,20,uv={{96,120},{120,96},{96,96},-1},f=2},
		{14,30,24,uv={{120,120},{96,96},{96,120},-1},f=2},
		{8,4,3,uv={{120,120},{120,96},{96,96},-1},f=2},
		{6,8,2,uv={{120,120},{120,96},{96,96},-1},f=2},
		{10,7,4,uv={{120,120},{120,96},{96,96},-1},f=2},
		{9,10,8,uv={{120,120},{120,96},{96,96},-1},f=2},
		{16,15,25,uv={{120,120},{120,96},{96,96},-1},f=2},
		{30,13,16,uv={{72,96},{48,96},{48,128},-1},f=2},
		{17,20,21,uv={{96,120},{120,120},{120,96},-1},f=2},
		{1,19,20,uv={{96,120},{120,120},{120,96},-1},f=2},
		{22,11,21,uv={{120,120},{120,96},{96,96},-1},f=2},
		{19,23,22,uv={{96,120},{120,120},{120,96},-1},f=2},
		{14,13,30,uv={{120,120},{120,96},{96,96},-1},f=2},
		{16,14,15,uv={{72,128},{48,96},{48,128},-1},f=2},
		{14,25,15,uv={{72,96},{48,128},{72,128},-1},f=2},
		{30,25,12,uv={{96,96},{72,128},{96,128},-1},f=3},
		{16,13,14,uv={{72,128},{72,96},{48,96},-1},f=2},
		{14,24,25,uv={{72,96},{48,96},{48,128},-1},f=2},
		{30,24,25,uv={{96,96},{72,96},{72,128},-1},f=3},
	},
	coll={
		{-96,0  ,-96,96,0  ,96},
		{-96,128,-96,96,128,96},
		--
		{-96 ,0  ,-96, 96 ,128,-96},
		{-96 ,0  , 96, 96 ,128, 96},
		{-96 ,0  ,-96,-96 ,128,-48},
		{-96 ,0  , 48,-96 ,128, 96},
		{-192,0  ,-48,-96 ,0  , 48},
		{-192,128,-48,-96 ,128, 48},
		{-192,0  ,-48,-192,128, 48},
		{-192,0  ,-48,-96 ,128,-48},
		{-192,0  , 48,-96 ,128, 48}
	}
	},
	{ --lift +X (18)
	v={
			{-96,128 ,96},
			{-96,0   ,0},
			{-96,0   ,96},
			{0,0   ,96},
			{-96,0   ,-96},
			{0,0   ,-96},
			{96,0   ,96},
			{0,0   ,0},
			{96,0   ,-96},
			{96,0   ,0},
			{96,128 ,-96},
			{96,0   ,-47},
			{192,128 ,-48},
			{192,128 ,48},
			{192,0   ,48},
			{192,0   ,-48},
			{-96,128 ,0},
			{-96,128 ,-96},
			{0,128 ,96},
			{0,128 ,0},
			{0,128 ,-96},
			{96,128 ,0},
			{96,128 ,96},
			{96,128 ,48},
			{96,0   ,48},
			{66,128 ,96},
			{66,0   ,96},
			{48,128 ,-96},
			{48,0   ,-96},
			{96,128 ,-48},
	},
	f={
		{19,3,4,uv={{48,0},{24,32},{48,32},-1},f=2},
		{18,6,5,uv={{48,0},{24,32},{48,32},-1},f=2},
		{23,4,7,uv={{48,0},{24,32},{48,32},-1},f=2},
		{21,9,6,uv={{48,0},{24,32},{48,32},-1},f=2},
		{24,27,25,uv={{48,0},{35,32},{48,32},-1},f=2},
		{28,12,29,uv={{40,0},{24,32},{40,32},-1},f=2},
		{19,1,3,uv={{48,0},{24,0},{24,32},-1},f=2},
		{18,21,6,uv={{48,0},{24,0},{24,32},-1},f=2},
		{23,19,4,uv={{48,0},{24,0},{24,32},-1},f=2},
		{21,11,9,uv={{48,0},{24,0},{24,32},-1},f=2},
		{24,26,27,uv={{48,0},{35,0},{35,32},-1},f=2},
		{28,30,12,uv={{40,0},{24,0},{24,32},-1},f=2},
		{8,3,2,uv={{120,120},{96,96},{96,120},-1},f=2},
		{6,2,5,uv={{120,120},{96,96},{96,120},-1},f=2},
		{10,4,8,uv={{120,120},{96,96},{96,120},-1},f=2},
		{9,8,6,uv={{120,120},{96,96},{96,120},-1},f=2},
		{16,25,12,uv={{120,120},{96,96},{96,120},-1},f=2},
		{30,16,12,uv={{72,96},{48,128},{72,128},-1},f=2},
		{17,21,18,uv={{96,120},{120,96},{96,96},-1},f=2},
		{1,20,17,uv={{96,120},{120,96},{96,96},-1},f=2},
		{22,21,20,uv={{120,120},{96,96},{96,120},-1},f=2},
		{19,22,20,uv={{96,120},{120,96},{96,96},-1},f=2},
		{14,30,24,uv={{120,120},{96,96},{96,120},-1},f=2},
		{8,4,3,uv={{120,120},{120,96},{96,96},-1},f=2},
		{6,8,2,uv={{120,120},{120,96},{96,96},-1},f=2},
		{10,7,4,uv={{120,120},{120,96},{96,96},-1},f=2},
		{9,10,8,uv={{120,120},{120,96},{96,96},-1},f=2},
		{16,15,25,uv={{120,120},{120,96},{96,96},-1},f=2},
		{30,13,16,uv={{72,96},{48,96},{48,128},-1},f=2},
		{17,20,21,uv={{96,120},{120,120},{120,96},-1},f=2},
		{1,19,20,uv={{96,120},{120,120},{120,96},-1},f=2},
		{22,11,21,uv={{120,120},{120,96},{96,96},-1},f=2},
		{19,23,22,uv={{96,120},{120,120},{120,96},-1},f=2},
		{14,13,30,uv={{120,120},{120,96},{96,96},-1},f=2},
		{16,14,15,uv={{72,128},{48,96},{48,128},-1},f=2},
		{14,25,15,uv={{72,96},{48,128},{72,128},-1},f=2},
		{30,25,12,uv={{96,96},{72,128},{96,128},-1},f=3},
		{16,13,14,uv={{72,128},{72,96},{48,96},-1},f=2},
		{14,24,25,uv={{72,96},{48,96},{48,128},-1},f=2},
		{30,24,25,uv={{96,96},{72,96},{72,128},-1},f=3},
	},
	coll={
		{-96,0  ,-96,96,0  ,96},
		{-96,128,-96,96,128,96},
		--
		{-96 ,0  ,-96, 96 ,128,-96},
		{-96 ,0  , 96, 96 ,128, 96},
		{ 96 ,0  ,-96, 96 ,128,-48},
		{ 96 ,0  , 48, 96 ,128, 96},
		{ 96 ,0  ,-48, 192,0  , 48},
		{ 96 ,128,-48, 192,128, 48},
		{ 192,0  ,-48, 192,128, 48},
		{ 96 ,0  ,-48, 192,128,-48},
		{ 96 ,0  , 48, 192,128, 48}
	}
	},
	{ --lift -Z (19)
	v={
			{-96 ,128 ,-96},
			{0   ,0   ,-96},
			{-96 ,0   ,-96},
			{-96 ,0   ,0},
			{96  ,0   ,-96},
			{96  ,0   ,0},
			{-96 ,0   ,96},
			{0   ,0   ,0},
			{96  ,0   ,96},
			{0   ,0   ,96},
			{96  ,128 ,96},
			{47  ,0   ,96},
			{48  ,128 ,192},
			{-48 ,128 ,192},
			{-48 ,0   ,192},
			{48  ,0   ,192},
			{0   ,128 ,-96},
			{96  ,128 ,-96},
			{-96 ,128 ,0},
			{0   ,128 ,0},
			{96  ,128 ,0},
			{0   ,128 ,96},
			{-96 ,128 ,96},
			{-48 ,128 ,96},
			{-48 ,0   ,96},
			{-96 ,128 ,66},
			{-96 ,0   ,66},
			{96  ,128 ,48},
			{96  ,0   ,48},
			{48  ,128 ,96},
	},
	f={
		{19,3,4,uv={{48,0},{24,32},{48,32},-1},f=2},
		{18,6,5,uv={{48,0},{24,32},{48,32},-1},f=2},
		{23,4,7,uv={{48,0},{24,32},{48,32},-1},f=2},
		{21,9,6,uv={{48,0},{24,32},{48,32},-1},f=2},
		{24,27,25,uv={{48,0},{35,32},{48,32},-1},f=2},
		{28,12,29,uv={{40,0},{24,32},{40,32},-1},f=2},
		{19,1,3,uv={{48,0},{24,0},{24,32},-1},f=2},
		{18,21,6,uv={{48,0},{24,0},{24,32},-1},f=2},
		{23,19,4,uv={{48,0},{24,0},{24,32},-1},f=2},
		{21,11,9,uv={{48,0},{24,0},{24,32},-1},f=2},
		{24,26,27,uv={{48,0},{35,0},{35,32},-1},f=2},
		{28,30,12,uv={{40,0},{24,0},{24,32},-1},f=2},
		{8,3,2,uv={{120,120},{96,96},{96,120},-1},f=2},
		{6,2,5,uv={{120,120},{96,96},{96,120},-1},f=2},
		{10,4,8,uv={{120,120},{96,96},{96,120},-1},f=2},
		{9,8,6,uv={{120,120},{96,96},{96,120},-1},f=2},
		{16,25,12,uv={{120,120},{96,96},{96,120},-1},f=2},
		{30,16,12,uv={{72,96},{48,128},{72,128},-1},f=2},
		{17,21,18,uv={{96,120},{120,96},{96,96},-1},f=2},
		{1,20,17,uv={{96,120},{120,96},{96,96},-1},f=2},
		{22,21,20,uv={{120,120},{96,96},{96,120},-1},f=2},
		{19,22,20,uv={{96,120},{120,96},{96,96},-1},f=2},
		{14,30,24,uv={{120,120},{96,96},{96,120},-1},f=2},
		{8,4,3,uv={{120,120},{120,96},{96,96},-1},f=2},
		{6,8,2,uv={{120,120},{120,96},{96,96},-1},f=2},
		{10,7,4,uv={{120,120},{120,96},{96,96},-1},f=2},
		{9,10,8,uv={{120,120},{120,96},{96,96},-1},f=2},
		{16,15,25,uv={{120,120},{120,96},{96,96},-1},f=2},
		{30,13,16,uv={{72,96},{48,96},{48,128},-1},f=2},
		{17,20,21,uv={{96,120},{120,120},{120,96},-1},f=2},
		{1,19,20,uv={{96,120},{120,120},{120,96},-1},f=2},
		{22,11,21,uv={{120,120},{120,96},{96,96},-1},f=2},
		{19,23,22,uv={{96,120},{120,120},{120,96},-1},f=2},
		{14,13,30,uv={{120,120},{120,96},{96,96},-1},f=2},
		{16,14,15,uv={{72,128},{48,96},{48,128},-1},f=2},
		{14,25,15,uv={{72,96},{48,128},{72,128},-1},f=2},
		{30,25,12,uv={{96,96},{72,128},{96,128},-1},f=3},
		{16,13,14,uv={{72,128},{72,96},{48,96},-1},f=2},
		{14,24,25,uv={{72,96},{48,96},{48,128},-1},f=2},
		{30,24,25,uv={{96,96},{72,96},{72,128},-1},f=3},
	},
	coll={
		{-96,0  ,-96,96,0  ,96},
		{-96,128,-96,96,128,96},
		--
		{-96,0  ,-96 ,-96,128,96 },
		{ 96,0  ,-96 , 96,128,96 },
		{-96,0  , 96 ,-48,128,96 },
		{ 48,0  , 96 , 96,128,96 },
		{-48,0  , 96 , 48,0  ,192},
		{-48,128, 96 , 48,128,192},
		{-48,0  , 192, 48,128,192},
		{-48,0  , 96 ,-48,128,192},
		{ 48,0  , 96 , 48,128,192}
	}
	},
	{ --lift +Z (20)
	v={
			{96,128 ,96  },
			{0,0   ,96  },
			{96,0   ,96  },
			{96,0   ,0   },
			{-96,0   ,96  },
			{-96,0   ,0   },
			{96,0   ,-96 },
			{0,0   ,0   },
			{-96,0   ,-96 },
			{0,0   ,-96 },
			{-96,128 ,-96 },
			{-47,0   ,-96 },
			{-48,128 ,-192},
			{48,128 ,-192},
			{48,0   ,-192},
			{-48,0   ,-192},
			{0,128 ,96  },
			{-96,128 ,96  },
			{96,128 ,0   },
			{0,128 ,0   },
			{-96,128 ,0   },
			{0,128 ,-96 },
			{96,128 ,-96 },
			{48,128 ,-96 },
			{48,0   ,-96 },
			{96,128 ,-66 },
			{96,0   ,-66 },
			{-96,128 ,-48 },
			{-96,0   ,-48 },
			{-48,128 ,-96 },
	},
	f={
		{19,3,4,uv={{48,0},{24,32},{48,32},-1},f=2},
		{18,6,5,uv={{48,0},{24,32},{48,32},-1},f=2},
		{23,4,7,uv={{48,0},{24,32},{48,32},-1},f=2},
		{21,9,6,uv={{48,0},{24,32},{48,32},-1},f=2},
		{24,27,25,uv={{48,0},{35,32},{48,32},-1},f=2},
		{28,12,29,uv={{40,0},{24,32},{40,32},-1},f=2},
		{19,1,3,uv={{48,0},{24,0},{24,32},-1},f=2},
		{18,21,6,uv={{48,0},{24,0},{24,32},-1},f=2},
		{23,19,4,uv={{48,0},{24,0},{24,32},-1},f=2},
		{21,11,9,uv={{48,0},{24,0},{24,32},-1},f=2},
		{24,26,27,uv={{48,0},{35,0},{35,32},-1},f=2},
		{28,30,12,uv={{40,0},{24,0},{24,32},-1},f=2},
		{8,3,2,uv={{120,120},{96,96},{96,120},-1},f=2},
		{6,2,5,uv={{120,120},{96,96},{96,120},-1},f=2},
		{10,4,8,uv={{120,120},{96,96},{96,120},-1},f=2},
		{9,8,6,uv={{120,120},{96,96},{96,120},-1},f=2},
		{16,25,12,uv={{120,120},{96,96},{96,120},-1},f=2},
		{30,16,12,uv={{72,96},{48,128},{72,128},-1},f=2},
		{17,21,18,uv={{96,120},{120,96},{96,96},-1},f=2},
		{1,20,17,uv={{96,120},{120,96},{96,96},-1},f=2},
		{22,21,20,uv={{120,120},{96,96},{96,120},-1},f=2},
		{19,22,20,uv={{96,120},{120,96},{96,96},-1},f=2},
		{14,30,24,uv={{120,120},{96,96},{96,120},-1},f=2},
		{8,4,3,uv={{120,120},{120,96},{96,96},-1},f=2},
		{6,8,2,uv={{120,120},{120,96},{96,96},-1},f=2},
		{10,7,4,uv={{120,120},{120,96},{96,96},-1},f=2},
		{9,10,8,uv={{120,120},{120,96},{96,96},-1},f=2},
		{16,15,25,uv={{120,120},{120,96},{96,96},-1},f=2},
		{30,13,16,uv={{72,96},{48,96},{48,128},-1},f=2},
		{17,20,21,uv={{96,120},{120,120},{120,96},-1},f=2},
		{1,19,20,uv={{96,120},{120,120},{120,96},-1},f=2},
		{22,11,21,uv={{120,120},{120,96},{96,96},-1},f=2},
		{19,23,22,uv={{96,120},{120,120},{120,96},-1},f=2},
		{14,13,30,uv={{120,120},{120,96},{96,96},-1},f=2},
		{16,14,15,uv={{72,128},{48,96},{48,128},-1},f=2},
		{14,25,15,uv={{72,96},{48,128},{72,128},-1},f=2},
		{30,25,12,uv={{96,96},{72,128},{96,128},-1},f=3},
		{16,13,14,uv={{72,128},{72,96},{48,96},-1},f=2},
		{14,24,25,uv={{72,96},{48,96},{48,128},-1},f=2},
		{30,24,25,uv={{96,96},{72,96},{72,128},-1},f=3},
	},
	coll={
		{-96,0  ,-96,96,0  ,96},
		{-96,128,-96,96,128,96},
		--
		{-96,0  ,-96 ,-96,128, 96 },
		{ 96,0  ,-96 , 96,128, 96 },
		{-96,0  ,-96 ,-48,128,-96 },
		{ 48,0  ,-96 , 96,128,-96 },
		{-48,0  ,-192, 48,0  ,-96 },
		{-48,128,-192, 48,128,-96 },
		{-48,0  ,-192, 48,128,-192},
		{-48,0  ,-192,-48,128,-96 },
		{ 48,0  ,-192, 48,128,-96 }
	}
	},
	{ --display -X (21)
		v={
			 {0,60, 68},
			 {0,100,68},
			 {5,60, 68},
			 {5,100,68},
			 {0,60, 28},
			 {0,100,28},
			 {5,60, 28},
			 {5,100,28},
		},
		f={
			 {2,3,1,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {4,7,3,uv={{45,232},{32,245},{45,245},-1},f=2},
			 {8,5,7,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {7,1,3,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {4,6,8,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {2,4,3,uv={{45,246},{45,245},{32,245},-1},f=2},
			 {4,8,7,uv={{45,232},{32,232},{32,245},-1},f=2},
			 {8,6,5,uv={{45,246},{45,245},{32,245},-1},f=2},
			 {7,5,1,uv={{45,246},{45,245},{32,245},-1},f=2},
			 {4,2,6,uv={{45,246},{45,245},{32,245},-1},f=2},
		},
		coll={}
	},
	{ --display +X (22)
		v={
			 {96,60, 28},
			 {96,100,28},
			 {91,60, 28},
			 {91,100,28},
			 {96,60, 68},
			 {96,100,68},
			 {91,60, 68},
			 {91,100,68},
		},
		f={
			 {2,3,1,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {4,7,3,uv={{45,232},{32,245},{45,245},-1},f=2},
			 {8,5,7,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {7,1,3,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {4,6,8,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {2,4,3,uv={{45,246},{45,245},{32,245},-1},f=2},
			 {4,8,7,uv={{45,232},{32,232},{32,245},-1},f=2},
			 {8,6,5,uv={{45,246},{45,245},{32,245},-1},f=2},
			 {7,5,1,uv={{45,246},{45,245},{32,245},-1},f=2},
			 {4,2,6,uv={{45,246},{45,245},{32,245},-1},f=2},
		},
		coll={}
	},
	{ --display -Z (23)
		v={
			 {68,60, 96},
			 {68,100,96},
			 {68,60, 91},
			 {68,100,91},
			 {28,60, 96},
			 {28,100,96},
			 {28,60, 91},
			 {28,100,91},
		},
		f={
			 {2,3,1,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {4,7,3,uv={{45,232},{32,245},{45,245},-1},f=2},
			 {8,5,7,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {7,1,3,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {4,6,8,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {2,4,3,uv={{45,246},{45,245},{32,245},-1},f=2},
			 {4,8,7,uv={{45,232},{32,232},{32,245},-1},f=2},
			 {8,6,5,uv={{45,246},{45,245},{32,245},-1},f=2},
			 {7,5,1,uv={{45,246},{45,245},{32,245},-1},f=2},
			 {4,2,6,uv={{45,246},{45,245},{32,245},-1},f=2},
		},
		coll={}
	},
	{ --display +Z (24)
		v={
			 {28,60, 0},
			 {28,100,0},
			 {28,60, 5},
			 {28,100,5},
			 {68,60, 0},
			 {68,100,0},
			 {68,60, 5},
			 {68,100,5},
		},
		f={
			 {2,3,1,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {4,7,3,uv={{45,232},{32,245},{45,245},-1},f=2},
			 {8,5,7,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {7,1,3,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {4,6,8,uv={{45,246},{32,245},{32,246},-1},f=2},
			 {2,4,3,uv={{45,246},{45,245},{32,245},-1},f=2},
			 {4,8,7,uv={{45,232},{32,232},{32,245},-1},f=2},
			 {8,6,5,uv={{45,246},{45,245},{32,245},-1},f=2},
			 {7,5,1,uv={{45,246},{45,245},{32,245},-1},f=2},
			 {4,2,6,uv={{45,246},{45,245},{32,245},-1},f=2},
		},
		coll={}
	},
}

local s = { --sounds
	t1=0,
	n={0,0,0} --The exact position of the current track
}

local world_size={12,4,12}
world_size[4]=world_size[2]*world_size[3]
world_size[5]=world_size[1]*world_size[2]*world_size[3]
--world
local draw={
	objects={
		c={}, --cubes
		cd={}, --cube dispensers
		lb={}, --light bridges
		b={}, --buttons
		t={}, --turrets
		fb={}, --floor button
		l={}, --lifts
		d={}, --displays
	},
	world={v={},f={},sp={}}, --main world
	map={},
	pr={}, --particles
	pr_g={}, --particle generator (for a light bridge)
	lg={}--light bridge generators
}

--funcions
local addwall, addobj, respal, updpal, darkpal
local menu
--time
local t1=0 --The start time of the frame drawing
local t2=0 --The time for drawing the current frame
local t=0 -- Global timer (+1 for each code call)
local stt=0 --The timer of the start of the game
--mouse
local clp1,clp2
local mx, my, cl1, cl2, whl
local cid
local ins --is the curcos in the scene
--sprite editor
local function setpix(sx,sy,color)
	local id=sx//8+sy//8*16
	local adr=sx%8+sy%8*8
	poke4(0x8000+id*64+adr,color)
end

local function getpix(sx,sy)
	local id=sx//8+sy//8*16
	local adr=sx%8+sy%8*8
	return peek4(0x8000+id*64+adr)
end

--maps
local maps={}

--
local function sfx_(...)
	sfx(...)
end
local function addp(x,y,z,vx,vy,vz,lifetime,color) --add particle
	draw.pr[#draw.pr+1]={x=x,y=y,z=z,vx=vx,vy=vy,vz=vz,lt=lifetime,t=0,c=color}
end

--Texture cache

local b_f={} --Texture for the blue field
local p_t={{},{}} --portal texture
for y0=0,31 do
	b_f[y0]={}
	p_t[1][y0]={} --blue portal
	p_t[2][y0]={} --orange portal
	local c=false
	for x0=0,23 do
		local color1=getpix(x0+24,y0+32)
		local color2=getpix((x0+23)%24+24,y0+32)

		if color1~=15 then b_f[y0][3]=color1 c=true end
		if color1~=color2 then
			if color1==15 then b_f[y0][1]=x0 else b_f[y0][2]=x0 end
		end
		p_t[1][y0][x0]=getpix(96+x0,0 +y0)
		p_t[2][y0][x0]=getpix(0 +x0,32+y0)
	end

	b_f[y0].d=c
end

local l_b={} --Level board (a thing on which the current level is written)
for i=0,9 do
	l_b[i]={}
	for x=0,6 do
		l_b[i][x]={}
		for y=0,10 do
			local addr=0x8000+x+i*8+y*240
			l_b[i][x][y]=7
			if peek(addr)==255 then l_b[i][x][y]=1 end
		end
	end
end
--collision

local function coll(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4) --collision of two cubes
	return (x1 < x4 and x2 > x3 and y1 < y4 and y2 > y3 and z1 < z4 and z2 > z3)
end

local function min_abs(a, b)
	if abs(a) < abs(b) then return a else return b end
end

local function coll_shift(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4, axis)
	if not coll(x1, y1, z1, x2, y2, z2, x3, y3, z3, x4, y4, z4) then
		return 0
	end

	if axis == 1 then
		return min_abs(x3 - x2, x4 - x1)
	elseif axis == 2 then
		return min_abs(y3 - y2, y4 - y1)
	elseif axis == 3 then
		return min_abs(z3 - z2, z4 - z1)
	end
end

local function raycast_legacy(x1,y1,z1, x2,y2,z2, hitwalls,hitfloors, precise) -- walk along a segment, checking whether it collides with the walls
	-- convert to tile space
	x1, y1, z1, x2, y2, z2 = x1 / 96, y1 / 128, z1 / 96, x2 / 96, y2 / 128, z2 / 96
	-- DDA, loosely based on https://lodev.org/cgtutor/raycasting.html
	-- segment direction
	local dirx, diry, dirz = x2-x1, y2-y1, z2-z1
	-- length of one step along axes (only relative)
	-- n/0 = inf, which is fine for this algorithm
	local lx, ly, lz = abs(1 / dirx), abs(1 / diry), abs(1 / dirz)
	-- full tile step, matching direction with the segment
	local sx, sy, sz
	-- offset, for handling negative facing
	local ox, oy, oz
	-- current tile (offset if facing positive)
	local x, y, z = F(x1), F(y1), F(z1)
	-- distance to next tile in each axis
	local tx, ty, tz = (x1 - x) * lx, (y1 - y) * ly, (z1 - z) * lz
	if dirx < 0 then
		sx, ox = -1, 1
	else
		sx, ox = 1, 0
		tx = lx - tx
	end
	if diry < 0 then
		sy, oy = -1, 1
	else
		sy, oy = 1, 0
		ty = ly - ty
	end
	if dirz < 0 then
		sz, oz = -1, 1
	else
		sz, oz = 1, 0
		tz = lz - tz
	end

	if x < 0 or x > world_size[1] - 1 or
		y < 0 or y > world_size[2] - 1 or
		z < 0 or z > world_size[3] - 1 then
		return
	end

	while true do
		if tx < ty and tx < tz then
			x, tx = x + sx, tx + lx
			if (x + ox) * sx > x2 * sx or (x + ox) < 0 or (x + ox) > world_size[1] - 1 then
				return
			elseif hitwalls[draw.map[1][x + ox][y][z][2]] then
				if precise then
					local ratio = (x + ox - x1) / dirx
					return (x + ox) * 96, (y1 + diry * ratio) * 128, (z1 + dirz * ratio) * 96, 1
				else
					return x + ox, y, z, 1
				end
			elseif x < 0 then
				return
			end
		elseif ty < tz then
			y, ty = y + sy, ty + ly
			if (y + oy) * sy > y2 * sy or (y + oy) < 0 or (y + oy) > world_size[2] - 1 then
				return
			elseif hitfloors[draw.map[2][x][y + oy][z][2]] then
				if precise then
					local ratio = (y + oy - y1) / diry
					return (x1 + dirx * ratio) * 96, (y + oy) * 128, (z1 + dirz * ratio) * 96, 1
				else
					return x, y + oy, z, 2
				end
			elseif y < 0 then
				return
			end
		else
			z, tz = z + sz, tz + lz
			if (z + oz) * sz > z2 * sz or (z + oz) < 0 or (z + oz) > world_size[3] - 1 then
				return
			elseif hitwalls[draw.map[3][x][y][z + oz][2]] then
				if precise then
					local ratio = (z + oz - z1) / dirz
					return (x1 + dirx * ratio) * 96, (y1 + diry * ratio) * 128, (z + oz) * 96, 1
				else
					return x, y, z + oz, 3
				end
			elseif z < 0 then
				return
			end
		end
	end
end

local function get_tile(axis, x, y, z)
	local step = draw.map
	step = step[axis]
	step = step[x]
	if not step then return nil end
	step = step[y]
	if not step then return nil end
	step = step[z]
	return step
end

-- Calculate the difference between a value and the next step in a direction
local function to_next(val, interval, dir)
	if dir > 0 then
		return interval - val % interval
	else
		return (interval - val) % interval - interval
	end
end

-- Check if a ray hits an object's colliders
local function ray_object(x, y, z, rx, ry, rz, obj)
	local nearest = 1/0
	local colliders = obj.coll or model[obj.type].coll
	for _,collider in ipairs(colliders) do
		local cx1, cy1, cz1 =
			(obj.x + collider[1] - x) / rx, (obj.y + collider[2] - y) / ry, (obj.z + collider[3] - z) / rz
		local cx2, cy2, cz2 =
			(obj.x + collider[4] - x) / rx, (obj.y + collider[5] - y) / ry, (obj.z + collider[6] - z) / rz
		if cx1 > cx2 then cx1, cx2 = cx2, cx1 end
		if cy1 > cy2 then cy1, cy2 = cy2, cy1 end
		if cz1 > cz2 then cz1, cz2 = cz2, cz1 end
		local near, far = max(cx1, cy1, cz1), min(cx2, cy2, cz2)
		if near > 0 and near <= far and near < nearest then nearest = near end
	end
	if nearest ~= 1/0 then
		return nearest
	end
end

local function raycast(x, y, z, rx, ry, rz, len, params)
	-- normalised ray vector
	local dist = math.sqrt(rx^2 + ry^2 + rz^2)
	local nx, ny, nz = rx / dist, ry / dist, rz / dist
	local tilehit
	local newx, newy, newz, newrx, newrz

	-- allow passing an end point instead
	len = len or dist

	-- current scan coordinates and remaining length
	local cx, cy, cz = x, y, z
	local remaining_len = len

	while true do
		-- calculate the amount each component should step
		local sx, sy, sz = to_next(cx, 96, rx), to_next(cy, 128, ry), to_next(cz, 96, rz)
		-- calculate the distance travelled by each component step
		local lx, ly, lz = sx / nx, sy / ny, sz / nz
		-- select the smallest as the next step
		local lookup, axis
		if lx < ly and lx < lz then
			cx, cy, cz = cx + sx, cy + lx * ny, cz + lx * nz
			remaining_len = remaining_len - lx
			lookup, axis = params.walls, 1
		elseif ly < lz then
			cx, cy, cz = cx + ly * nx, cy + sy, cz + ly * nz
			remaining_len = remaining_len - ly
			lookup, axis = params.floors, 2
		else
			cx, cy, cz = cx + lz * nx, cy + lz * ny, cz + sz
			remaining_len = remaining_len - lz
			lookup, axis = params.walls, 3
		end
		-- stop if we've travelled far enough
		if len < 0 then break end
		-- fetch and check the current tile
		local tx, ty, tz = cx//96, cy//128, cz//96
		tile = get_tile(axis, tx, ty, tz)
		if not tile then break end
		-- Check for, and prepare to pass through portals (if enabled)
		if params.portals and draw.p[1] and draw.p[2] then
			local rot1 = draw.p[1][4] // 2 + (draw.p[1][5] - 1) * 2
			local rot2 = draw.p[2][4] // 2 + (draw.p[2][5] - 1) * 2
			local rotd1 = (2 + rot2 - rot1) % 4
			local rotd2 = (2 + rot1 - rot2) % 4
			if tile[2] == 5 then
				newx, newy, newz = teleport(1, cx, cy, cz)
				if     rotd1 == 0 then newrx,newrz=rx,rz
				elseif rotd1 == 1 then newrx,newrz=rz,-rx
				elseif rotd1 == 2 then newrx,newrz=-rx,-rz
				elseif rotd1 == 3 then newrx,newrz=-rz,rx
				end
				break
			end
			if tile[2] == 6 then
				newx, newy, newz = teleport(2, cx, cy, cz)
				if     rotd2 == 0 then newrx,newrz=rx,rz
				elseif rotd2 == 1 then newrx,newrz=rz,-rx
				elseif rotd2 == 2 then newrx,newrz=-rx,-rz
				elseif rotd2 == 3 then newrx,newrz=-rz,rx
				end
				break
			end
		end
		if lookup[tile[2]] then
			-- we hit a tile, break out of the loop and start testing objects
			tilehit = {
				x=cx, y=cy, z=cz, len=len - remaining_len,
				tx=tx, ty=ty, tz=tz,
				axis=axis, tile=tile
			}
			break
		end
	end
	-- scan through all objects, find nearest intersection
	local objhit
	for _,ty in ipairs(params.objs) do
		for _,obj in ipairs(draw.objects[ty]) do
			local hit_len = ray_object(x, y, z, rx, ry, rz, obj)
			if hit_len and hit_len * dist < len then
				if not objhit or objhit.len > hit_len * dist then
					objhit = {
						x=x+rx*hit_len, y=y+ry*hit_len, z=z+rz*hit_len, len=hit_len*dist,
						obj=obj,
					}
				end
			end
		end
	end
	-- same for player
	if params.player then
		hit_len = ray_object(x, y, z, rx, ry, rz, {
			x=plr.x, y=plr.y, z=plr.z,
			coll={{-16,-64,-16,16,16,16}},
		})
		if hit_len and hit_len * dist < len then
			if not objhit or objhit.len > hit_len * dist then
				objhit = {
					x=x+rx*hit_len, y=y+ry*hit_len, z=z+rz*hit_len, len=hit_len*dist,
					player=true,
				}
			end
		end
	end
	-- we entered a portal, resume the raycast at the other end
	if newx then
		local hit = raycast(newx, newy, newz, newrx, ry, newrz, remaining_len, params)
		if hit then
			hit.len = hit.len + len - remaining_len
		end
		return hit
	end
	-- return the shortest found intersection
	if not objhit or (tilehit and tilehit.len < objhit.len) then
		return tilehit
	else
		return objhit
	end
end

function unitic.update()
	--writing all polygons in unitic.poly
	unitic.poly = { v = {}, f = {}, sp = {} }
	unitic.obj  = {}
	unitic.p    = {}
	--world--
	for ind = 1, #draw.world.v do
		unitic.poly.v[ind] = {
			draw.world.v[ind][1],
			draw.world.v[ind][2],
			draw.world.v[ind][3]
		}
	end
	--faces
	for ind=1,#draw.world.f do
		unitic.poly.f[ind]={
			draw.world.f[ind][1],
			draw.world.f[ind][2],
			draw.world.f[ind][3],
			f=draw.world.f[ind].f,
			uv=draw.world.f[ind].uv,
			w=draw.world.f[ind].w
		} end
	--objects (1)--
	local i2=0
	for i=1,#draw.objects.c  do
		i2=i2+1 unitic.obj[i2]=draw.objects.c [i]
		if draw.objects.c[i].inp then
			i2=i2+1 unitic.obj[i2]={
				type = draw.objects.c[i].type,
				draw = draw.objects.c[i].draw,
				model= draw.objects.c[i].model,

				x = draw.objects.c[i].x1,
				y = draw.objects.c[i].y1,
				z = draw.objects.c[i].z1,
			
			}
		end
	end


	for i=1,#draw.objects.cd do i2=i2+1 unitic.obj[i2]=draw.objects.cd[i] end
	for i=1,#draw.objects.lb do i2=i2+1 unitic.obj[i2]=draw.objects.lb[i] end
	for i=1,#draw.objects.l  do i2=i2+1 unitic.obj[i2]=draw.objects.l [i] end
	for i=1,#draw.objects.b  do i2=i2+1 unitic.obj[i2]=draw.objects.b[i]  end
	for i=1,#draw.objects.t  do i2=i2+1 unitic.obj[i2]=draw.objects.t[i]  end
	for i=1,#draw.objects.fb do i2=i2+1 unitic.obj[i2]=draw.objects.fb[i] end
	for i=1,#draw.objects.d  do i2=i2+1 unitic.obj[i2]=draw.objects.d[i]  end
	--objects (2)--
	local i2=#unitic.poly.f

	for ind1 = 1, #unitic.obj do
		if unitic.obj[ind1].draw then
			local vt=#unitic.poly.v
			for ind2=1,#unitic.obj[ind1].model.v do
				local px=unitic.obj[ind1].model.v[ind2][1]+unitic.obj[ind1].x
				local py=unitic.obj[ind1].model.v[ind2][2]+unitic.obj[ind1].y
				local pz=unitic.obj[ind1].model.v[ind2][3]+unitic.obj[ind1].z
				unitic.poly.v[#unitic.poly.v+1]={px,py,pz}
			end
			for ind2=1,#unitic.obj[ind1].model.f do
				i2=i2+1
				unitic.poly.f[i2]={unitic.obj[ind1].model.f[ind2][1]+vt, unitic.obj[ind1].model.f[ind2][2]+vt, unitic.obj[ind1].model.f[ind2][3]+vt, f=unitic.obj[ind1].model.f[ind2].f,uv={x={unitic.obj[ind1].model.f[ind2].uv[1][1],unitic.obj[ind1].model.f[ind2].uv[2][1],unitic.obj[ind1].model.f[ind2].uv[3][1]},y={unitic.obj[ind1].model.f[ind2].uv[1][2],unitic.obj[ind1].model.f[ind2].uv[2][2],unitic.obj[ind1].model.f[ind2].uv[3][2]}}}
			end
		end
	end
	--rotate all polygons
	local txsin = math.sin(cam.tx)
	local txcos = math.cos(cam.tx)
	local tysin = math.sin(-cam.ty)
	local tycos = math.cos(-cam.ty)

	for ind = 1, #unitic.poly.v do
		if unitic.poly.v[4]~=false then -- true or nil
		local a1 = unitic.poly.v[ind][1] - cam.x
		local b1 = unitic.poly.v[ind][2] - cam.y
		local c1 = unitic.poly.v[ind][3] - cam.z

		local c2 = c1 * tycos - a1 * tysin

		local a3 = c1 * tysin + a1 * tycos
		local b3 = b1 * txcos - c2 * txsin
		local c3 = b1 * txsin + c2 * txcos
		local c4 = c3
		if c4>-0.001 then c4=-0.001 end
		local z0 = unitic.fov / c4 --this saves one division (very important optimization)

		local x0 = a3 * z0 + 120
		local y0 = b3 * z0 + 68

		unitic.poly.v[ind][1]=x0
		unitic.poly.v[ind][2]=y0
		unitic.poly.v[ind][3]=-c4
		unitic.poly.v[ind][4]=c3>0
		end
	end

	--particles
	for ind = 1, #draw.pr do
		local a1 = draw.pr[ind].x - cam.x
		local b1 = draw.pr[ind].y - cam.y
		local c1 = draw.pr[ind].z - cam.z

		local c2 = c1 * tycos - a1 * tysin

		local x0 = c1 * tysin + a1 * tycos
		local y0 = b1 * txcos - c2 * txsin
		local z0 = b1 * txsin + c2 * txcos

		local dist=math.sqrt(x0^2+y0^2+z0^2)

		local draw_p=false
		if z0<0 then draw_p=true end

		if z0>-0.001 then z0=-0.001 end

		local z1 = unitic.fov / z0 --this saves one division (very important optimization)

		local x1 = x0 * z1 + 120
		local y1 = y0 * z1 + 68

		unitic.p[ind]={x1, y1, -z0, draw_p, draw.pr[ind].c, dist}
	end
end

function unitic.update_pr() --update particles
	local i=0 if #draw.pr~=0 then
	repeat
		i=i+1

		draw.pr[i].x = draw.pr[i].x+draw.pr[i].vx
		draw.pr[i].y = draw.pr[i].y+draw.pr[i].vy
		draw.pr[i].z = draw.pr[i].z+draw.pr[i].vz

		draw.pr[i].t = draw.pr[i].t+1

		if draw.pr[i].t==draw.pr[i].lt then table.remove(draw.pr,i) i=i-1 end
	until i>=#draw.pr end
end

function unitic.draw()
	for i = 1, #unitic.poly.f do
		local poly = unitic.poly.f[i]

		local uv = poly.uv
		
		local p2d = {
			x = { unitic.poly.v[poly[1]][1], unitic.poly.v[poly[2]][1], unitic.poly.v[poly[3]][1] },
			y = { unitic.poly.v[poly[1]][2], unitic.poly.v[poly[2]][2], unitic.poly.v[poly[3]][2] }
		}

		--we discard those polygons that will not be visible
		if poly.f~=0
		and not (unitic.poly.v[poly[1]][4] and unitic.poly.v[poly[2]][4] and unitic.poly.v[poly[3]][4])
		and not (p2d.x[1]<0 and p2d.x[2]<0 and p2d.x[3]<0)
		and not (p2d.y[1]<0 and p2d.y[2]<0 and p2d.y[3]<0)
		and not (p2d.x[1]>239 and p2d.x[2]>239 and p2d.x[3]>239)
		and not (p2d.y[1]>135 and p2d.y[2]>135 and p2d.y[3]>135)
		then

			local tri_face
			if  poly.f~=3 then
				tri_face = (p2d.x[2] - p2d.x[1]) * (p2d.y[3] - p2d.y[1]) - (p2d.x[3] - p2d.x[1]) * (p2d.y[2] - p2d.y[1]) < 0
			end

			if not (tri_face and poly.f==1)
			and not (not tri_face and poly.f==2)
			then
				ttri(
					p2d.x[1], p2d.y[1],
					p2d.x[2], p2d.y[2],
					p2d.x[3], p2d.y[3],
					uv.x[1], uv.y[1],
					uv.x[2], uv.y[2],
					uv.x[3], uv.y[3], 0, 15,
					unitic.poly.v[poly[1]][3],
					unitic.poly.v[poly[2]][3],
					unitic.poly.v[poly[3]][3])
			end
			if poly.w[6] == menu.w.m_sel then
				line(p2d.x[1],p2d.y[1],p2d.x[2],p2d.y[2],13)
				line(p2d.x[2],p2d.y[2],p2d.x[3],p2d.y[3],13)
				line(p2d.x[3],p2d.y[3],p2d.x[1],p2d.y[1],13)
			elseif poly.w[6] == menu.w.sel then
				line(p2d.x[1],p2d.y[1],p2d.x[2],p2d.y[2],7)
				line(p2d.x[2],p2d.y[2],p2d.x[3],p2d.y[3],7)
				line(p2d.x[3],p2d.y[3],p2d.x[1],p2d.y[1],7)
			end
		end
	end

	if #unitic.p~=0 then
		for i = 1, #unitic.p do
			if unitic.p[i][4] then
				local p2d = {x=unitic.p[i][1],y=unitic.p[i][2]}

				local color = unitic.p[i][5]
				local color1= color % 4
				local color2= color //4
				local size = 1/unitic.p[i][6]*2.4*unitic.fov
				if color == 0 then size = 1 end
				local z0 = unitic.p[i][3]

				ttri(
					p2d.x-size,p2d.y-size,
					p2d.x-size,p2d.y+size,
					p2d.x+size,p2d.y+size,
					24 + color1*2,248 + color2*2,
					24 + color1*2,249 + color2*2,
					25 + color1*2,248 + color2*2,
					0,-1,z0,z0,z0)
				ttri(
					p2d.x+size,p2d.y-size,
					p2d.x-size,p2d.y-size,
					p2d.x+size,p2d.y+size,
					24 + color1*2,248 + color2*2,
					24 + color1*2,249 + color2*2,
					25 + color1*2,248 + color2*2,
					0,-1,z0,z0,z0)
			end
		end
	end
end

local wall_coll={[1]=true,[2]=true,[3]=true,[4]=true,[8]=true,[9]=true,[10]=true,[13]=true,[14]=true,[16]=true,[17]=true,[18]=true}

function unitic.player_collision()
	local colx = false
	local coly = false
	local colz = false

	local function plr_collide(x1,y1,z1,x2,y2,z2)
		local ti=false
		if not coll(lx - 16, ly - 64, lz - 16, lx + 16, ly + 16, lz + 16, x1,y1,z1, x2,y2,z2) then
			if coll(plr.x - 16, ly - 64, lz - 16, plr.x + 16, ly + 16, lz + 16, x1,y1,z1, x2,y2,z2) then ti = true colx=true end
			if coll(lx - 16, plr.y - 64, lz - 16, lx + 16, plr.y + 16, lz + 16, x1,y1,z1, x2,y2,z2) then ti = true coly=true end
			if coll(lx - 16, ly - 64, plr.z - 16, lx + 16, ly + 16, plr.z + 16, x1,y1,z1, x2,y2,z2) then ti = true colz=true end
			if not ti and coll(plr.x - 16, plr.y - 64, plr.z - 16, plr.x + 16, plr.y + 16, plr.z + 16, x1,y1,z1, x2,y2,z2) then
				if y1~=y2 and z1~=z2 then colx=true end
				if x1~=x2 and z1~=z2 then coly=true end
				if x1~=x2 and y1~=y2 then colz=true end
			end
		end
	end

	local function obj_collide(id,x,y,z)
		if #model[id].coll==0 then return end
		for i=1,#model[id].coll do
			local col1=model[id].coll[i]
			plr_collide(x+col1[1],y+col1[2],z+col1[3], x+col1[4],y+col1[5],z+col1[6])
		end
	end

	local x1=max((plr.x-17)//96,0)
	local y1=max((plr.y-65)//128,0)
	local z1=max((plr.z-17)//96,0)

	local x2=min((plr.x+16)//96,world_size[1]-1)
	local y2=min((plr.y+16)//128,world_size[2]-1)
	local z2=min((plr.z+16)//96,world_size[3]-1)

	for x0 = x1,x2 do for y0 = y1,y2 do for z0 = z1,z2 do
		if wall_coll[draw.map[1][x0][y0][z0][2]] then
			plr_collide(x0 * 96, y0 * 128 + 2, z0 * 96 + 2, x0 * 96, y0 * 128 + 126, z0 * 96 + 94)
		elseif draw.map[1][x0][y0][z0][2]==5 or draw.map[1][x0][y0][z0][2]==6 then
			if not draw.p[1] or not draw.p[2] then
				plr_collide(x0 * 96, y0 * 128 + 2, z0 * 96 + 2, x0 * 96, y0 * 128 + 126, z0 * 96 + 94)
			else
				if coll(plr.x - 16, ly - 64, lz - 16, plr.x + 16, ly + 16, lz + 16, x0 * 96, y0 * 128 + 2, z0 * 96 + 2, x0 * 96, y0 * 128 + 126, z0 * 96 + 2)
				or coll(plr.x - 16, ly - 64, lz - 16, plr.x + 16, ly + 16, lz + 16, x0 * 96, y0 * 128 + 2, z0 * 96 + 94, x0 * 96, y0 * 128 + 126, z0 * 96 + 94)
				or coll(plr.x - 16, ly - 64, lz - 16, plr.x + 16, ly + 16, lz + 16, x0 * 96, y0 * 128 + 126, z0 * 96 + 2, x0 * 96, y0 * 128 + 126, z0 * 96 + 94) then colx = true end

				if coll(lx - 16, plr.y - 64, lz - 16, lx + 16, plr.y + 16, lz + 16, x0 * 96, y0 * 128 + 2, z0 * 96 + 2, x0 * 96, y0 * 128 + 126, z0 * 96 + 2)
				or coll(lx - 16, plr.y - 64, lz - 16, lx + 16, plr.y + 16, lz + 16, x0 * 96, y0 * 128 + 2, z0 * 96 + 94, x0 * 96, y0 * 128 + 126, z0 * 96 + 94)
				or coll(lx - 16, plr.y - 64, lz - 16, lx + 16, plr.y + 16, lz + 16, x0 * 96, y0 * 128 + 126, z0 * 96 + 2, x0 * 96, y0 * 128 + 126, z0 * 96 + 94) then coly = true end

				if coll(lx - 16, ly - 64, plr.z - 16, lx + 16, ly + 16, plr.z + 16, x0 * 96, y0 * 128 + 2, z0 * 96 + 2, x0 * 96, y0 * 128 + 126, z0 * 96 + 2)
				or coll(lx - 16, ly - 64, plr.z - 16, lx + 16, ly + 16, plr.z + 16, x0 * 96, y0 * 128 + 2, z0 * 96 + 94, x0 * 96, y0 * 128 + 126, z0 * 96 + 94)
				or coll(lx - 16, ly - 64, plr.z - 16, lx + 16, ly + 16, plr.z + 16, x0 * 96, y0 * 128 + 126, z0 * 96 + 2, x0 * 96, y0 * 128 + 126, z0 * 96 + 94) then colz = true end
			end
		elseif draw.map[1][x0][y0][z0][2]==11 then
			plr_collide(x0 * 96, y0 * 128 + 2, z0 * 96 + 62, x0 * 96, y0 * 128 + 126, z0 * 96 + 94)
		elseif draw.map[1][x0][y0][z0][2]==12 then
			plr_collide(x0 * 96, y0 * 128 + 2, z0 * 96 + 2, x0 * 96, y0 * 128 + 126, z0 * 96 + 34)
		elseif draw.map[1][x0][y0][z0][2]==7 then
			if coll(lx - 16, ly - 64, lz - 16, lx + 16, ly + 16, lz + 16, x0 * 96, y0 * 128 + 2, z0 * 96 + 2, x0 * 96, y0 * 128 + 126, z0 * 96 + 94) then plr.cd2=10 end
		elseif draw.map[1][x0][y0][z0][2]==15 then
			if coll(lx - 16, ly - 64, lz - 16, lx + 16, ly + 16, lz + 16, x0 * 96, y0 * 128 + 2, z0 * 96 + 2, x0 * 96, y0 * 128 + 126, z0 * 96 + 94) then plr.hp=0 sfx_(2,"C-3",-1,1) end
		end

		if draw.map[2][x0][y0][z0][2] > 0 and draw.map[2][x0][y0][z0][2]~=5 and draw.map[2][x0][y0][z0][2]~=8 and draw.map[2][x0][y0][z0][2]~=9 then
			plr_collide(x0 * 96 + 2, y0 * 128, z0 * 96 + 2, x0 * 96 + 94, y0 * 128, z0 * 96 + 94)
		elseif draw.map[2][x0][y0][z0][2]==5 then
			if coll(lx - 16, ly - 64, lz - 16, lx + 16, ly + 16, lz + 16, x0 * 96 + 2, y0 * 128, z0 * 96 + 2, x0 * 96 + 94, y0 * 128, z0 * 96 + 94) then plr.hp=0 sfx_(2,"C-3",-1,1) end
		elseif draw.map[2][x0][y0][z0][2]==8 or draw.map[2][x0][y0][z0][2]==9 then
			if coll(lx - 16, ly - 64, lz - 16, lx + 16, ly + 16, lz + 16, x0 * 96 + 2, y0 * 128, z0 * 96 + 2, x0 * 96 + 94, y0 * 128, z0 * 96 + 94) then plr.vy=12 sfx_(0,"C-6",-1,1) end
		end

		if wall_coll[draw.map[3][x0][y0][z0][2]] then
			plr_collide(x0 * 96 + 2, y0 * 128 + 2, z0 * 96, x0 * 96 + 94, y0 * 128 + 126, z0 * 96)
		elseif draw.map[3][x0][y0][z0][2]==5 or draw.map[3][x0][y0][z0][2]==6 then
			if not draw.p[1] or not draw.p[2] then
				plr_collide(x0 * 96, y0 * 128, z0 * 96, x0 * 96 + 96, y0 * 128 + 128, z0 * 96)
			else
				if coll(plr.x - 16, ly - 64, lz - 16, plr.x + 16, ly + 16, lz + 16, x0 * 96 + 2, y0 * 128 + 2, z0 * 96, x0 * 96 + 2, y0 * 128 + 126, z0 * 96)
				or coll(plr.x - 16, ly - 64, lz - 16, plr.x + 16, ly + 16, lz + 16, x0 * 96 + 94, y0 * 128 + 2, z0 * 96, x0 * 96 + 94, y0 * 128 + 126, z0 * 96)
				or coll(plr.x - 16, ly - 64, lz - 16, plr.x + 16, ly + 16, lz + 16, x0 * 96 + 2, y0 * 128 + 126, z0 * 96, x0 * 96 + 94, y0 * 128 + 126, z0 * 96) then colx = true end

				if coll(lx - 16, plr.y - 64, lz - 16, lx + 16, plr.y + 16, lz + 16, x0 * 96 + 2, y0 * 128 + 2, z0 * 96, x0 * 96 + 2, y0 * 128 + 126, z0 * 96)
				or coll(lx - 16, plr.y - 64, lz - 16, lx + 16, plr.y + 16, lz + 16, x0 * 96 + 94, y0 * 128 + 2, z0 * 96, x0 * 96 + 94, y0 * 128 + 126, z0 * 96)
				or coll(lx - 16, plr.y - 64, lz - 16, lx + 16, plr.y + 16, lz + 16, x0 * 96 + 2, y0 * 128 + 126, z0 * 96, x0 * 96 + 94, y0 * 128 + 126, z0 * 96) then coly = true end

				if coll(lx - 16, ly - 64, plr.z - 16, lx + 16, ly + 16, plr.z + 16, x0 * 96 + 2, y0 * 128 + 2, z0 * 96, x0 * 96 + 2, y0 * 128 + 126, z0 * 96)
				or coll(lx - 16, ly - 64, plr.z - 16, lx + 16, ly + 16, plr.z + 16, x0 * 96 + 94, y0 * 128 + 2, z0 * 96, x0 * 96 + 94, y0 * 128 + 126, z0 * 96)
				or coll(lx - 16, ly - 64, plr.z - 16, lx + 16, ly + 16, plr.z + 16, x0 * 96 + 2, y0 * 128 + 126, z0 * 96, x0 * 96 + 94, y0 * 128 + 126, z0 * 96) then colz = true end
			end
		elseif draw.map[3][x0][y0][z0][2]==7 then
			if coll(lx - 16, ly - 64, lz - 16, lx + 16, ly + 16, lz + 16, x0 * 96 + 2, y0 * 128 + 2, z0 * 96, x0 * 96 + 94, y0 * 128 + 126, z0 * 96) then plr.cd2=10 end
		elseif draw.map[3][x0][y0][z0][2]==11 then
			plr_collide(x0 * 96 + 62, y0 * 128 + 2, z0 * 96, x0 * 96 + 94, y0 * 128 + 126, z0 * 96)
		elseif draw.map[3][x0][y0][z0][2]==12 then
			plr_collide(x0 * 96 + 2, y0 * 128 + 2, z0 * 96, x0 * 96 + 34, y0 * 128 + 126, z0 * 96)
		elseif draw.map[3][x0][y0][z0][2]==15 then
			if coll(lx - 16, ly - 64, lz - 16, lx + 16, ly + 16, lz + 16, x0 * 96 + 2, y0 * 128 + 2, z0 * 96, x0 * 96 + 94, y0 * 128 + 126, z0 * 96) then plr.hp=0 sfx_(2,"C-3",-1,1) end
		end
	end end end
	--collision with objects
	for i=1,#draw.objects.c do
		local x0=draw.objects.c[i].x
		local y0=draw.objects.c[i].y
		local z0=draw.objects.c[i].z
		obj_collide(1, x0, y0, z0)
		if draw.objects.c[i].held and coll(lx - 16, ly - 64, lz - 16, lx + 16, ly + 16, lz + 16, x0 - 24, y0 + 24, z0 - 24, x0 + 24, y0 + 24.1, z0 + 24) then draw.objects.c[i].held=false plr.holding=false end
		if draw.objects.c[i].inp then
			local x0=draw.objects.c[i].x1
			local y0=draw.objects.c[i].y1
			local z0=draw.objects.c[i].z1
			obj_collide(1, x0, y0, z0)
		end
	end

	local object_types = {"cd", "lb", "b", "t", "l"}
	for _,type in ipairs(object_types) do
		for _,obj in ipairs(draw.objects[type]) do
			local x0, y0, z0 = obj.x, obj.y, obj.z
			obj_collide(obj.type, x0, y0, z0)
		end
	end

	if plr.noclip then return end
	if colx then plr.x = lx end
	if coly then plr.y = ly end
	if colz then plr.z = lz end
	plr.xy=coly
end

function unitic.cube_update() --all physics related to cubes
	-- dispensers
	for i=1,#draw.objects.cd do
		draw.objects.cd[i].t=draw.objects.cd[i].t-1
		if draw.objects.cd[i].t==1 then
			addobj(draw.objects.cd[i].x,draw.objects.cd[i].y,draw.objects.cd[i].z,draw.objects.cd[i].ct,i)
		end
	end
	--cubes
	local i=0
	if #draw.objects.c==0 then return end

	repeat
		i=i+1

		local clx=draw.objects.c[i].x
		local cly=draw.objects.c[i].y
		local clz=draw.objects.c[i].z

		local cx=draw.objects.c[i].x
		local cy=draw.objects.c[i].y
		local cz=draw.objects.c[i].z

		cx=cx + draw.objects.c[i].vx
		cy=cy + draw.objects.c[i].vy
		cz=cz + draw.objects.c[i].vz

		draw.objects.c[i].vx=draw.objects.c[i].vx*0.9
		draw.objects.c[i].vy=draw.objects.c[i].vy-0.5
		draw.objects.c[i].vz=draw.objects.c[i].vz*0.9

		if     draw.objects.c[i].vx<-20 then draw.objects.c[i].vx=-20
		elseif draw.objects.c[i].vx> 20 then draw.objects.c[i].vx= 20 end
		
		if     draw.objects.c[i].vy<-20 then draw.objects.c[i].vy=-20
		elseif draw.objects.c[i].vy> 20 then draw.objects.c[i].vy= 20 end
		
		if     draw.objects.c[i].vz<-20 then draw.objects.c[i].vz=-20
		elseif draw.objects.c[i].vz> 20 then draw.objects.c[i].vz= 20 end


		
		local bf = false --is the cube in the blue field

		local x1=(cx-25)//96
		local y1=(cy-25)//128
		local z1=(cz-25)//96

		if x1<0 then x1 = 0 end
		if y1<0 then y1 = 0 end
		if z1<0 then z1 = 0 end

		local x2=(cx+25)//96
		local y2=(cy+25)//128
		local z2=(cz+25)//96

		if x2>world_size[1]-1 then x2 = world_size[1]-1 end
		if y2>world_size[2]-1 then y2 = world_size[2]-1 end
		if z2>world_size[3]-1 then z2 = world_size[3]-1 end

		local function collide(x3, y3, z3, x4, y4, z4)
			-- try moving the current amount in each axis, partially cancelling if needed
			if not coll(cx - 24, cy - 24, cz - 24, cx + 24, cy + 24, cz + 24, x3, y3, z3, x4, y4, z4) then return end

			local sx = coll_shift(
				cx - 24, cly - 24, clz - 24, cx + 24, cly + 24, clz + 24,
				x3, y3, z3, x4, y4, z4, 1
			)
			if sx ~= 0 then draw.objects.c[i].vx = 0 end
			cx = cx + sx
			local sy = coll_shift(
				clx - 24, cy - 24, clz - 24, clx + 24, cy + 24, clz + 24,
				x3, y3, z3, x4, y4, z4, 2
			)
			if sy ~= 0 then draw.objects.c[i].vy = 0 end
			cy = cy + sy
			local sz = coll_shift(
				clx - 24, cly - 24, cz - 24, clx + 24, cly + 24, cz + 24,
				x3, y3, z3, x4, y4, z4, 3
			)
			if sz ~= 0 then draw.objects.c[i].vz = 0 end
			cz = cz + sz
		end

		local function obj_collide(id,x,y,z)
			if #model[id].coll==0 then return end
			for i=1,#model[id].coll do
				local col1=model[id].coll[i]
				collide(x+col1[1],y+col1[2],z+col1[3], x+col1[4],y+col1[5],z+col1[6])
			end
		end

		for x0 = x1,x2 do for y0 = y1,y2 do for z0 = z1,z2 do
			if wall_coll[draw.map[1][x0][y0][z0][2]] then
				collide(x0 * 96, y0 * 128 + 2, z0 * 96 + 2, x0 * 96, y0 * 128 + 126, z0 * 96 + 94)
			elseif draw.map[1][x0][y0][z0][2]==5 or draw.map[1][x0][y0][z0][2]==6 then
				if not draw.p[1] or not draw.p[2] then
					collide(x0 * 96, y0 * 128 + 2, z0 * 96 + 2, x0 * 96, y0 * 128 + 126, z0 * 96 + 94)
				else
					collide(x0 * 96, y0 * 128 + 2, z0 * 96 + 2, x0 * 96, y0 * 128 + 126, z0 * 96 + 2)
					collide(x0 * 96, y0 * 128 + 2, z0 * 96 + 94, x0 * 96, y0 * 128 + 126, z0 * 96 + 94)
					collide(x0 * 96, y0 * 128 + 126, z0 * 96 + 2, x0 * 96, y0 * 128 + 126, z0 * 96 + 94)
				end
			elseif draw.map[1][x0][y0][z0][2]==7 then
				if coll(clx - 24,  cly - 24, clz - 24, clx + 24,  cy + 24, clz + 24, x0 * 96, y0 * 128 + 2, z0 * 96 + 2, x0 * 96, y0 * 128 + 126, z0 * 96 + 94) then bf = true end		
			elseif draw.map[1][x0][y0][z0][2]==11 then
				collide(x0 * 96, y0 * 128 + 2, z0 * 96 + 62, x0 * 96, y0 * 128 + 126, z0 * 96 + 94)
			elseif draw.map[1][x0][y0][z0][2]==12 then
				collide(x0 * 96, y0 * 128 + 2, z0 * 96 + 2, x0 * 96, y0 * 128 + 126, z0 * 96 + 34)
			end

			if draw.map[2][x0][y0][z0][2] > 0 and draw.map[2][x0][y0][z0][2]~=5 and draw.map[2][x0][y0][z0][2]~=8 and draw.map[2][x0][y0][z0][2]~=9 then
				collide(x0 * 96 + 2, y0 * 128, z0 * 96 + 2, x0 * 96 + 94, y0 * 128, z0 * 96 + 94)
			elseif draw.map[2][x0][y0][z0][2]==8 or draw.map[2][x0][y0][z0][2]==9 then
				if coll(clx - 24, cly - 24, clz - 24, clx + 24, cly + 24, clz + 24, x0 * 96 + 2, y0 * 128, z0 * 96 + 2, x0 * 96 + 94, y0 * 128, z0 * 96 + 94) then draw.objects.c[i].vy=12 sfx_(0,"C-6",-1,1) end
			end

			if wall_coll[draw.map[3][x0][y0][z0][2]] then
				collide(x0 * 96 + 2, y0 * 128 + 2, z0 * 96, x0 * 96 + 94, y0 * 128 + 126, z0 * 96)
			elseif draw.map[3][x0][y0][z0][2]==5 or draw.map[3][x0][y0][z0][2]==6 then
				if not draw.p[1] or not draw.p[2] then
					collide(x0 * 96 + 2, y0 * 128 + 2, z0 * 96, x0 * 96 + 94, y0 * 128 + 126, z0 * 96)
				else
					collide(x0 * 96 + 2, y0 * 128 + 2, z0 * 96, x0 * 96 + 2, y0 * 128 + 126, z0 * 96)
					collide(x0 * 96 + 94, y0 * 128 + 2, z0 * 96, x0 * 96 + 94, y0 * 128 + 126, z0 * 96)
					collide(x0 * 96 + 2, y0 * 128 + 126, z0 * 96, x0 * 96 + 94, y0 * 128 + 126, z0 * 96)
				end
			elseif draw.map[3][x0][y0][z0][2]==7 then
				if coll(clx - 24, cly - 24, clz - 24, clx + 24, cly + 24, clz + 24, x0 * 96 + 2, y0 * 128 + 2, z0 * 96, x0 * 96 + 94, y0 * 128 + 126, z0 * 96) then bf=true end
			elseif draw.map[3][x0][y0][z0][2]==11 then
				collide(x0 * 96 + 62, y0 * 128 + 2, z0 * 96, x0 * 96 + 94, y0 * 128 + 126, z0 * 96)
			elseif draw.map[3][x0][y0][z0][2]==12 then
				collide(x0 * 96 + 2, y0 * 128 + 2, z0 * 96, x0 * 96 + 34, y0 * 128 + 126, z0 * 96)
			end

		end end end
		--collision with the player
		if not plr.noclip then --Correct the mystical disappearance of cubes when span through them
			local x0=plr.x
			local y0=plr.y
			local z0=plr.z
			collide(x0 - 16, y0 - 64, z0 - 16, x0 + 16, y0 + 16, z0 + 16)
		end

		--collision with objects
		for i2=1,#draw.objects.c do
			if i2~=i then
				local x0=draw.objects.c[i2].x
				local y0=draw.objects.c[i2].y
				local z0=draw.objects.c[i2].z
				obj_collide(1, x0, y0, z0)
				if draw.objects.c[i2].inp and draw.p[1] and draw.p[2] then
					x0=draw.objects.c[i].x1
					y0=draw.objects.c[i].y1
					z0=draw.objects.c[i].z1
					obj_collide(1, x0, y0, z0)
				end
			end
		end

		-- cube special cases

		for i2=1,#draw.objects.lb do
			local x0=draw.objects.lb[i2].x
			local y0=draw.objects.lb[i2].y+5 -- <--
			local z0=draw.objects.lb[i2].z
			obj_collide(draw.objects.lb[i].type , x0, y0, z0)
		end

		for i2=1,#draw.objects.fb do --exception for cubes
			local x0=draw.objects.fb[i2].x
			local y0=draw.objects.fb[i2].y
			local z0=draw.objects.fb[i2].z
			collide(x0 - 37, y0, z0 - 37, x0 + 37, y0 + 7, z0 + 37)
		end

		local object_types = {"b", "t", "l"}
		for _,type in ipairs(object_types) do
			for _,obj in ipairs(draw.objects[type]) do
				local x0, y0, z0 = obj.x, obj.y, obj.z
				obj_collide(obj.type, x0, y0, z0)
			end
		end

		--
		draw.objects.c[i].x = cx
		draw.objects.c[i].y = cy
		draw.objects.c[i].z = cz
		--
		if bf or draw.objects.c[i].y<-200 then
			sfx_(2)
			--particles
			for i2=1,80 do
				addp(cx-24       ,cy+R(-24,24),cz+R(-24,24),R()*2-1,R()*2-1,R()*2-1,R(30,60),1)
				addp(cx+24       ,cy+R(-24,24),cz+R(-24,24),R()*2-1,R()*2-1,R()*2-1,R(30,60),1)
				addp(cx+R(-24,24),cy-24       ,cz+R(-24,24),R()*2-1,R()*2-1,R()*2-1,R(30,60),1)
				addp(cx+R(-24,24),cy+24       ,cz+R(-24,24),R()*2-1,R()*2-1,R()*2-1,R(30,60),1)
				addp(cx+R(-24,24),cy+R(-24,24),cz-24       ,R()*2-1,R()*2-1,R()*2-1,R(30,60),1)
				addp(cx+R(-24,24),cy+R(-24,24),cz+24       ,R()*2-1,R()*2-1,R()*2-1,R(30,60),1)
			end
			--
			local i2=draw.objects.c[i].disp
			draw.objects.cd[i2].t=60
			draw.objects.cd[i2].ct=draw.objects.c[i].type
			--
			table.remove(draw.objects.c,i)
			i=i-1
		end
		--
	until i>=#draw.objects.c
end

function unitic.render() -------- 
	--dynamic textures
	for x0=0,15 do --light bridge
		for y0=0,11 do setpix(x0,y0+234,15) end
		local y0=(math.sin((-t%30+x0*2)/5)+1)*6
		local y1=(math.cos((-t%30+x0*2)/5)+1)*6
		local y2=(math.sin(t/20)+1)*6
		setpix(x0,F(y0)+234,11)
		setpix(x0,F(y1)+234,10)
		setpix(x0,F(y2)+234,11)
	end
	--blue / red field
	for y0=0,31,2 do
		if b_f[y0].d then
			setpix((b_f[y0][1]+t//2)%24+24,y0+32,b_f[y0][3])
			setpix((b_f[y0][2]+t//2)%24+24,y0+32,15)
			--red field
			setpix((b_f[y0][1]+t//2)%24+96,y0+64,b_f[y0][3]-2)
			setpix((b_f[y0][2]+t//2)%24+96,y0+64,15)

			setpix((b_f[y0][1]+t//2)%24+96,y0+152,b_f[y0][3]-2)
			setpix((b_f[y0][2]+t//2)%24+96,y0+152,15)
		end
		if b_f[y0+1].d then
			setpix((b_f[y0+1][1]+t//2*23)%24+24,y0+33,15)
			setpix((b_f[y0+1][2]+t//2*23)%24+24,y0+33,b_f[y0+1][3])
			--red field
			setpix((b_f[y0+1][1]+t//2*23)%24+96,y0+65,15)
			setpix((b_f[y0+1][2]+t//2*23)%24+96,y0+65,b_f[y0+1][3]-2)

			setpix((b_f[y0+1][1]+t//2*23)%24+96,y0+153,15)
			setpix((b_f[y0+1][2]+t//2*23)%24+96,y0+153,b_f[y0+1][3]-2)
		end
	end
	--particles
	for i=1,#draw.pr_g do
		local  x=draw.pr_g[i][1]*96
		local  y=draw.pr_g[i][2]*128+4
		local  z=draw.pr_g[i][3]*96
		local vx=draw.pr_g[i][4]
		local vz=draw.pr_g[i][5]
		for i=0,15 do
			if     vx==-1 then addp(x+96,y,z+i*6, R(1,4),R(-2,2), R(-2,2),R(2,10),R(10,11))
			elseif vx==1  then addp(x   ,y,z+i*6,-R(1,4),R(-2,2), R(-2,2),R(2,10),R(10,11))
			elseif vz==-1 then addp(x+i*6,y,z+96, R(-2,2),R(-2,2), R(1,4),R(2,10),R(10,11))
			elseif vz==1  then addp(x+i*6,y,z   , R(-2,2),R(-2,2),-R(1,4),R(2,10),R(10,11))
			end
		end
	end
	--
	vbank(1) cls(0)
	vbank(0) cls(15)
	cam.x, cam.y, cam.z, cam.tx, cam.ty = plr.x, plr.y, plr.z, plr.tx, plr.ty
	unitic.update_pr()
	unitic.update()
	unitic.draw()
	--cross
	pix(120,68,7)
end

--map
local walls = {}

function addwall(x, y, z, angle, face, type,i)
	draw.map[angle][x][y][z]={face,type,i}
end

function upd_walls()
	for i=1,3 do
		draw.map[i]={}
		for x=0,world_size[1]-1 do
			draw.map[i][x]={}
			for y=0,world_size[2]-1 do
				draw.map[i][x][y]={}
				for z=0,world_size[3]-1 do
					draw.map[i][x][y][z]={0,0,0}
				end
			end
		end
	end

	for i=1,#walls do
		addwall(walls[i][1],walls[i][2],walls[i][3],walls[i][4],walls[i][5],walls[i][6],i)
	end
	update_world()
end

function addobj(x, y, z, type,t1) --objects
	if type==1 or type==2 then --cubes
		draw.objects.c[#draw.objects.c+1]=
		{type=type, --type
		id=#draw.objects.c+1, --id
		x=x,y=y,z=z, --object coordinates
		vx=0, vy=0, vz=0, --velocity
		draw=true, --whether to display the model
		disp=t1, -- cube dispenser ID
		model={v={},f={}}}
		for i=1,#model[type].v do
			draw.objects.c[#draw.objects.c].model.v[i]={model[type].v[i][1],model[type].v[i][2],model[type].v[i][3]}
		end
		for i=1,#model[type].f do
			draw.objects.c[#draw.objects.c].model.f[i]={
				model[type].f[i][1],
				model[type].f[i][2],
				model[type].f[i][3],
				uv={
					{model[type].f[i].uv[1][1],model[type].f[i].uv[1][2]},
					{model[type].f[i].uv[2][1],model[type].f[i].uv[2][2]},
					{model[type].f[i].uv[3][1],model[type].f[i].uv[3][2]},-1
				},
				f=model[type].f[i].f}
		end
	elseif type==3 then --cube dispenser
		draw.objects.cd[#draw.objects.cd+1]=
		{type=type,
		id=#draw.objects.cd+1,
		x=x,y=y,z=z,
		draw=true,
		t=0,ct=0, --cube type
		model=model[type]}
	elseif type==4 or type==5 or type==6 or type==7 then --light bridges
		draw.objects.lb[#draw.objects.lb+1]=
		{type=type,
		id=#draw.objects.lb+1,
		x=x,y=y,z=z,
		draw=true,
		model=model[type]}
	elseif type==8 or type==9 or type==10 or type==11 then --buttons
		draw.objects.b[#draw.objects.b+1]=
		{type=type,
		id=#draw.objects.b+1,
		x=x,y=y,z=z,
		t=t1 or (math.huge), --button press time (math.huge for a constant signal, -1 to switch the signal)
		t1=0,
		tick=false, --sends a signal 1 tick long while pressing the button
		s=false, --button signal
		draw=true,model={v=model[type].v,f=model[type].f}}
	elseif type==12 or type==13 or type==14 or type==15 then --turrets
		draw.objects.t[#draw.objects.t+1]=
		{type=type,
		id=#draw.objects.t+1,
		x=x,y=y,z=z,
		cd=0,
		draw=true,model=model[type]}
	elseif type==16 then --floor button
		draw.objects.fb[#draw.objects.fb+1]=
		{type=type,
		id=#draw.objects.fb+1,
		x=x,y=y,z=z,
		tick=false,
		s=false,
		draw=true,model={v=model[type].v,f=model[type].f}}
	elseif type==17 or type==18 or type==19 or type==20 then --lifts
		draw.objects.l[#draw.objects.l+1]=
		{type=type,
		id=#draw.objects.l+1,
		x=x,y=y,z=z,
		draw=true,model=model[type]}
	elseif type==21 or type==22 or type==23 or type==24 then --display
		draw.objects.d[#draw.objects.d+1]=
		{type=type,
		id=#draw.objects.d+1,
		x=x,y=y,z=z,
		s=false, --signal
		draw=true,model={v=model[type].v,f=model[type].f}}

	elseif type<=#model and type>0 then error("unknown object | "..type) else error("unknown type | "..type) end
end

function update_world()
	draw.world.f={}
	draw.pr_g={}

	for i=0,(world_size[1]-1)*(world_size[2]-1)*(world_size[3]-1) do draw.world.v[i+1][4] = false end

	for angle=1,3 do for x0=0,world_size[1]-1 do for y0=0,world_size[2]-1 do for z0=0,world_size[3]-1 do
		local face = draw.map[angle][x0][y0][z0][1]
		local type = draw.map[angle][x0][y0][z0][2]-1
		local id   = draw.map[angle][x0][y0][z0][3]
		local type1 = type%5
		local type2 = type//5
		------
		if type~=-1 then
			if angle==1 then
				table.insert(draw.world.f,{w={face,angle,x0,y0,z0,id},x0+y0*world_size[3]+z0*world_size[4]+1,x0+y0*world_size[3]+z0*world_size[4]+world_size[4]+1,x0+y0*world_size[3]+z0*world_size[4]+world_size[3]+1,f=face,uv={x={24+type1*24,type1*24,24+type1*24},y={32+type2*32,32+type2*32,0+type2*32}}})
				table.insert(draw.world.f,{w={face,angle,x0,y0,z0,id},x0+y0*world_size[3]+z0*world_size[4]+world_size[4]+1,x0+y0*world_size[3]+z0*world_size[4]+world_size[4]+world_size[3]+1,x0+y0*world_size[3]+z0*world_size[4]+world_size[3]+1,f=face,uv={x={type1*24,type1*24,24+type1*24},y={32+type2*32,0+type2*32,0+type2*32}}})
				--
				draw.world.v[x0+y0*world_size[3]+z0*world_size[4]+1][4]=true
				draw.world.v[x0+y0*world_size[3]+z0*world_size[4]+world_size[4]+1][4]=true
				draw.world.v[x0+y0*world_size[3]+z0*world_size[4]+world_size[3]+1][4]=true
				draw.world.v[x0+y0*world_size[3]+z0*world_size[4]+world_size[4]+world_size[3]+1][4]=true
			end

			if angle==2 then
				table.insert(draw.world.f,{w={face,angle,x0,y0,z0,id},x0+y0*world_size[3]+z0*world_size[4]+1,x0+y0*world_size[3]+z0*world_size[4]+2,x0+y0*world_size[3]+z0*world_size[4]+world_size[4]+1,f=face,uv={x={0+type1*24,0+type1*24,24+type1*24},y={152+type2*24,176+type2*24,152+type2*24}}})
				table.insert(draw.world.f,{w={face,angle,x0,y0,z0,id},x0+y0*world_size[3]+z0*world_size[4]+2,x0+y0*world_size[3]+z0*world_size[4]+world_size[4]+2,x0+y0*world_size[3]+z0*world_size[4]+world_size[4]+1,f=face,uv={x={0+type1*24,24+type1*24,24+type1*24},y={176+type2*24,176+type2*24,152+type2*24}}})
				draw.world.v[x0+y0*world_size[3]+z0*world_size[4]+1][4]=true
				draw.world.v[x0+y0*world_size[3]+z0*world_size[4]+2][4]=true
				draw.world.v[x0+y0*world_size[3]+z0*world_size[4]+world_size[4]+1][4]=true
				draw.world.v[x0+y0*world_size[3]+z0*world_size[4]+world_size[4]+2][4]=true
			end

			if angle==3 then
				table.insert(draw.world.f,{w={face,angle,x0,y0,z0,id},x0+y0*world_size[3]+z0*world_size[4]+1,x0+y0*world_size[3]+z0*world_size[4]+2,x0+y0*world_size[3]+z0*world_size[4]+world_size[3]+1,f=face,uv={x={24+type1*24,type1*24,24+type1*24},y={32+type2*32,32+type2*32,0+type2*32}}})
				table.insert(draw.world.f,{w={face,angle,x0,y0,z0,id},x0+y0*world_size[3]+z0*world_size[4]+2,x0+y0*world_size[3]+z0*world_size[4]+world_size[3]+2,x0+y0*world_size[3]+z0*world_size[4]+world_size[3]+1,f=face,uv={x={type1*24,type1*24,24+type1*24},y={32+type2*32,0+type2*32,0+type2*32}}})
				draw.world.v[x0+y0*world_size[3]+z0*world_size[4]+1][4]=true
				draw.world.v[x0+y0*world_size[3]+z0*world_size[4]+2][4]=true
				draw.world.v[x0+y0*world_size[3]+z0*world_size[4]+world_size[3]+2][4]=true
				draw.world.v[x0+y0*world_size[3]+z0*world_size[4]+world_size[3]+1][4]=true
			end


			if face == 2 and (angle == 1 or angle == 3) then
				local idx = #draw.world.f
				for i = 1, 3 do
					draw.world.f[idx - 1].uv.x[i] = (2 * type1 + 1) * 24 - draw.world.f[idx - 1].uv.x[i]
					draw.world.f[idx].uv.x[i] = (2 * type1 + 1) * 24 - draw.world.f[idx].uv.x[i]
				end
			end
		end
		------
	end end end end
	--light bridge generator
	draw.objects.lb={}
	draw.world.sp={}
	if draw.lg~=0 then
		for i=1,#draw.lg do
			local lx,ly,lz=draw.lg[i][1],draw.lg[i][2],draw.lg[i][3]
			local vx,vz=0,0
			if     draw.lg[i][4]==1 and draw.lg[i][5]==1 then vx=-1 lx=lx-1
			elseif draw.lg[i][4]==1 and draw.lg[i][5]==2 then vx=1
			elseif draw.lg[i][4]==3 and draw.lg[i][5]==1 then vz=1
			elseif draw.lg[i][4]==3 and draw.lg[i][5]==2 then vz=-1 lz=lz-1 else error(draw.lg[i][4].." | "..draw.lg[i][5])
			end
			for _=1,100 do --bridge lenght limiter
				if     vx==-1 then addobj(48+lx*96,ly*128,48+lz*96,4)
				elseif vx==1  then addobj(48+lx*96,ly*128,48+lz*96,5)
				elseif vz==-1 then addobj(48+lx*96,ly*128,48+lz*96,6)
				elseif vz==1  then addobj(48+lx*96,ly*128,48+lz*96,7)
				end

				lx=lx+vx
				lz=lz+vz

				--if the bridge collides with a wall, we stop the loop
				if lx<0 or lx>world_size[1]-1 or lz<0 or lz>world_size[3]-1 then draw.pr_g[#draw.pr_g+1]={lx,ly,lz,vx,vz} break end
				if (vx==1  and draw.map[1][lx  ][ly][lz  ][2]~=0 and draw.map[1][lx  ][ly][lz  ][2]~=3 and draw.map[1][lx  ][ly][lz  ][2]~=15)
				or (vx==-1 and draw.map[1][lx+1][ly][lz  ][2]~=0 and draw.map[1][lx+1][ly][lz  ][2]~=3 and draw.map[1][lx+1][ly][lz  ][2]~=15)
				or (vz==1  and draw.map[3][lx  ][ly][lz  ][2]~=0 and draw.map[3][lx  ][ly][lz  ][2]~=3 and draw.map[3][lx  ][ly][lz  ][2]~=15)
				or (vz==-1 and draw.map[3][lx  ][ly][lz+1][2]~=0 and draw.map[3][lx  ][ly][lz+1][2]~=3 and draw.map[3][lx  ][ly][lz+1][2]~=15) then draw.pr_g[#draw.pr_g+1]={lx,ly,lz,vx,vz} break
				end
			end
		end
	end
end

local function load_world() --Loads the world from ROM memory (from the 'Maps' table)
	--init
	draw.map={}
	draw.world={v={},f={},sp={}}
	draw.pr={}
	draw.pr_g={}
	draw.lg={}
	draw.objects={
		c={}, --cubes
		cd={}, --cube dispensers
		lb={}, --light bridges
		b={}, --buttons
		t={}, --turrets
		fb={}, --floor button
		l={}, --lifts
		d={} --displays
	}

	for z=0,world_size[1]-1 do for y=0,world_size[2]-1 do for x=0,world_size[3]-1 do
		table.insert(draw.world.v,{x*96,y*128,z*96,false}) --this boolean is resposible for whether the point needs to be updated or not
		addp(x*96,y*128,z*96,0,0,0, math.huge,0)
	end end end

	for i=1,3 do
		draw.map[i]={}
		for x=0,world_size[1]-1 do
			draw.map[i][x]={}
			for y=0,world_size[2]-1 do
				draw.map[i][x][y]={}
				for z=0,world_size[3]-1 do
					draw.map[i][x][y][z]={0,0}
				end
			end
		end
	end

	----
	update_world()
end
--palette
local pal="0000001c181c3838385d5d5d7d7d7dbababad6d6d6fffffff21018ff55553499ba65eef6b2f6faff8d18ffbe3c283040"

function savepal()
	local pal_1={}
	for i=0,48 do
		local val=peek(0x3FC0+i)
		pal_1[i]=val
	end
	return pal_1
end

function loadpal(pal_1)
	for i=0,48 do
		poke(0x3FC0+i,pal_1[i])
	end
end

function respal()
	for i=1,#pal,2 do
		poke(0x3FC0+i//6*3+i//2%3,tonumber(pal:sub(i,i+1),16))
	end
end

function updpal(r,g,b)
	for i=0,47,3 do
		poke(0x03FC0+i,peek(0x03FC0+i)*r) --RLUE
		poke(0x03FC1+i,peek(0x03FC1+i)*g) --BREEN
		poke(0x03FC2+i,peek(0x03FC2+i)*b) --GED
	end
end

function darkpal(c)
	for i=0,47 do --RGB
		poke(0x03FC0+i,peek(0x03FC0+i)*c)
	end
end


local avf={} --average frame
local fr={0,0,0} --framerate

local f_m = false --fixed mouse cursor
local fmt = 0
--player speed
local speed=4
--init
local open
local tm1,tm2 = 0,0
local p={t=0} --pause
local ms={b={}} --main screen | Table with current buttons

--buttons
local menu_options --It must be separate, otherwise local variables inside this table may not see each other

menu_options = {
	p = { --pause
		{draw = true, y = 65, t=1, text = "Resume"       , func = function() open="edit" sfx_(17) poke(0x7FC3F,1,1) end},
		{draw = true, y = 75, t=1, text = "Export", func = function() end},
	},
}

local function upd_buttons()
	for i = 1, #ms.b do
		local b = ms.b[i]
		if b.draw then
			print(b.text, min(24-b.t*20), b.y, 7)

			if my > b.y - 3 and my < b.y + 8 then
				if not open=="pause|settings" or (i<13 and my<110 and my>19) or i>=13 then
					b.t = max(b.t-0.05,0.5)
					cid = 1
					if clp1 then b.func() break end
				else
					b.t = min(1,b.t+0.05)
				end
			else
				b.t = min(1,b.t+0.05)
			end
		end
	end
end

local function upd_buttons_bdr(bdr_y,orig_pal)
	if bdr_y == 0 then
		orig_pal()
	end
	for i = 1, #ms.b + 1 do
		local b
		local lb
		if i<=#ms.b then b = ms.b[i] end
		if i>1 then lb = ms.b[i-1] end

		if lb and lb.draw and lb.y == bdr_y - 8 then
			orig_pal()
		end
		
		if b and b.draw and b.y == bdr_y + 2 then
			darkpal(b.t)
		end

	end
end

local function button(bx,by,bw,bh,cursor)
	if mx>=bx and my>=by and mx<bx+bw and my<by+bh then
		-- rectb(bx,by,bw,bh,13)
		if cursor~=false then cid=1 end --true or nil
		return true
	end
end

local function print_mid(text,x,y,color)
	local text_size=print(text,240,0)
	print(text,x - text_size//2, y, color)
end

menu = {
	open = true,
	type = 1,
	w={ --walls editor
		sel = 0, --select wall id
		m_sel = -1, --mouse selection
		sl = {id=0, val=0, val_2=0 , t=0, n= false} --slider
	},
	o={ --object editor

	}
}

open="load lvl"

function TIC()

	--fps counter
	t1 = time()
	t = t + 1
	--mouse
	mx, my, cl1, _, cl2, _, whl = mouse()
	cid=0 --cursor id

	nclp2 = not clp2 and tm2~=0
	ins = true --is the curcos in the scene

	if cl1 then tm1 = tm1 + 1 else tm1 = 0 end
	if cl2 then tm2 = tm2 + 1 else tm2 = 0 end

	clp1 = tm1 == 1
	clp2 = tm2 == 1
	--------------------------
	-- load lvl --------------
	--------------------------
	if open=="load lvl" then
		sync(2,0,false)
		world_size={12,4,12,4*12,12*4*12}
		load_world()
		--
		mx,my=0,0
		poke(0x7FC3F,1,1)
		open="edit"
	end
	--------------------------
	-- pause -----------------
	--------------------------
	if open=="pause" then
		p.t=p.t+1
		--GUI
		vbank(0)
		memcpy(0x0,0x8000,240*136/2)
		vbank(1)
		cls(0)
		--logo
		spr(256,min(-104+p.t*6,8),4,0,1,0,0,13,3)

		if open=="pause" then
			print("Pause",min(p.t*2,37),35,7)
			upd_buttons()
		end

		--Resume
		if (keyp(44) and p.t>1) or (my>52 and my<63 and clp1 and open=="pause") then
			open="edit"
			sfx_(17)
			poke(0x7FC3F,1,1)
		 end
	end
	--------------------------
	-- game ------------------
	--------------------------
	if open=="edit" then
		if stt~=120 then stt=stt+1 end
	 --W A S D
		lx, ly, lz = plr.x, plr.y, plr.z

		if key(23) then plr.z = plr.z - math.cos(plr.ty) * speed plr.x = plr.x - math.sin(plr.ty) * speed end
		if key(19) then plr.z = plr.z + math.cos(plr.ty) * speed plr.x = plr.x + math.sin(plr.ty) * speed end
		if key(1) then plr.z = plr.z - math.cos(plr.ty - pi2) * speed plr.x = plr.x - math.sin(plr.ty - pi2) * speed end
		if key(4) then plr.z = plr.z + math.cos(plr.ty - pi2) * speed plr.x = plr.x + math.sin(plr.ty - pi2) * speed end

		if plr.noclip then speed = 12 else speed = 4 end

		if key(64) then speed = speed * 2 end

		if keyp(57) or keyp(22) then plr.noclip = not plr.noclip end
		if keyp(2) then plr.godmode = not plr.godmode end
	--zoom
		if key(65) then unitic.fov=min(unitic.fov*1.2,800) else unitic.fov=max(unitic.fov/1.2,80) end
	--jump
		if plr.noclip then
			if key(48) then plr.y = plr.y + speed end
			if key(63) then plr.y = plr.y - speed end
			plr.vy=0
		else
			if plr.xy then plr.vy=-1
				if keyp(48) then plr.vy = 8 end
			end
			plr.y = plr.y + plr.vy
			plr.vy=max(plr.vy-0.5,-20)
		end

		plr.y = max(-256, plr.y)
	--palette
		for i = 0,1 do
			vbank(i)
			respal()
		end
		vbank(0)
	 --camera rotation
		fmt = fmt + 1
		if keyp(26) then fmt=0 f_m = not f_m mx,my = 0,0 end
		if clp2 then fmt=0 mx,my=0,0 end

		if cl2 then f_m = true
		elseif nclp2 then f_m = false end
		if not menu.w.sl.n then
			if f_m then
				poke(0x7FC3F,1,1)
			else
				poke(0x7FC3F,0,1)
			end
		end

	 	if p.t==0 and stt>2 and f_m and fmt>1 then
			if key(65) then --zoom
				plr.tx = plr.tx + my/800
				plr.ty = plr.ty + mx/800
			else
				plr.tx = plr.tx + my/80
				plr.ty = plr.ty + mx/80
			end
	 	end
		plr.ty = plr.ty%(math.pi*2)
		plr.tx = max(min(plr.tx, pi2), -pi2)
	 --update + collision
		if not plr.d then unitic.player_collision() end
	 --render
		unitic.render()
	 --sounds
		s.t1=max(s.t1-1,0)
		if (key(23) or key(19) or key(1) or key(4)) and s.t1==0 then sfx_(1) if key(64) then s.t1=15 else s.t1=20 end end
	 --pause
		if keyp(44) and p.t==0 then vbank(0) memcpy(0x8000,0x0000,240*136/2) open="pause" ms.b = menu_options.p for i=1,3 do s.n[i]=peek(0x13FFB+i) end music(3,7,0) poke(0x7FC3F,0,1) end
		p.t=0
	 --debug
	 	local debug_text={
			"FPS:  " .. F(1000 / fr[1]).."|"..F(1000 / (fr[3]+fr[2])*2).."  Frame:"..F(fr[1]+0.5).."|"..F((fr[3]+fr[2])/2+0.5).."  ms.".." v: " .. #unitic.poly.v .. " f:" .. #unitic.poly.f,
			"walls:"..#walls.." particles :"..#unitic.p.." objects:"..#unitic.obj,
			"camera X:" .. F(plr.x) .. " Y:" .. F(plr.y) .. " Z:" .. F(plr.z),
		}
		--top debug panel
		if keyp(49) then plr.dt=plr.dt%#debug_text+1 end
		local top_text=debug_text[plr.dt]
		vbank(1)
		--bottom debug panel
		if plr.noclip then print("Noclip", 1, 130, 7) end

		line(220,0,220,6,7)
		line(230,0,230,6,7)
		if my<7 or mx<0 or mx>239 or my>135 then ins = false end
		if menu.open then
			if menu.type==1 then
				rect(220,0,10,7,7)
				spr(501,223,1,15)
				spr(502,233,1,15)
			else
				rect(230,0,10,7,7)
				spr(500,223,1,15)
				spr(503,233,1,15)
			end
		else
			spr(500,223,1,15)
			spr(502,233,1,15)
		end

		if button(231,0,9,7) then
			top_text = "Objects editor"
			if clp1 then
				if not menu.open then menu.open = true menu.type = 2
				elseif menu.open and menu.type==1 then menu.type = 2
				elseif menu.open and menu.type==2 then menu.open = false
				end
			end
		end
		
		if button(221,0,9,7) then
			cid=1
			top_text = "walls and floor editor"
			if clp1 then
				if not menu.open then menu.open = true menu.type = 1
				elseif menu.open and menu.type==2 then menu.type = 1
				elseif menu.open and menu.type==1 then menu.open = false
				end
			end
		end
		--right menu
		if menu.open and not f_m then
			if menu.type==1 then
				rect( 162,7,78,68,2)
				rectb(162,7,78,68,1)

				if button(162,7,78,68,false) then ins = false end

				print("Walls: "..#walls,164,9,7)
				print("Add",220,9,4)
				if button(218,8,21,7) then
					print("Add",220,9,7)
					top_text = "Add a new wall"
					if clp1 then
						walls[#walls+1] = {0,0,0,1,3,1}
						menu.w.sel = #walls
						upd_walls()
					end
				end


				if menu.w.sel~=0 then
					if btnp(0,30,2) or btnp(2,30,2) then menu.w.sel = max(1, menu.w.sel-1) end
					if btnp(1,30,2) or btnp(3,30,2) then menu.w.sel = min(#walls, menu.w.sel+1) end

					local wall = walls[menu.w.sel]
					print("X:",164,19,11)
					print("Y:",164,27,14)
					print("Z:",164,35,9 )
					print("type:"  ,164,43,7)
					print("Angle:" ,164,51,7)
					print("Normal:",164,59,7)
					--
					local sl = menu.w.sl
					--
					local ind = {1,2,3,6}
					local min_max={{0,10},{0,2},{0,10},{1,17}}
					for i = 1,4 do
						rect(204,10+i*8,15,7,1)
						print_mid(wall[ind[i]],212,11+i*8,7)
						if button(204,10+i*8,15,7) then
							if clp1 then
								sl.n = true
								sl.id = i
								sl.val = wall[ind[i]]
								sl.val_2 = 0
								sl.t = 0
								mx = 0
								poke(0x7FC3F,1,1)
							end
						end
					end
					--
					if sl.n then
						if cl1 then
							sl.t = sl.t + 1
							if sl.t>2 then
								sl.val_2 = sl.val_2 + mx
								if mx ~=0 then
									upd_walls()
								end
								wall[ind[sl.id]] = sl.val + sl.val_2//30


								if wall[ind[sl.id]]>min_max[sl.id][2] then
									wall[ind[sl.id]]=min_max[sl.id][2]
									sl.val_2 = 0
									sl.val = wall[ind[sl.id]]
								elseif wall[ind[sl.id]]<min_max[sl.id][1] then
									wall[ind[sl.id]]=min_max[sl.id][1]
									sl.val_2 = 0
									sl.val = wall[ind[sl.id]]
								end
							end
						elseif not cl1 then
							sl.t = 0
							poke(0x7FC3F,0,1)
							sl.n = false
						end
					end
					--
					for vb = 0,1 do
						vbank(vb)
						spr(447 + wall[5],210,51,15)
						spr(431 + wall[4],210,59,15)
					end
					--normal
					if button(210,51,5,5) then
						local text={
							"Only the front side is displayed",
							"Only the back side is displayed",
							"Both back side is displayed",
						}
						top_text = text[wall[5]]
						if clp1 then
							wall[5] = wall[5]%3 + 1
							upd_walls()
						end
					end

					--rotation
					if button(210,59,5,5) then
						local text={
							"Affects the rotation | YZ [wall]",
							"Affects the rotation | XZ [floor]",
							"Affects the rotation | XY [wall]",
						}
						top_text = text[wall[4]]
						if clp1 then
							wall[4] = wall[4]%3 + 1
							upd_walls()
						end
					end

					--delete button
					print("Delete",203,67,13)
					if button(203,67,35,5) then
						print("Delete",203,67,7)
						top_text = "Delete the current wall"
						if clp1 then
							menu.w.sel = menu.w.sel - 1
							table.remove(walls)
							upd_walls()
						end
					end

					--clone button
					print("Clone",164,67,11)
					if button(164,67,29,5) then
						print("Clone",164,67,7)
						top_text = "Clone the current wall"
						if clp1 then
							walls[#walls+1] = {wall[1],wall[2],wall[3],wall[4],wall[5],wall[6]}
							menu.w.sel = #walls
							upd_walls()
						end
					end
				else
					print([[Click "Add" to]],165,29,4)
					print([[add a wall]],172,36,4)
				end
			end
		end
		--mouse selection
			menu.w.m_sel = -1
			if ins or cl2 then
			  local x1 = plr.x
			  local y1 = plr.y
			  local z1 = plr.z
			  
			  local tx = plr.tx --some kind of math magic is needed here
			  local ty = plr.ty
  
			  local x2 = plr.x - 100000 * math.sin(ty)*math.cos(tx)
			  local y2 = plr.y - 100000 * math.sin(tx)
			  local z2 = plr.z - 100000 * math.cos(ty)*math.cos(tx)
			  
			  local rc1 = {true,true,true,true,true,true,true,true,true,true,true,true}
			  local rc2 = {true,true,true,true,true,true,true,true,true,true}
			  --only for walls, ifnore objects
			  local x3,y3,z3,angle = raycast_legacy(x1,y1,z1,x2,y2,z2,rc1,rc2,false)
			  if x3 then
				  menu.w.m_sel = draw.map[angle][x3][y3][z3][3]
			  end
		  end
		--top debug panel (2)
		print(top_text,1,1,7)
	end
	------------------
	--- end ----------
	------------------
	--cursor id
	vbank(0)
	poke4(0x07FF6,cid)
	--fps (2)
	do
		avf[t%60]=t2
		t2 = time() - t1
		fr = {0,math.huge,0}
		for i=1,#avf do
			fr[1]=fr[1]+avf[i]
			if avf[i]<fr[2] then fr[2]=avf[i] end
			if avf[i]>fr[3] then fr[3]=avf[i] end
		end
		fr[1]=fr[1]/#avf
	end
end


function BDR(scn_y) scn_y=scn_y-4
	vbank(0)
	if open=="pause" then
		vbank(1)poke(0x03FF9,0)respal()vbank(0)poke(0x03FF9,0)
		upd_buttons_bdr(scn_y, function()respal()darkpal(max(1-p.t/30,0.4))if stt<60 then darkpal(stt/60)end end)
	end
	if open=="edit" then
	if scn_y==0 then respal() if not f_m then darkpal(0.5) else darkpal(0.8) end end
	if scn_y==7 then respal() end
	end
end


-- <TILES>
-- 000:4444444443333333434333334333333343333433433333334343334343333333
-- 001:4444444433333333433343333333333334333334333333333333333333333333
-- 002:4444444333333332433343323333333233343232333333323333333233333332
-- 003:6666666665555555656555556555555565555655655555556565556565555555
-- 004:6666666655555555655565555555555556555556555555555555555555555555
-- 005:6666666555555554655565545555555455565454555555545555555455555554
-- 006:555555555f4f4f4f54fff4ff5f4f4f4f5ff4fff45f4f4f4f54fff4ff5f4f4f4f
-- 007:555555554f4f4f4ff4fff4ff4f4f4f4ffff4fff44f4f4f4ff4fff4ff4f4f4f4f
-- 008:555555554f4f4f43f4fff4f34f4f4f43fff4fff34f4f4f43f4fff4f34f4f4f43
-- 009:555555555fffffff5fffffff5fffffff5fffffff5fffffff5fffffff5fffffbf
-- 010:55555555ffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 011:55555555fffffff5fffffff5fffffff4fffffff4fffffff4fffffff4fffffff4
-- 012:666666666555555a656555aa65555aab6555aabb655aabbb65aabbbb65aabbbb
-- 013:6aaaaaa6aaaaaaaaabbbbbbabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
-- 014:66666665a5555554aa556554baa55554bbaa5454bbbaa554bbbbaa54bbbbaa54
-- 015:0000000010101010000000001010101000000000101010100000000010101010
-- 016:4333333343333333434333334333333343333333433333334343334343333333
-- 017:3433343333333333333333333333333333343333333333333333333333333333
-- 018:3332323233333332333333323333333232333332333323323333333233333332
-- 019:6555555565555555656555556555555565555555655555556565556565555555
-- 020:5655565555555555555555555555555555565555555555555555555555555555
-- 021:5554545455555554555555545555555454555554555545545555555455555554
-- 022:5ff4fff45f4f4f4f54fff4ff5f4f4f4f5ff4fff45f4f4f4f54fff4ff5f4f4f4f
-- 023:fff4fff44f4f4f4ff4fff4ff4f4f4f4ffff4fff44f4f4f4ff4fff4ff4f4f4f4f
-- 024:fff4fff34f4f4f43f4fff4f34f4f4f43fff4fff34f4f4f43f4fff4f34f4f4f43
-- 025:5ffffbcf5fffbcff5fffcfff5fffffff5fffffff5fffffff5fffffff5fffffff
-- 026:fffffffffffffffbffffffbcfffffbcffffffcfffffbffffffbcffffffcfffff
-- 027:fffffff4fffffff4fffffff4fffffff4fffffff4fffffff4fffffff4fffffff4
-- 028:65aabbbb6aabbbbb6aabbbbb6aabbbbbaabbbbbbaabbbbbbaabbbbbbaabbbbbb
-- 029:bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
-- 030:bbbbaa54bbbbbaa4bbbbbaa4bbbbbaa4bbbbbbaabbbbbbaabbbbbbaabbbbbbaa
-- 031:0000000010101010000000001010101000000000101010100000000010101010
-- 032:4333333343333333434333334333333343333333433333334333433343333333
-- 033:3433333333333233433333333333333333333233333333333323333333333333
-- 034:3332333233333332333333323333333232333232333333323333333233333332
-- 035:6555555565555555656555556555555565555555655555556555655565555555
-- 036:5655555555555455655555555555555555555455555555555545555555555555
-- 037:5554555455555554555555545555555454555454555555545555555455555554
-- 038:5ff4fff45f4f4f4f54fff4ff5f4f4f4f5ff4fff45f4f4f4f54fff4ff5f4f4f4f
-- 039:fff4fff44f4f4f4ff4fff4ff4f4f4f4ffff4fff44f4f4f4ff4fff4ff4f4f4f4f
-- 040:fff4fff34f4f4f43f4fff4f34f4f4f43fff4fff34f4f4f43f4fff4f34f4f4f43
-- 041:5fffffff5fffffff5fffffff5fffffff5fffffff5ffffffb5fffffbc5fffffcf
-- 042:fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffb
-- 043:fffffff4fffffff4fffffff4fffffff4fffffff4fbfffff4bcfffff4cffffff4
-- 044:aabbbbbbaabbbbbbaabbbbbbaabbbbbb6aabbbbb6aabbbbb6aabbbbb65aabbbb
-- 045:bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
-- 046:bbbbbbaabbbbbbaabbbbbbaabbbbbbaabbbbbaa4bbbbbaa4bbbbbaa4bbbbaa54
-- 047:0000000010101010000000001010101000000000101010100000000010101010
-- 048:4333333343333333433333334333333343343333433333334333333332222222
-- 049:3333333333333332233323333333333333333332333333333333333322222222
-- 050:3332333233333332333333323333333233233232333333323333333222222222
-- 051:6555555565555555655555556555555565565555655555556555555554444444
-- 052:5555555555555554455545555555555555555554555555555555555544444444
-- 053:5554555455555554555555545555555455455454555555545555555444444444
-- 054:5ff4fff45f4f4f4f54fff4ff5f4f4f4f5ff4fff45f4f4f4f54fff4ff33333333
-- 055:fff4fff44f4f4f4ff4fff4ff4f4f4f4ffff4fff44f4f4f4ff4fff4ff33333333
-- 056:fff4fff34f4f4f43f4fff4f34f4f4f43fff4fff34f4f4f43f4fff4f333333333
-- 057:5fffffff5fffffff5fffffff5fffffff5fffffff5fffffff5555555554444444
-- 058:fffffffcffffffffffffffffffffffffffffffffffffffff5554444444444444
-- 059:fffffff4fffffff4fffffff4fffffff4fffffff4fffffff44444444444444444
-- 060:65aabbbb65aabbbb655aabbb6555aabb65565aab655555aa6555555a54444444
-- 061:bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbabbbbbbaaaaaaaaa4aaaaaa4
-- 062:bbbbaa54bbbbaa54bbbaa554bbaa5554baa55454aa555554a555555444444444
-- 063:0000000010101010000000001010101000000000101010100000000010101010
-- 064:666666666555555d656555dd65555dde6555ddee655ddeee65ddeeee65ddeeee
-- 065:6dddddd6dddddddddeeeeeedeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
-- 066:66666665d5555554dd556554edd55554eedd5454eeedd554eeeedd54eeeedd54
-- 067:ffffffffffaaaffffffffffffffffffffffffffffffffffaffffffffffffffff
-- 068:fffffffffffffffffffffffbffffffffffffffffaafffffffffffffffffffffa
-- 069:ffffffffffffffffbbffffffffffffffffffffffffffffffffffffffaaffffff
-- 070:6666666665555555656555556555555565555655655555556565556565555555
-- 071:6666666655555555655565555555555556555556555555555555555555555555
-- 072:6666666555555554655565545555555455565454555555545555555455555554
-- 073:4444444443333333434333334333333343333433433333334343334343333333
-- 074:4444444433333333433343333333333334333334333333333333333333333333
-- 075:4444444333333332433343323333333233343232333333323333333233333332
-- 076:6666666665671111656777776567711165671111656711776567117765671177
-- 077:6666666611111111777777771177771111177111711771177117711771177117
-- 078:6666666511117654777776541117765411117654771176547711765477117654
-- 079:0000000010101010000000001010101000000000101010100000000010101010
-- 080:65ddeeee6ddeeeee6ddeeeee6ddeeeeeddeeeeeeddeeeeeeddeeeeeeddeeeeee
-- 081:eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
-- 082:eeeedd54eeeeedd4eeeeedd4eeeeedd4eeeeeeddeeeeeeddeeeeeeddeeeeeedd
-- 083:ffffbbbfffffffffffffffffffffffffffffffffffffffffffffffffffaaafff
-- 084:fffffffffffffffffbbbfffffffffffffffffffffffffffabbbfffffffffffff
-- 085:ffffffffffffffffffffffffffffffffffffffffaaffffffffffffffffffffff
-- 086:6555555565555555656555556555555565555555655555556565556565555555
-- 087:5655565555555555555555555555555555565555555555555555555555555555
-- 088:5554545455555554555555545555555454555554555545545555555455555554
-- 089:4333333343333333434333334333333343333333433333334343334343333333
-- 090:3433343333333333333333333333333333343333333333333333333333333333
-- 091:3332323233333332333333323333333232333332333323323333333233333332
-- 092:6567117765671177656711776567117765671111656771116567777765671111
-- 093:7117711171177711711777777117711711177111117777117777777711111111
-- 094:1111765411117654771176547711765411117654111776547777765411117654
-- 095:0000000010101010000000001010101000000000101010100000000010101010
-- 096:ddeeeeeeddeeeeeeddeeeeeeddeeeeee6ddeeeee6ddeeeee6ddeeeee65ddeeee
-- 097:eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
-- 098:eeeeeeddeeeeeeddeeeeeeddeeeeeeddeeeeedd4eeeeedd4eeeeedd4eeeedd54
-- 099:fffffffffffffffffffffffffffbbbffffffffffffffffffffffffffffffffaa
-- 100:fffffffffffffffffffaaafffffffffffffffffbffffffffffffffffafffffff
-- 101:ffffffffffffffffffffffffffffffffbbffffffffffffffffffffffffffffff
-- 102:6555555565555555656555556555555565555555655555556555655565555555
-- 103:5655555555555455655555555555555555555455555555555545555555555555
-- 104:5554555455555554555555545555555454555454555555545555555455555554
-- 105:4333333343333333434333334333333343333333433333334333433343333333
-- 106:3433333333333233433333333333333333333233333333333323333333333333
-- 107:3332333233333332333333323333333232333232333333323333333233333332
-- 108:6567777765671717656717176567777765677117656771176567777765677117
-- 109:7777777717177777171777777777777711733711117337117777777733733733
-- 110:7777765477777654777776547777765473377654733776547777765471177654
-- 111:0000000010101010000000001010101000000000101010100000000010101010
-- 112:65ddeeee65ddeeee655ddeee6555ddee65565dde655555dd6555555d54444444
-- 113:eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeedeeeeeeddddddddd4dddddd4
-- 114:eeeedd54eeeedd54eeedd554eedd5554edd55454dd555554d555555444444444
-- 115:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 116:ffffffffffffffffffffffaafffffffffbbbffffffffffffffffffffffffffff
-- 117:ffffffffffffffffaffffffffffffffffffffffffbbbffffffffffffffffffff
-- 118:6555555565555555655555556555555565565555622222222311111152322222
-- 119:5555555555555554455545555555555555555554222ed2221111111122222222
-- 120:5554555455555554555555545555555455455454222222241111112322222234
-- 121:4333333343333333433333334333333343343333422222222311111132322222
-- 122:3333333333333332233323333333333333333332222ed2221111111122222222
-- 123:3332333233333332333333323333333233233232222222221111111322222232
-- 124:6567711765677777656666666555555565565555655556556555555554444444
-- 125:3373373377777777666666665555555555555554555545556555555544444444
-- 126:7117765477777654666666545555555455455454455555545555555444444444
-- 127:0000000010101010000000001010101000000000101010100000000010101010
-- 128:6666666665555555656555556555555565555655655555556565556565555555
-- 129:666666665555555565556555555555555655555655555552555555225555522f
-- 130:666666655555555465552222552222222222ffff22ffffffffffffffffffffff
-- 131:66666666655555552222555522222255ffff2222ffffff22ffffffffffffffff
-- 132:66666666555555556555655555555555565555562555555522555555f2255555
-- 133:6666666555555554655565545555555455565454555555545555555455555554
-- 134:6666666665555555656555556555555565555655655555556565556565555555
-- 135:6666666655555555655565555555555556555556555555525555552255555227
-- 136:6666666555555554655522225522222222227776227777767777777677777776
-- 137:6666666665555555222255552222225577772222777777227777777777777777
-- 138:6666666655555555655565555555555556555556255555552255555572255555
-- 139:6666666555555554655565545555555455565454555555545555555455555554
-- 140:ffffffffff888ffffffffffffffffffffffffffffffffff8ffffffffffffffff
-- 141:fffffffffffffffffffffff9ffffffffffffffff88fffffffffffffffffffff8
-- 142:ffffffffffffffff99ffffffffffffffffffffffffffffffffffffff88ffffff
-- 143:0000000010101010000000001010101000000000101010100000000010101010
-- 144:6555555565555555656555556555555565555555655555556565556565555555
-- 145:565522ff55522fff55222fff5522ffff522fffff522fffff22ffffff22ffffff
-- 146:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 147:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 148:ff225655fff22555fff22255ffff2255fffff225fffff225ffffff22ffffff22
-- 149:5554545455555554555555545555555454555554555545545555555455555554
-- 150:6555555565555555656555556555555565555555655555556565556565555555
-- 151:5655227755522777552227775522777752277777522777772277777722777777
-- 152:7777777677777776777777767777777677777776777777767777777677777776
-- 153:7777777777777777aaaaaaaaaaaabbbaaaabbbbbaabbbbbbaabbbbbbaabbbbbb
-- 154:7722565577722555aaaa2255aaaa2255aaaaa225baaaa225baaaaa22baaaaa22
-- 155:5554545455555554555555545555555454555554555545545555555455555554
-- 156:ffff999fffffffffffffffffffffffffffffffffffffffffffffffffff888fff
-- 157:fffffffffffffffff999fffffffffffffffffffffffffff8999fffffffffffff
-- 158:ffffffffffffffffffffffffffffffffffffffff88ffffffffffffffffffffff
-- 159:0000000010101010000000001010101000000000101010100000000010101010
-- 160:6555555565555555656555556555555265555552655555526555655265555552
-- 161:22ffffff22ffffff22ffffff2fffffff2fffffff2fffffff2fffffff2fffffff
-- 162:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 163:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 164:ffffff22ffffff22ffffff22fffffff2fffffff2fffffff2fffffff2fffffff2
-- 165:5554555455555554555555542555555424555454255555542555555425555554
-- 166:6555555565555555656555556555555265555552655555526555655265555552
-- 167:2277777722777777227777772777777727777777277777772777777727777777
-- 168:7777777677777766777776767777677677776776777767767777767677777766
-- 169:baabbbbbbbaabbbabbbaaaaabbbbaaaabbbbbaaabbbbbaaabbabbbaabaaabbbb
-- 170:aaaaaa22aaaaaa22aaaaaa22aaaaaaa2aaaaaaa2aaaaaaa2aaaaaaa2baaaaaa2
-- 171:5554555455555554555555542555555424555454255555542555555425555554
-- 172:fffffffffffffffffffffffffff999ffffffffffffffffffffffffffffffff88
-- 173:fffffffffffffffffff888fffffffffffffffff9ffffffffffffffff8fffffff
-- 174:ffffffffffffffffffffffffffffffff99ffffffffffffffffffffffffffffff
-- 175:0000000010101010000000001010101000000000101010100000000010101010
-- 176:6555555265555552655555526555555265565555655555556555555554444444
-- 177:2fffffff2fffffff2fffffff2fffffff22ffffff22ffffff22ffffff422fffff
-- 178:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 179:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 180:fffffff2fffffff2fffffff2fffffff2ffffff22ffffff22ffffff22fffff224
-- 181:2554555425555554255555542555555455455454555555545555555444444444
-- 182:6555555265555552655555526555555265565555655555556555555554444444
-- 183:2777777727777777277777772777777722777777227777772277777742277777
-- 184:7777777677777776777777767777777677777776777777767777777677777776
-- 185:bbaaabbbbbbaaaaaabbbaaaaaabbbaaaabbbaaaabbbaaaaabbaaaaaabaaaaaaa
-- 186:baaaaaa2aaaaaaa2aaaaaaa2aaaaaaa2aaaaaa22aaaaaa22aaaaaa22aaaaa224
-- 187:2554555425555554255555542555555455455454555555545555555444444444
-- 188:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 189:ffffffffffffffffffffff88fffffffff999ffffffffffffffffffffffffffff
-- 190:ffffffffffffffff8ffffffffffffffffffffffff999ffffffffffffffffffff
-- 191:0000000010101010000000001010101000000000101010100000000010101010
-- 192:555555555ccccccc5bbbbbbb5aaaaaaa5ccccccc5bbbbbbb5aaaaaaa5ccccccc
-- 193:55555555ccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaacccccccc
-- 194:55555555ccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaacccccccc
-- 195:55555555ccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaacccccccc
-- 196:55555555ccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaacccccccc
-- 197:55555555ccccccc4bbbbbbb4aaaaaaa4ccccccc4bbbbbbb4aaaaaaa4ccccccc4
-- 198:2b2444442b2433332b2433332b2433332b2433332b2433332b2433332b243333
-- 199:4444444433333333333333333333333333333333333333333333333333333333
-- 200:444442b2333342b2333342b2333342b2333342b2333342b2333342b2333342b2
-- 201:2b2222222b222222233333332355555523555555235555552355555523555555
-- 202:2222222222222222333333335555555555555555555555555555555555555555
-- 203:222222b2222222b2333333325555553255555532555555325555553255555532
-- 204:4444444343333332433433324333323243433332433323324333333232222222
-- 205:4444444343333332433433324333323243433332433323324333333232222222
-- 206:4444444343333332433433324333323243433332433323324333333232222222
-- 207:0000000010101010000000001010101000000000101010100000000010101010
-- 208:5bbbbbbb5aaaaaaa5ccccccc5bbbbbbb5aaaaaaa5ccccccc5bbbbbbb5aaaaaaa
-- 209:bbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaa
-- 210:bbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaa
-- 211:bbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaa
-- 212:bbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaa
-- 213:bbbbbbb4aaaaaaa4ccccccc4bbbbbbb4aaaaaaa4ccccccc4bbbbbbb4aaaaaaa4
-- 214:2b2433332b2433332b2433332b2433332b2433332b2433332b2433332b243333
-- 215:3333333333333333333333333333333333333333333333333333333333333333
-- 216:333342b2333342b2333342b2333342b2333342b2333342b2333342b2333342b2
-- 217:2355555523555555235555552355555523555555235555552355555523555555
-- 218:5555555555555555555555555555555555555555555555555555555555555555
-- 219:5555553255555532555555325555553255555532555555325555553255555532
-- 220:4444444343333332433433324333323243433332433323324333333232222222
-- 221:4444444343333332433433324333323243433332433323324333333232222222
-- 222:4444444343333332433433324333323243433332433323324333333232222222
-- 223:0000000010101010000000001010101000000000101010100000000010101010
-- 224:5ccccccc5bbbbbbb5aaaaaaa5ccccccc5bbbbbbb5aaaaaaa5ccccccc5bbbbbbb
-- 225:ccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbb
-- 226:ccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbb
-- 227:ccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbb
-- 228:ccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbb
-- 229:ccccccc4bbbbbbb4aaaaaaa4ccccccc4bbbbbbb4aaaaaaa4ccccccc4bbbbbbb4
-- 230:2b2433332b2433332b2433332b2444442b22222233333333333333332b222222
-- 231:3333333333333333333333334444444422222222333333333333333322222222
-- 232:333342b2333342b2333342b2444442b2222222b23333333333333333222222b2
-- 233:2355555523555555235555552355555523555555335555553355555523555555
-- 234:5555555555555555555555555555555555555555555555555555555555555555
-- 235:5555553255555532555555325555553255555532555555325555553255555532
-- 236:4444444343333332433433324333323243433332433323324333333232222222
-- 237:4444444343333332433433324333323243433332433323324333333232222222
-- 238:4444444343333332433433324333323243433332433323324333333232222222
-- 239:0000000010101010000000001010101000000000101010100000000010101010
-- 240:5aaaaaaa5ccccccc5bbbbbbb5aaaaaaa5ccccccc5bbbbbbb5555555554444444
-- 241:aaaaaaaaccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbb5555555544444444
-- 242:aaaaaaaaccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbb5555555544444444
-- 243:aaaaaaaaccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbb4444444444444444
-- 244:aaaaaaaaccccccccbbbbbbbbaaaaaaaaccccccccbbbbbbbb4444444444444444
-- 245:aaaaaaa4ccccccc4bbbbbbb4aaaaaaa4ccccccc4bbbbbbb44444444444444444
-- 246:2b2222222b2222222b2222222b2222222b2222222b2222222b2222222b222222
-- 247:2222222222222222222222222222222222222222222222222222222222222222
-- 248:222222b2222222b2222222b2222222b2222222b2222222b2222222b2222222b2
-- 249:2355555523555555235555552355555523555555235555552355555523555555
-- 250:5555555555555555555555555555555555555555555555555555555555555555
-- 251:5555553255555532555555325555553255555532555555325555553255555532
-- 252:0000000010101010000000001010101000000000101010100000000010101010
-- 253:0000000010101010000000001010101000000000101010100000000010101010
-- 254:0000000010101010000000001010101000000000101010100000000010101010
-- 255:0000000010101010000000001010101000000000101010100000000010101010
-- </TILES>

-- <TILES1>
-- 114:0000000000000000000000000000000000000044000044440044444444444444
-- 115:0000004400004444004444444444444444444444444444444444444444444444
-- 116:4400000044440000444444004444444444444444444444444444444444444444
-- 117:0000000000000000000000000000000044000000444400004444440044444444
-- 128:0000000000000000000000000000000000000044000000440000000000000000
-- 129:0000004400004444004444444444444444444444444444444444444400444444
-- 130:4444444444444444444444444444444444444400444400004400000000000000
-- 131:4444440044440000440000000000000000000000000000000000000000000000
-- 132:0044444400004444000000440000000000000000000000000000000000000000
-- 133:4444444444444444444444444444444400444444000044440000004400000000
-- 134:4400000044440000444444004444444444444444444444444444444444444444
-- 135:0000000000000000000000000000000044000000444400004444440044444444
-- 144:3300000033330000333333003333333333333333333333333333333333333333
-- 145:0000440000000000000000000000000033000000333300003333330033333333
-- 150:0044444400004444000000440000000000000000000000000000000000000000
-- 151:4444443344443333443333333333333333333333333333333333333333333333
-- 160:3333333333333333333333333333333333333333333333333333333333333333
-- 161:3333333333333333333333333333333333333333333333333333333333333333
-- 162:3300000033330000333333003333333333333333333333333333333333333333
-- 163:0000000000000000000000000000000033000000333300003333330033333333
-- 167:3333333333333333333333333333333333333333333333333333333333333333
-- 176:3333333333333333333333333333333333333333333333333333333333333333
-- 177:3333333333333333333333333333333333333333333333333333333333333333
-- 178:3333333333333333333333333333333333333333333333333333333333333333
-- 179:3333333333333333333333333333333333333333333333333333333333333333
-- 183:3333333333333333333333333333333333333333333333333333333333333333
-- 192:3333333333333333333333333333333333333333333333333333333333333333
-- 193:3333333333333333333333333333333333333333333333333333333333333333
-- 194:3333333333333333333333333333333333333333333333333333333333333333
-- 195:3333333333333333333333333333333333333333333333333333333333333333
-- 199:3333333333333333333333333333333333333333333333333333333333333333
-- 208:3333333333333333333333333333333333333333333333333333333333333333
-- 209:3333333333333333333333333333333333333333333333333333333333333333
-- 210:3333333333333333333333333333333333333333333333333333333333333333
-- 211:3333333333333333333333333333333333333333333333333333333333333333
-- 214:0000000000000000000000000000000000000000000000330000333300333333
-- 215:3333333333333333333333333333333333333333333333333333333333333333
-- 224:3333333300333333000033330000003300000000000000000000000000000000
-- 225:3333333333333333333333333333333333333333003333330000333300000033
-- 226:3333333333333333333333333333333333333333333333333333333333333333
-- 227:3333333333333333333333333333333333333333333333333333333333333333
-- 228:0000000000000000000000000000000000000000000000330000333300333333
-- 229:0000000000000033000033330033333333333333333333333333333333333333
-- 230:3333333333333333333333333333333333333333333333003333000033000000
-- 231:3333333333333300333300003300000000000000000000000000000000000000
-- 242:3333333300333333000033330000003300000000000000000000000000000000
-- 243:3333333333333333333333333333333333333333003333330000333300000033
-- 244:0033333300333333003333330033333300333333003333000033000000000000
-- 245:3333333333333300333300003300000000000000000000000000000000000000
-- </TILES1>

-- <SPRITES>
-- 000:0000000000000000000000000000000000777777007777770077711100777000
-- 001:0000000000000000000000000000000077770000777770001177770000177700
-- 002:0000000000000000000000000000000000777777077777777777111177710000
-- 003:0000000000000000000000000000000077000077777000777777007717770077
-- 004:0000000000000000000000000000000077777777777777777711117777000017
-- 005:0000000000000000000000000000000000007777700077777700111177000000
-- 006:0000000000000000000000000000000077777777777777777777111177770000
-- 007:0000000000000000000000000000000000007777000777770077777100777710
-- 008:0000000000000000000000000000000077770000777770001777770001777700
-- 009:0000000000000000000000000000000077770000777700007777000077770000
-- 011:0aa000000aa0000b0aa000bb0aa00bbb0aa00bbb0aa00bbb0aab00bb0aabb00b
-- 012:00000000bb000000bbb00000bbbb0000bbbb0000bbbb0000bbb00000bb000000
-- 013:0000000010101010000000001010101000000000101010100000000010101010
-- 014:0000000010101010000000001010101000000000101010100000000010101010
-- 015:999997b7988897b7988897b7988897b7999997e7222227e7222227e7222227e7
-- 016:0077700000767000006760000076767600676767006661110066600000666000
-- 017:0007770000067600006767007676710067671000111100000000000000000000
-- 018:7770000067600000767000006760000076700000666000006660000066660000
-- 019:0777007706760067076700760676006707670076066600660666006666660066
-- 020:7700000767000007760000766767676776767676661111666600006666000016
-- 021:7700000067000000760000006100000010000000600000006000000066000000
-- 022:7777000067670000767600006767000076760000666600006666000066660000
-- 023:0077770000676700007676000067676700767676006666110066660000666600
-- 024:0077770000676700007676006767670076767600116666000066660000666600
-- 025:7777000067670000767600006767000076760000666600006666000066660000
-- 027:0aabbb000aabbbb00aabbbbb0aabbbbb0aabbbbb0aabb0bb0aab000b0aabb000
-- 028:0000000000000000000000000000000000000000b0000000bb000000bbbbb000
-- 029:0000000010101010000000001010101000000000101010100000000010101010
-- 030:0000000010101010000000001010101000000000101010100000000010101010
-- 031:8822777788227777ffff7777f711711771ff77771fff77771fff77771fffffff
-- 032:0066600000666000001110000000000000000000000000000000000000000000
-- 034:1666666601666666001111110000000000000000000000000000000000000000
-- 035:6661006666100066110000110600060606000606060006060666016101110010
-- 036:6600000666000006110000010600000606000061060000660666001601110001
-- 037:6600000066000000110000000000606060066010106160606016606010011010
-- 038:6666000066660000111100000600666066606160161060600660666001101110
-- 039:0066660000666600001111006600000061600000601000006000000010000000
-- 040:0066660000666600001111000000000000000000000000000000000000000000
-- 041:6666666666666666111111110000000000000000000000000000000000000000
-- 042:6666000066660000111100000000000000000000000000000000000000000000
-- 043:0aabbb000aa0bbb00aa00bbb0aa0bbb00aabbb000aabb0000aab00000aa00000
-- 044:0bbbb00000000000000000000000000000000000000000000000000000000000
-- 045:0000000010101010000000001010101000000000101010100000000010101010
-- 046:0000000010101010000000001010101000000000101010100000000010101010
-- 047:0000000010101010000000001010101000000000101010100000000010101010
-- 048:4444444343333332433433324333323243433332433323324333333232222222
-- 049:4444444343333332433433324333323243433332433323324333333232222222
-- 050:4444444343333332433433324333323243433332433323324333333232222222
-- 051:7777777676666665766766657666656576766665766656657666666565555555
-- 052:7777777676666665766766657666656576766665766656657666666565555555
-- 053:7777777676666665766766657666656576766665766656657666666565555555
-- 054:555555555f4f4f4f54fff4ff5f4f4f4f5ff4fff45f4f4f4f54fff4ff5f4f4f4f
-- 055:555555554f4f4f4ff4fff4ff4f4f4f4ffff4fff44f4f4f4ff4fff4ff4f4f4f4f
-- 056:555555554f4f4f43f4fff4f34f4f4f43fff4fff34f4f4f43f4fff4f34f4f4f43
-- 057:555555555fffffff5fffffff5fffffff5fffffff5fffffff5fffffbf5ffffbcf
-- 058:55555555ffffffffffffffffffffffffffffffffffffffffffffffffffffffff
-- 059:55555555fffffff5fffffff5fffffff4fffffff4fffffff4ffbffff4fbcffff4
-- 060:ffffffffff888ffffffffffffffffffffffffffffffffff8ffffffffffffffff
-- 061:fffffffffffffffffffffff9ffffffffffffffff88fffffffffffffffffffff8
-- 062:ffffffffffffffff99ffffffffffffffffffffffffffffffffffffff88ffffff
-- 063:0000000010101010000000001010101000000000101010100000000010101010
-- 064:4444444343333332433433324333323243433332433323324333333232222222
-- 065:4444444343333332433433324333323243433332433323324333333232222222
-- 066:4444444343333332433433324333323243433332433323324333333232222222
-- 067:7777777676666665766766657666656576766665766656657666666565555555
-- 068:7777777676666665766766657666656576766665766656657666666565555555
-- 069:7777777676666665766766657666656576766665766656657666666565555555
-- 070:5ff4fff45f4f4f4f54fff4ff5f4f4f4f5ff4fff45f4f4f4f54fff4ff5f4f4f4f
-- 071:fff4fff44f4f4f4ff4fff4ff4f4f4f4ffff4fff44f4f4f4ff4fff4ff4f4f4f4f
-- 072:fff4fff34f4f4f43f4fff4f34f4f4f43fff4fff34f4f4f43f4fff4f34f4f4f43
-- 073:5fffbcff5fffcfff5fffffff5fffffff5fffffff5fffffff5fffffff5fffffff
-- 074:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffbfffffff
-- 075:bcfffff4cffffff4fffffff4fffffff4fffffff4fffffff4fffffff4ffbffff4
-- 076:ffff999fffffffffffffffffffffffffffffffffffffffffffffffffff888fff
-- 077:fffffffffffffffff999fffffffffffffffffffffffffff8999fffffffffffff
-- 078:ffffffffffffffffffffffffffffffffffffffff88ffffffffffffffffffffff
-- 079:0000000010101010000000001010101000000000101010100000000010101010
-- 080:4444444343333332433433324333323243433332433323324333333232222222
-- 081:4444444343333332433433324333323243433332433323324333333232222222
-- 082:4444444343333332433433324333323243433332433323324333333232222222
-- 083:7777777676666665766766657666656576766665766656657666666565555555
-- 084:7777777676666665766766657666656576766665766656657666666565555555
-- 085:7777777676666665766766657666656576766665766656657666666565555555
-- 086:5ff4fff45f4f4f4f54fff4ff5f4f4f4f5ff4fff45f4f4f4f54fff4ff53333333
-- 087:fff4fff44f4f4f4ff4fff4ff4f4f4f4ffff4fff44f4f4f4ff4fff4ff33333333
-- 088:fff4fff34f4f4f43f4fff4f34f4f4f43fff4fff34f4f4f43f4fff4f333333333
-- 089:5ffffffb5ffffffc5fffffff5fffffff5fffffff5fffffff5fffffff54444444
-- 090:cffffffffffffffffffffffbfffffffcffffffffffffffffffffffff44444444
-- 091:fbcffff4bcfffff4cffffff4fffffff4fffffff4fffffff4fffffff444444444
-- 092:fffffffffffffffffffffffffff999ffffffffffffffffffffffffffffffff88
-- 093:fffffffffffffffffff888fffffffffffffffff9ffffffffffffffff8fffffff
-- 094:ffffffffffffffffffffffffffffffff99ffffffffffffffffffffffffffffff
-- 095:0000000010101010000000001010101000000000101010100000000010101010
-- 096:0000000010101010000000001010101000000000101010100000000010101010
-- 097:0000000010101010000000001010101000000000101010100000000010101010
-- 098:0000000010101010000000001010101000000000101010100000000010101010
-- 099:0000000010101010000000001010101000000000101010100000000010101010
-- 100:0000000010101010000000001010101000000000101010100000000010101010
-- 101:0000000010101010000000001010101000000000101010100000000010101010
-- 102:4444444343333332433433324333323243433332433323324333333232222222
-- 103:4444444343333332431111124122122112221222122212221232123212221222
-- 104:4444444343333332433433324333323213433332133323321333333212222222
-- 105:7777777676666665766766657666656576766665766656657666666565555555
-- 106:7777777676666665761111157122122112221222122212221232123212221222
-- 107:7777777676666665766766657666656516766665166656651666666515555555
-- 108:0000ffff0000ffff0000ffff0000ffffffff0000ffff0000ffff0000ffff0000
-- 109:0000ffff0000ffff0000ffff0000ffffffff0000ffff0000ffff0000ffff0000
-- 110:0000ffff0000ffff0000ffff0000ffffffff0000ffff0000ffff0000ffff0000
-- 111:0000000010101010000000001010101000000000101010100000000010101010
-- 112:0000000010101010000000001010101000000000101010100000000010101010
-- 113:0000000010101010000000001010101000000000101010100000000010101010
-- 114:0000000010101010000000001010101000000000101010100000000010101010
-- 115:0000000010101010000000001010101000000000101010100000000010101010
-- 116:0000000010101010000000001010101000000000101010100000000010101010
-- 117:0000000010101010000000001010101000000000101010100000000010101010
-- 118:4444444343333332433433324333323243433332433323324333333232222222
-- 119:122212221222122212221222122212221232123212221222122ba222111aa111
-- 120:1444444313333332133433321333323213433332133323321333333212222222
-- 121:7777777676666665766766657666656576766665766656657666666565555555
-- 122:122212221222122212221222122212221232123212221222122ba222111aa111
-- 123:1777777616666665166766651666656516766665166656651666666515555555
-- 124:0000000010101010000000001010101000000000101010100000000010101010
-- 125:0000000010101010000000001010101000000000101010100000000010101010
-- 126:0000000010101010000000001010101000000000101010100000000010101010
-- 127:0000000010101010000000001010101000000000101010100000000010101010
-- 128:0000000010101010000000001010101000000000101010100000000010101010
-- 129:0000000010101010000000001010101000000000101010100000000010101010
-- 130:0000000010101010000000001010101000000000101010100000000010101010
-- 131:0000000010101010000000001010101000000000101010100000000010101010
-- 132:0000000010101010000000001010101000000000101010100000000010101010
-- 133:0000000010101010000000001010101000000000101010100000000010101010
-- 134:4444444343333332433433324333323243433332433323324333333232222222
-- 135:1222222212223222123222321222222212211222412112214311111232222222
-- 136:1444444313333332133433321333323213433332433323324333333232222222
-- 137:7777777676666665766766657666656576766665766656657666666565555555
-- 138:1222222212223222123222321222222212211222712112217611111565555555
-- 139:1777777616666665166766651666656516766665766656657666666565555555
-- 140:0000000010101010000000001010101000000000101010100000000010101010
-- 141:0000000010101010000000001010101000000000101010100000000010101010
-- 142:0000000010101010000000001010101000000000101010100000000010101010
-- 143:0000000010101010000000001010101000000000101010100000000010101010
-- 144:0000000010101010000000001010101000000000101010100000000010101010
-- 145:0000000010101010000000001010101000000000101010100000000010101010
-- 146:0000000010101010000000001010101000000000101010100000000010101010
-- 147:0000000010101010000000001010101000000000101010100000000010101010
-- 148:0000000010101010000000001010101000000000101010100000000010101010
-- 149:0000000010101010000000001010101000000000101010100000000010101010
-- 150:0000000010101010000000001010101000000000101010100000000010101010
-- 151:0000000010101010000000001010101000000000101010100000000010101010
-- 152:0000000010101010000000001010101000000000101010100000000010101010
-- 153:0000000010101010000000001010101000000000101010100000000010101010
-- 154:0000000010101010000000001010101000000000101010100000000010101010
-- 155:0000000010101010000000001010101000000000101010100000000010101010
-- 156:0000000010101010000000001010101000000000101010100000000010101010
-- 157:0000000010101010000000001010101000000000101010100000000010101010
-- 158:0000000010101010000000001010101000000000101010100000000010101010
-- 159:0000000010101010000000001010101000000000101010100000000010101010
-- 160:a0a00000a0a000000a000000a0a00000a0a00000000000000000000000000000
-- 161:d0d00000d0d000000dd0000000d00000dd000000000000000000000000000000
-- 162:8880000000800000080000008000000088800000000000000000000000000000
-- 163:0000000010101010000000001010101000000000101010100000000010101010
-- 164:0000000010101010000000001010101000000000101010100000000010101010
-- 165:0000000010101010000000001010101000000000101010100000000010101010
-- 166:0000000010101010000000001010101000000000101010100000000010101010
-- 167:0000000010101010000000001010101000000000101010100000000010101010
-- 168:0000000010101010000000001010101000000000101010100000000010101010
-- 169:5555555556666665566666655666666556666665566666545666654455555444
-- 170:4555555445666654456666544566665444555544444444444444444444444444
-- 171:5555555556666665566666655666666556666665456666654456666544455555
-- 172:2222222223333333233333332332222223321111233211112332111123321111
-- 173:2222222233333333333333332222222211111111111111111111111111111111
-- 174:2222222233333332333333322222233211112332111123321111233211112332
-- 175:0000000010101010000000001010101000000000101010100000000010101010
-- 176:78888fffd0008fffdfff8fffdfff8fffdddd7fff00000fffffffffffffffffff
-- 177:7aaaafff8000afff8fffafff8fffafff88887fff00000fffffffffffffffffff
-- 178:7ddddfffa000dfffafffdfffafffdfffaaaa7fff00000fffffffffffffffffff
-- 179:0000000010101010000000001010101000000000101010100000000010101010
-- 180:0000000010101010000000001010101000000000101010100000000010101010
-- 181:0000000010101010000000001010101000000000101010100000000010101010
-- 182:0000000010101010000000001010101000000000101010100000000010101010
-- 183:0000000010101010000000001010101000000000101010100000000010101010
-- 184:0000000010101010000000001010101000000000101010100000000010101010
-- 185:4444444455554444566654495666544956665449566654445555444444444444
-- 186:4994499498899889887888888788888888888888988888894988889444988944
-- 187:4444444444445555944566659445666594456665444566654444555544444444
-- 188:2332111123321111233211112332111123321111233211112332111123321111
-- 189:1111111111111111111111111111111111111111111111111111111111111111
-- 190:1111233211112332111123321111233211112332111123321111233211112332
-- 191:0000000010101010000000001010101000000000101010100000000010101010
-- 192:f1111fff70111fff77011fff77701fff77770fff0000ffffffffffffffffffff
-- 193:f7777fff10777fff11077fff11107fff11110fff0000ffffffffffffffffffff
-- 194:f7777fff70777fff77077fff77707fff77770fff0000ffffffffffffffffffff
-- 195:0000000010101010000000001010101000000000101010100000000010101010
-- 196:0000000010101010000000001010101000000000101010100000000010101010
-- 197:0000000010101010000000001010101000000000101010100000000010101010
-- 198:0000000010101010000000001010101000000000101010100000000010101010
-- 199:0000000010101010000000001010101000000000101010100000000010101010
-- 200:0000000010101010000000001010101000000000101010100000000010101010
-- 201:5555544456666544566666545666666556666665566666655666666555555555
-- 202:4449944444444444444444444455554445666654456666544566665445555554
-- 203:4445555544566665456666655666666556666665566666655666666555555555
-- 204:2332111123321111233211112332111123322222233333332333333322222222
-- 205:1111111111111111111111111111111122222222333333333333333322222222
-- 206:1111233211112332111123321111233222222332333333323333333222222222
-- 207:0000000010101010000000001010101000000000101010100000000010101010
-- 208:ffffffffaaaaaaaafcfcfcfcbfbfbfbffcfcfcfcbfbfbfbffcfcfcfcbfbfbfbf
-- 209:ffffffffaaaaaaaafcfcfcfcbfbfbfbffcfcfcfcbfbfbfbffcfcfcfcbfbfbfbf
-- 210:2222222229999999298888892988888929888889298889992988898829999988
-- 211:2222222099999920888889208888892088888920998889208988892089999920
-- 212:333333333aaaaaaa3a1aaaaa3aa1aaaa3aaa1aaa3aaaa1a13aaaaa1a3aaaa1a1
-- 213:33333000aaaa3000aa1a3000a1aa30001aaa3000aaaa3000aaaa3000aaaa3000
-- 214:333333333ddddddd3ddddddd3ddddddd3ddddddd3ddddddd3d1ddddd3dd1ddd1
-- 215:33333000dddd3000dd1d3000d1dd3000d1dd30001ddd30001ddd3000dddd3000
-- 216:0000000010101010000000001010101000000000101010100000000010101010
-- 217:5555555556666665566666655666666556666665566666545666654455555444
-- 218:4555555445666654456666544566665444555544444444444444444444aaaa44
-- 219:5555555556666665566666655666666556666665456666654456666544455555
-- 220:2222222223333333234343432333333324343434233333332343434322222222
-- 221:2222222233333333434343433333333334343434333333334343434322222222
-- 222:2222222233333332434343423333333234343432333333324343434222222222
-- 223:0000000010101010000000001010101000000000101010100000000010101010
-- 224:fcfcfcfcbfbfbfbffcfcfcfcbfbfbfbffcfcfcfcbfbfbfbfaaaaaaaaffffffff
-- 225:fcfcfcfcbfbfbfbffcfcfcfcbfbfbfbffcfcfcfcbfbfbfbfaaaaaaaaffffffff
-- 226:298889882988899929888889298888892988888929999999222222227bbbb707
-- 227:89888920998889208888892088888920888889209999992022222226eeee7006
-- 228:3aaa1aaa3aa1aaaa3a1aaaaa3aaaaaaa33333333222222220000000000000000
-- 229:1aaa3000a1aa3000aa1a3000aaaa300033333000222220000000000000000000
-- 230:3ddd1d1d3ddd1d1d3dddd1dd3ddddddd33333333222222220000000000000000
-- 231:dddd3000dddd3000dddd3000dddd300033333000222220000000000000000000
-- 232:0000000010101010000000001010101000000000101010100000000010101010
-- 233:44444444555544445666544a5666544a5666544a5666544a5555444444444444
-- 234:aabbbbaaabbbbbbabbbaabbbbba44abbbba44abbbbbaabbbabbbbbbaaabbbbaa
-- 235:4444444444445555a4456665a4456665a4456665a44566654444555544444444
-- 236:7fffffff7fffffff7ffffcff7fffcfff7ffcffff7fffffff7fffffff7ffffffc
-- 237:ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcfff
-- 238:fffffffcfffffffcfffffffcfffffffcfffcfffcffcffffcfffffffcfffffffc
-- 239:0000000010101010000000001010101000000000101010100000000010101010
-- 240:bb1b1111b11b111111111111bb11111111111111111111111111111111111111
-- 241:11111111111111111111111111111dd111111111111d11d1111d1dd111111111
-- 242:1113111111131111111111113311133111111111111311111113111111111111
-- 243:001122330011223344556677445566778899aabb8899aabbccddeeffccddeeff
-- 244:f7777fff7f777fff77f77fff777f7fff7777ffffffffffffffffffffffffffff
-- 245:f0000fff0f000fff00f00fff000f0fff0000ffffffffffffffffffffffffffff
-- 246:77f77fff7fff7fffff7fffff7fff7fff77f77fffffffffffffffffffffffffff
-- 247:00f00fff0fff0fffff0fffff0fff0fff00f00fffffffffffffffffffffffffff
-- 248:0000000010101010000000001010101000000000101010100000000010101010
-- 249:5555544456666544566666545666666556666665566666655666666555555555
-- 250:44aaaa4444444444444444444455554445666654456666544566665445555554
-- 251:4445555544566665456666655666666556666665566666655666666555555555
-- 252:7fffffcf7ffffcff7fffcfff7fffffff22222222233333332333333322222222
-- 253:fffcffffffcfffffffffffffffffffff2222222234bbbb4334bccb4322222222
-- 254:fffffffcfffffffcfffffffcfffffffc22222222333333323333333222222222
-- 255:0000000010101010000000001010101000000000101010100000000010101010
-- </SPRITES>

-- <MAP>
-- 000:00ffffffffff0000000000ffff00000000ffffffffff000000ffffffffff0000ffff000000ffff00ffffffffffffff0000ffffffffff0000ffffffffffffff0000ffffffffff000000ffffffffff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 001:ffffffffffffff000000ffffff000000ffffffffffffff00ffffffffffffff00ffff000000ffff00ffffffffffffff00ffffffffffffff00ffffffffffffff00ffffffffffffff00ffffffffffffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 002:ffff000000ffff0000ffffffff000000ffff000000ffff00ffff000000ffff00ffff000000ffff00ffff000000000000ffff000000ffff000000000000ffff00ffff000000ffff00ffff000000ffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 003:ffff000000ffff00000000ffff000000ffff000000ffff000000000000ffff00ffff000000ffff00ffff000000000000ffff0000000000000000000000ffff00ffff000000ffff00ffff000000ffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 004:ffff000000ffff00000000ffff0000000000000000ffff000000000000ffff00ffff000000ffff00ffffffffffff0000ffffffffffff000000000000ffff0000ffff000000ffff00ffff000000ffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 005:ffff000000ffff00000000ffff00000000ffffffffffff00000000ffffff0000ffffffffffffff00ffffffffffffff00ffffffffffffff00000000ffffff000000ffffffffff0000ffffffffffffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 006:ffff000000ffff00000000ffff000000ffffffffffff00000000000000ffff00ffffffffffffff000000000000ffff00ffff000000ffff00000000ffff000000ffff000000ffff000000000000ffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 007:ffff000000ffff00000000ffff000000ffff0000000000000000000000ffff000000000000ffff000000000000ffff00ffff000000ffff000000ffff00000000ffff000000ffff000000000000ffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 008:ffff000000ffff00000000ffff000000ffff000000000000ffff000000ffff000000000000ffff00ffff000000ffff00ffff000000ffff000000ffff00000000ffff000000ffff00ffff000000ffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 009:ffffffffffffff00000000ffff000000ffffffffffffff00ffffffffffffff000000000000ffff00ffffffffffffff00ffffffffffffff0000ffff0000000000ffffffffffffff00ffffffffffffff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 010:00ffffffffff0000000000ffff000000ffffffffffffff0000ffffffffff00000000000000ffff0000ffffffffff000000ffffffffff000000ffff000000000000ffffffffff000000ffffffffff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 068:c48a3a8d2105c055c40207735a7582b27ab14982eb02539ae3388fa7d81d0e9d138b9b25142568036a78068b84cc834e1fec567c110395f70fdd8fd167cfc285aa5bbb865375a68bfab15a2274491c6300ba6442e45b4774d3bdb2cc51e9c9b9e69c6563141f96796f84a4821c97ede6461a429f36ee3470faa586bf14eac67f3b4628523ab8b6ec209cf6f9b3b6170775b077bc8a593bb4c8cad16467bd25305cd29dc7db14f468aa680e52edaa0aea00af58fec234f562e7f7bfa5399ba6ece12ff945acd1e729f0c61ce6d8bd64f045895f1c48885828f6e86484285b424abcc1cb8a1d970a393c78aecd74a46182
-- 069:9c411e3f9c37418ec082be4ed4adaff44fe0668d8de408c1e629b67cdee1fe6c2c69b85e6bb8cea77efa076b8e0e809ead8ce0b7b6e5e6423606c94093a4382dd94fbd4c99aa2ccbbf215ebfb9f06d67c251804b4e24dd4567eb01801bac07d0b15060703b883cf9dd4408008e5e5f715d6b9dfb7e2b7633fd68a81988ee49e46b778087f9706bf8801e533329662010d706942a61adffaa70d97870a1c6866f8af801a134b1cdbf6ad0c8e0b178586206422495c8e95d24f89c25235fe6512b0c72740963a7ae03e55def1058c618e6ff2a211aa7dba24ce0da5fc436660c1495545815e301974a034f26fca6a61728
-- 070:41092dea491a12a4eb19219d32b88d11539b50682f85aa0485a180d2e6dc6dd9de692cd324532cc57c41e028c85de8cee848ac9014fbe95a2c1c090c9b2ebe36e485a8c70a3caec15e7551054f653ce24feef082322db4d76ecd5a5300064cc7a0720548d7baa011b38ac28016c4fb596b17ecd5136824157dac345f6cbaf755e086ce5ad92e80a408d6701e5e02d131b0c9ed3b1f854908caf42a20efd4cceb41d7ad71794c3f6602942ef2b1697a0bde5252d905d9270c9f605f9f249bf535b6c0c956b0156af55310f07cc8262bc90ab3f266f07c8d8042ec3033e9c2223cbc6f7199d0429ed62ced322d076a2263
-- 071:2208dd95754678f5ccb5043b125b27dbcd90d43998e7ec17b687301144f0c2369b276cc0a3f9163a430dfb6f9bb21e03a5186172cbc98094acdd6114e599efddf93279b18b5b809b1ff0e04895c4cb079aa8c3203f213e3c33e977a06c31d7ff329dc62a46d6030371c63fe02f2d49b8ba84f9ab82bf3316b3e767a6367e87de21c82b65e85aeb2fa0ceb8f34553aca5cbd953a5a76cb63f3ee850159c85db1c62c16746dedb471e964bec62d5a7d029830333f462aeb99b13afa1743bd624eddbed4ab2366f596b67a7f579cd1af3d6c22263dafdb3ba24405270400598533969cb390a6ca54620ffa165930ccc208f
-- 072:c4c9ef9db7fff411668ffd74a2dd1bb9f04a976bedff1ddd68279a0caa8685eafecd7b2db159d90062912540fd69e4477ecea11390ff90ddfa5034220d3e7a40e265715f3c1b87e074ce3edb7463de7e2097dcad42833524a63c269ecf1d645f38acd77a436c27e4fb2245bc067c40ad1b648aab6cb7bc521ea63cfa58c98f767f277bc1d1acff90f6e856e062c5cbe23fdd3adfffd064dfc6824c7e285f1497360e4b18d5748480474e73dfa08afee222917755d4004a93f611aa751f3650ddd995db6e3e326a1244309d1811ca8db7555b24c24904baf796904e1a7d971805206fabfbf93f20a058daf3919e3251cb
-- 073:03a21cbddc48a14661d408eb81325463ae7a1bf331551957fcef5082fde3eb43e9679a0f07596775607c07fb50be726b356beb4e7034eb24dcbcf13e7e539b24ea81800b76605d25b434e63f67294797a60c4bc5d8fd1f05a52c29e7059f6d723193cd6825e4266042e96af4769ea571c53ac28437e04d147db325654857666efc55ff050359362ed1d8a76f1894343809772ebd649f5a20ffbb630baaf4c673e7a81157767786d90ffbc82aa8d90eb053b19a296bdae1ef58f9e1614e4fab3f0fbfe47c5eec68d9a834fb63efcad02152b6bd415c57c0c8bdce7788499f1282e15a8180f2c2815a4e647070845469b5
-- 074:e4c66da649d12bc12512c5781da8e383e009ab1f3d991d7548e69ce1a3c12e5d11603a135a56f3768332e6d8aff2115de2f078a2ca4898ef13e1c79fa85c5f6160bcd77b3a56e2db03540530a8d53c51331ad0da1459d10b4fa66c743ef74f748037a76c04436f2ba34a2b84055f48a41a2b57756c045668e5fbf537fd63c4be694cb9863017ad5d69b8492f74db991baad93937a0185095fa2b4326eef719791ccf528b8576b2bf3e9d21864cb72c7bffd067ee6fe2c3f525180a0dc6be3df89aad90c6e496d9a5ec007d4cb2ee6641a8a5466569be5c6dc53e93b25048abaca933b07a70e92d131d6ee8fafd719b63
-- 075:d74dadaabdb37f5f3b8bad14e134bbc4e9cd2afa8c9e164a635ebc2c7b4311d4ac25f1758ce7882c88d3062101ca9f176790c09bf56ce942214c53dddb1a7a80585c42004716c1dd84aa3182904086e6260ce294416b4c6a0437d60079e0ea6c334546ddf6b06c9f8c5d6cf7bf15fc7baf4211b34ad2f1968aed7f8db98ac784720bb03643f33b885bf72f73ce81e12b52546885bc43fe861f348e861c892005113ad139cac192ea1110a197105f49aaceb5c059bf1c0a22172f6b90008e05496f79f11c747a8838081c4bd4573af5c04fd8e26dfe6df655b791e566d6b96f685e3d74a9545e06a6bce3880a41a09b3f
-- 076:e05296b8f0054d97ebfb7bb68b7507dd225f1a5884e6b6fa93151ded851c11e472cb5c36234817f1056ce90d1cfee3c98924c961ad021bf44728a6c0a459e59a8ec13d168963d3d1e4a143ad76adb2a38cd40683b8e8b6c244e16b0349b6ff847c72fb880d3b8a8ccbdaa71ec2de9f98e39db7177c2a57ab65bc452c6b6806643d4b0730cac4bca4782361190f8302c13e6578388ee67dc48c9173f0c235aee4e91db610cb613a0f612aab442fa37b68637a6f1c5bf84cca742a1e22ce9074424cd433bdf840178c804a16cf1c7bcb128f2e68fab2ee58142167ceb55231c2e0350b110ff9ba1c471ac5bb779bb404ee
-- 077:1f433fb39dee362824c27c67a8e442edaac32880a8c791728cf61d55c7680f1da1dad0f1e70db5d90db26cd92a776690cde3d298ece21be68d3324afe2fc37195d056a5b9c5c67f8020fc0aceb4c7d83c654a7d3116d8a6f3089e56dda0f6b50c05ad0aa5894d5ade92e3d756f3b0f509663e098c2745a683724fd2f6ff3605fe4ba73ecd4667d287ac5bdd0ec1861e0ecf50d4e485dae16b25b62a6248277b43825f6f816571d1094bb527c7f4db02d430db07ed0c006b62da1afa19cd1a8114e364e9b528b78a8d5a736fc2c245ff36d343f1f53188da00055c1bb55f1fb900a60bcfd281276aca806ff0c2cfce898
-- 078:081ddebda1264e2c5c4e7503133213f5faafa346b33e8ef47b21928f5b0816331e2c00b9b5b3f14ff946bedcf4a2692318ed65790aaab100572b7aba11f9ce012acba8a58be27a80e773fa08e71c45b8af941d76110a509f9bb0a240852011f9b2d5eb1637ac8d67c8718592b9f89feefef0aaf9e3aac7647b748ae33de64d4688640b6098c8389ae4b6a3365ea10f8a10287457a7aee87fbf3314d40f49b86419443f3b55ab6ef14d1b1d2028a282abc321841e559a8e7938523cb471b6307e9a3f7f17cd6b2ec2016b453ff84db2df1ae778447a9bbede581d4d15b433b475d4875ec0ff28500523a096ff0e19f179
-- 079:06421186b14697a5e1666d63c38d6d4c5387c0f3ae693b97ef63c66b42eea3ed8285eb7bee8b095eb5362b0d5c62b64975424b7f34879b74de0b42a08444b10f7d11a359f3314b017a0978447f188d185d9c51b60d20aaa7b702daef708e290fd50a92b245129726bd4ef80676440e4b32bc30ac2df827d53f89d257371cc500b6f3222e328b3dd7e522006d1c8ce3a826f62de413077651925d99e239af4addb5b17ed4aa5b1bebc41b828eb067254f3eb505a917947b4f829dc6add28f8d7e485da7acce284caf3d80f303af4e700a1faec255ef53d50f8167d79d6a2f769f527cc9d0dc646110114c3a465386ed8b
-- 080:53d9cdbd8906f5a58e3c3de2e112400a61bc27cccabe8913c32813d99dbc391fa9623205666f76a53502c5bafa6e3aecf7a90a425f7dae7c4cf3512b062a48fc5f6e6ca1b47dccb4227fec1b1a04531eb9de0b9e915aac380242a6a297fd7140d15640356694b1392c7948f4abaa2bc2ff710b70d01da431b7951d6d3eae53403e69c4d45275fa4a389c870d82e8ea07632b1de423bb09391e5370082a9f5ce3982389df4b4747740bf38d43e6a5602ddd0146854d2efa7fff7a5b31296a00cfcb0799c6c70e3b88a4a92816fd6e5813747f8f88523853abe92ac89fbf63b44c289db271fe33cb8dcfeb4d6cc293bbae
-- 081:2a97d80bbcd7ea47eaf038081dfce5e9635011aa6cf96fa78f83a6a407a4a23901ee2616c5321d2e497359d453802992a3fec16c3536a4809e1006d2fc85220d0e928f5a554468bd17aa90da2578eeef75aa06b9c102daba55a609e5623097c49f3a774abf1a21709dada988420ccaab4fa41c885c8c9dcb5803bfd0f7e1670e2b2036c958d9e1b2b501595db42e1326103eba5d42bf5462e05e705ed94e0fef30eab3b37cee27386ac8fa803a44568517c1366f20eb8cae0fb3324513a395e20930651e10fdf3fb483f2b4959f116305b46f762ea2759978498d39be893e630524a7cc625f075c3ebc405a41ca75114
-- 082:beca14d7bf8276da35686eefa06bf2145156ab550c2a1fb4f5fe7cfd52a3c084ac34851c3e9b6ee78c7528dc101c745d65d720187be7ed435ae127a6f8412faf969fc9f9449236b86151928ff5626ef9467d89bdfcb5c8fc9be318f2664fd981a838638d3609607e3803e78b3f43406a8e886f2765fb4906a5e3943e809fa412f447316968fb148d9968fe68b1426edebb475f2f10095b81154dd9e65e15749f1f4ab0ee34cf2ccb6e90853ee98a80890eb3b98b26705f05a703c75922d2a501421a3a3cf29e86648553fd980a485b98846c2baff75f176a81c7a168589fe668cceaf86aa5d8480c2b75ce0fa635deeb
-- 083:686d177d3037d4ead7b7ffa5e725b263da9fe5e0f5786bedc0e3d6be39d0256de7089775e626ea73d1aeb8962bdb1fbfe6a31e79414b6f6495e3be64202d152b0b19d4e3c340d88c05c430e27f8098c12223872147f9508f218c36a95c6c4f89cbc3b4100b546bdff1a5a92867b53e77fdad77742b0306b7d42508c3d9f87031fdf28655ce6e47e00b99b16da599d5d8cc5edf7998ff5efe00c05ff409b881bb166845ba61910a785600f29decee2484a672a39498070a4effa28dea42f291a3b7e441255f8b1d32b12f8e0e492bf3a0be6a96e12adc3879942d4d3e535ffd2303aaa58bb23b67eaa6d1b5670578fa0a
-- 084:5ed09b901fbf1c2f0ee6f8e25eb14fc65aad8a4b4da2e0b9244bee294f4a2a58b5ab376166310e31a82b1a9ec9a4bdc754b44c87e8d81f2f79e3852676d7474340e7abc2a49a36921ac22870dda8ad411c5de3fa2cf1b17fd4a2405b48beef81689459d0a59db82049e3e6a38f2a2a392a8a85dd6d9938846f11dc332eb0c3d3acbffdbe8bf0f7977f42611aa499c50426f291f725952903ce4fc73d37dde4d3b58a7e756dbe494d769e537e5ff4e5b836a1dd27e3a70e44f4a2e4361f4af08edc6da6278c261c6770a29d0489eb5c95d7a5b6c30a3b11624fe5cb2389e08d07f20c408d72721a6af3ce2665ac72e95d
-- 085:187abb2f120a81db9efb881f158317ce8a8cfe1b28b0b8f1a271729021fd7bdd4fa4b6ae34a89de3620788fe54f3e64fc84a3bb38c9212a412a030108c00a829834c0febf649836053d7b28bd98548f3920157f1e15e8bf6401648056d9dea9512bf4f51cc2c5b41c26cf652bdc68e39848e3455c5448e36a0661004f948ad0b8b64e4934464e7f96f679299e22df520b9a4dad04965b81564402bbf4a5dca54a43a00e86429cc3e4b9b016f0bcab3fc568fb25244cfbcb49e234f572db5d71260e9fb0a7da07366279f51d48adfa56365cc3bbd4890ea15e3e4eecc3548a6be1d4ca703e37c8cdb40014834607aa240
-- 086:f009176f0840a3ff79ecb7f8263528d0f86618ad12a8e621c989d7441673be887c27af7928404c4fef3a7b1a573d8acd3edaa5ddd28b88c4ae16a6d528e2f2ad8d4f7ced3a7b2688d548cb78e7b9f5c81bce2a5457252a46b4bdf73c9b2324ffc9309b26cd948b2b653c4a86e271632b29a295d3e916065338a141ff9e5abfb74cd47949cfd023ea0dd9b8b9f712deb49e20fb01708981877030301f4d27eed959db6ee5e8ce8bb8ba5687ae172b709f6b7c62ea8f6b740b0ade445fd8652525869842732d944543bf95511a77bfdeaf7bc1cae0e6defe5acfd96d7410b40e7e2e8e4136adc760ad4fbb84e31c449be8
-- 087:75c9e9556386bb43c44ac8fda13b116e354e47eafa69102b0518dc6e02b3468eea328b6e2cad9a40bfac762fd1a7671e884e4f4af7f9a9e87b3457cb4e0f1d39fa9540cf11be786b168ddaedcfbb3dbc006c95c1b2d71996ac45b9123a71fa92747d4e32ff22c8824ab175b2ceabe37bef7119a2e363f1a4286d9ac8b53680d009ca88f3ec2eb97617c317bf91e799bb0450f23fe660802b14b4699aa1101a56714eb87c82cffb97f2d65446488fb81322a78dda6ae353391d49014bfe0fc7db960ec33b61e77a0afa4dae191628eba73771c85fc90bfad19b254b45ed35171c0eb6ff19893b2698c9b2a905c9891990
-- 088:46689f6f05a44514e9deeea618ffd1410a44abe1b68181dec9be5c7fb4514f79b8b6b94129002158fb6b1204fc4d7f915bf8d0b8db5e83f70a4259e9bdbe75c12f5655196802c97667c3d3dfabd6e8604b0c41873531cb0a45bfaed228528b837d2eb580f323549acfe9a4cfa6bc415f861a5320b272b5fea911b10c539de4198258549b7824b42080a2231b76e9bd2041cca1191e279e34ae6a2ce728c2ccb798603d84cd2b0f2084819571c0c9798f1238c9f368c79af9974767c5374e80dc9c18a09302bddd2d9fb2303815f277b7cc5c0b6ab84482ba7503f1d206f79eb074f2ab7942328e77ff4f898ecb526900
-- 089:ae1a9fe486098e1ec6687289e4392b7e98f7d87063f0be7f88106a5c73476b6a52ea8cd34f0e4c0ec2e2d317783b80033f04d7e85909307e713cbcf5d28cdabe217dad0c66936f2990376aac3610287a11b5a7b7394b7700ccecef92d1f829303cdc79cdcc2e5dcad439d33638636c2b7859c7440101c4c30fb0cb83452edbaa0da73cd1733b2eef7b6453d59bf5645262d3c0c2e32df63a6b4fe9fdd47ef50fb5dd57b9674f87fcd9e63c01ee3443fa3ad51930d7b46eea654e64dc8b7a15f03bcc84cea704a1e828821f18ca2c7df9d3d62bf926e34192c95c6be1c73bf0e4eb4de1ce4a3d4dde223ecfae7f69f871
-- 090:a317cfbae926a7d7ce140ddc42b6743920ad0caaaa00b17905843bd5bcaaf211b36df03d60527c75f977baebf8146449bfe07a303ef2688ee610289b55beabd59219eb3b1c854f7767182ddf6ef43e16da8d2267df372959c3fc4ee1ff45c6efb11f0645b2db913039472a695202b037f8b464c9eb4d83f7502733b22dbfa55e7e235343bce533d5e23d69e4d301a7b76925e643829cddb74fe48532066ecedf0fd399bef0be4a6c06625c31b5de193f94aed756e2d83a19879b15af4cddf6a1e1f7221a68f39bcc5d5d5452517e20340a2837f4afddeb327d67be27d283630279cbbdfa6688d02a7649cb68c12f62a7
-- 091:19234d95d271836be213193ff31c8aada0936be02f2ca3c9792b016f43e6c74ea76b2a2b81de15140a5cbd114ef3ba4081f39d06140113c6c39602f11ba122d426a11cf57a5bb7631fe5f89860a757797d66b45c70ad186bb474e0e8c40c03d96ead137a5c02d7d6dbad0814d822849d20cf8f45dd39a2b932b9862c96edeee21f8b779be32290ca68c9168360f5be9e244f3aabdd2f25dd6b22936668014c246c79482a1ae0c7b8dce61231a5339c8f9583bcd4229b4d114ce659f66be4a96da20728ee0a813788a4cebc4eb40293c7ae124b414efb440d8beb4cc3df87114f48b164b60386765aea5f9035aff6f3b7
-- 092:e376c6247b70ad9f76410893e645e110052ab7b382466f7bcec6fb6b1bdf6dfe85a5f0b3e1968d044dd21620d84ddf2bc437151144c2730b65db98bd0e81c570d79e456e2c946e220f103692d0d922f520431554b4596e1b725a01ea54aeea5686714f6ba3e87c45dff5e4e04732d558c36aa8ca6160838fae31599854e23bcb5a66cc098da1814790e85f8beac7d54354ccfc031da2cad5f16d88a692ae219e77877f33da9331ea780eb1803aa05ec2c098c73a81a288e2393829829b0a5ac536851a52b1750c3b5203217a9be668086633a46dd6e86f3b4471512153247392dec08d1578ec7663699ba88ec6cc0ff4
-- 093:1b4a595992116ed84c175935e29d0ea5b3030fe515bb6338cea14a99218c70b9a43e04bacd310da9c94eb4522fcc1ed52122950a0b780aa1b0f55c5a1212c54e4a55713e351587e95412e57a1349f92772ea248f29c81fb019efdb85989426e4512961b40ff7d658fa67eaf8de294cddea2f585c794384cff2d27c9f040190dbb97e2aeb4e6129d00bdbaf931ab9cf55f382848addc769876e28118044582cc68f3b093091fb999a1577bc17667fb126fc918d805cc96fbd97dd6b97b79c3ab15582b87c1b8e31488bc495c5fa29e8d783e3849751cbaa144dc5b45ebe36195c97cc85e2be914526754c28f5f57fe8bc
-- 094:003abac1b20e53229a73b59cc8ecf5544cd2a004e04272644abaec018c0bb07a07b7b6ca7d8e38fed6ed41ca21eaf0306a2882c754a7880b627f968b23758790b8e9cdc4a32984dfb0512b1590af80bdaf38fc0f7e623fd4866c80a3543f3702e46a7d552611db6b10f16e3246c35163b92dad359adce10263a3adc946042680ca67949015fb8d58454f690854097013c4a9cb1e9d12ce9274651b6b475443f0caebe011a376f6a18875145c51e842a503f95a65718392daae906a33004a5982df0f339ae5a4bd584330737f0ecb0e8bc5bbdde7af2a4434a6f5dfb54b0595204a1efd04b130749414a4f7f35a77cecb
-- 095:a8f35c63b264c979fa7b87abf7345fca45b070cbb39499982332d1b672764372a1b3c7fb0ad54f59f649c9e5adff3fb611bda37a3d2761e471941dfbccc8701ed97dc9eb87a075fb32595a93e293f4785dd94e316b63ee67df2a3f778cdaa4a36562c827a401ab82763df524ba4f0bb070f2f98bed6fa0f8a0c61d0ddf5262d6682a8b7fb1f77f030efdf9e8a6bd2f3397e82764d5c95470a85dd8f6d3d19a935c2f43e9852961581c8c2905ab9f1ae482e4106722bda717f21e4e931a55fc677755cf6fb43850a1a8c0ec627452521ea767d732c486ec38d85ee371955b4fa4c42d22ceea26d9cd36cece58698ec167
-- 096:094e259586f4349bdb8f01287812b5616d4f7905aae01803859a60dbde3a6d38a324e973d6e46220e3d52a3fcd2868daa43c9b6a57329b7425d6702acfc37be371968986d778c5fc7562292002523bfb074084cf1846c5e6906ffbaf01a01cb759609190a84967791e62cbc1639db5895d3ca13a1ae25d2862246562705e080fc0e4b28c4caac1223d2fc76753858d9e32fe6e95e275e5f3640cd1868e8d035fed94e56f91c362f6d8669bb5d2c21c6d6e493bd2815a6bb260e9c3cfa3980061a498f3a8038f88215d581dca347ccb92c7d11e9e4d48deb157c0706a32792bb8af6f026fa25305a0e0e44df9d8ad8d5d
-- 097:85bb42a6d5834a03a374911440699b617ef7a002c8588ca9b083c3d20c35c8ea14011e110b9d8fdd47c9de4795149373c2fc01792fe26135aa7022210431cc07de8b939b0b10caf8f1aae6335269da5ea9996f8ab2e95c211bf372a81299294f4f027109a644863a731cad1708b5129fd60657bca4f13f51c2d9e86d4ccac7c6d7c326e2d95fa1cd83ef83e6990436a5fd72fd3c43db293328916dba73b3bdca50153b1de1f2beae801e3e379625bc745de03f4f35588f136eaa236f2e161a231f0019a70d0b9be1bd7c4ff8dcca943ce2c67bc7c99dc7f43b2583519e130698cc4cce99ae4d3550f9f05262f1452454
-- 098:529fe9f7901bbd98d9c09d8dae26858f99c338ee331c240781861006fb080d0c579d0e70f1820968dc5d45cb567ca6c271a34d01cec8fa881addecb3014ca08317f19338efaab9f6be7e43f819ade6b41009de464c2e30b42aaf7bf985af8755e0aa4ed69ba9554c300c8ae04d6cf8bb326ec3f6e767123bea7545532d45bea284dfe729507474a4d8b4495e5ba94a04727c6d463df2e889692fa264b740dff50fb10695bc1565051bdf286d1cbda6bf4c725203d67ef67b18be6cc93cbbf2e22a8093cb9953b74a1fc4e78463b57576191243ce3780151634da8ca240043559d3cf6a0d79f3c4e5be69f1a64d5db65c
-- 099:009f570b6fa4e2ce6b230531da10077e8c1c7feb0c83565ca7f5fc3d2f5c8bf9ba496ecf8d1907a6688f2dcb90b6d6b3e72d81655f3928791eacba956a0799afdafa23de8782f4f5a2b03d55171df49f58eab400b8e9e22abe90df9c7538c171fc7c229e97b5275eccb20a505c0bcc799866e9e3a28380fecce0b0e1f1ba04d9788fc3a345d923c7745758f1664864fc2cbce45a52c34e6cdef0e865883a2bed8266fd765f5719cf5a53edbece994e3ca3e48aa7a16f6d29d9480a85e95616552c7b1fe65a3a180ca3ce35de53dd9e2dace0f85933e4e9e51e5d608138b1c993eb9dc1b7d3aa0c58fb15d670c1d4c0aa
-- 100:ceca18abccde48f59bcf0ad9dc1380ee8f81daf0336f3e518bab4e43b8ae6aac9212dd99a1475f0759a097a0e756e10bc14b6f4c348c5e15d10de0dcc4289895c5eccb6f570e89434a2791ea04f92bf521677925c236563622a1648e64b94a93278a1af23e86e11ca10c88fdabf6c0aae3dab440734ce4587cfa89da909323f3303862daf6645eb40ef9fd32d2a59306c69d2738a6d153bdddaf2dd59cb673212dad0aa62386c673aebc9bc1ac78e67ff54bf6c81114b74f3235b24b3d2f2eaccc9a14988df76cc1512d770671f8e1bfe30183a3384532964b3c1c6f235073e059d2e42ebc24bd866a1ca20db88d1e96
-- 101:5b7402d10a856a70e7bd8d81a97dd7ed220446a9af2e990d5184d89db92fcc978752dd1e671a3fe563f46a869371e9da32e0619b03666e7d083b02acd871697cd80000a03492a6a5835fe78dfe05afbee35579badba60475adf04cb5734f65bc24d26a14e61213c45aa97d847eeac1843316243ac1f1a2e17f673658e6b10defa575e1ffe1c711093863ce0ae23cd208607b41e207f59410ecd06d62cadc54ff805f6f7ac9823762878ef2955429eb7e144bb71ba9537347c9f4434b77ac37a06c879da29395d50d77b28036d0e3fe531ae902e3ab7c55dc9d8a5df5cd11a0447da522b0239b04dd3326db44aff986ff
-- 102:d6ac62520299511aac7b75bb5f5f9fdae9375817f65b31d17935f78a594b097e77ffabfc5e00a3327fe2280e8d2cd1ef213b9fa9866f37251951e0ae1b47e827399a55212c6ccc0abbb625c4861f7a725b9cc30543f6ac7eeb050703dd0468775010e8bb3564622bf1b674129b66ba5535b1b1ef8e4f899df09396c8bc6419da9ec52b8e9d9c9b6863ebcc4d542d559e59c606fa3a2725e05b16c1879d56b17863ca0d16b653cbb01d0a5cf5b5ab236185e6af8bd1adb0e72206752bf37c3e57f93f8e0515a39f257a89c878c00cb65fa989cf30a25ca84f8a5302a0133cc00fda0d00f53bbce81d4361a54f6ebe22d2
-- 103:c3e33f6f06714b06c5b44e7689d2bf71751fe69c3201d4ac93e098c167addc1b30927cd54a430a7d1ddd2105245bf41468eeb3bec2a545f973cb3992cd105988f1d508d80c71303f34c9a0304c2c7a99052a15ba8ac6d295a8bc7e09c6981640f50782088dff147bcad0389dd548fb6e44fd6e193113ee7334485746bc6a087d26210e79aba6dbfde690f10566ab2508184a55bf976b0f6dbe31729c88d01f5ed6e11d4b1e496692a888072247ae6a15b968b4027ea7751b03b0eef90ee137469a255c0fa0ca14265ce78913f30b090c14393a27cf030e3fbcb4beec66dfb329d8c54a735efcb7cd588503f5978c1829
-- 104:c507f149e873e832b3c8daa2450603c3808d6757486e2e2053fc3881c4f40eaebfe7c8055b1f27958559330826c7ec60bf656f5acd398388926c6791bc30021ec49c884ebfe5b78a2986e06c31b2514ec18995159f7e0791afa67c88dae1bdeff5b45d91b16e0c488b4e678c182d3f52cf5256db88e46b90421afdd1c55475ee2feff43cdf0964e73f1474279c5c31042484b7af248470816b52e2bdca0be34491d39ce96f094a9e962f7e15f176de7958df6a0d31f973b56dcf0a929b2c4283f3c303cd03fad207bb2dc5edc0785ee58bb9f54532b4f083ca544494bc5276a26e4de770f4d8e40010d429bba31517fd
-- 105:2d3c06b26ad0ed3b4db0103bc2ca2fbd961ec6c4f56ba917948eb0a818593c0886445e5a89a6a266231aedaf4740112a9c1591bdf1b6fb3794d6a1537f08c689f3712f8eb816941ef7adfcf71174be5a7cb0f65d3957baab44ce72174ed093323681e3ffad5a597933f2f7bc0e2083c9eafa95de9eb39dc834f9d64ce8f1d4c1f04bfb81de1eeace0cf3c8e06a0e892a5fe84ced9836764a542c48a0c38e42b2291a4d22b5fa4828baf301e42353f61228fea172c34b16c5e15aca78ae090e1f21e3004fd332a1ef6169169c289b2b1d7b7462843aea3d0c9b9f8ac6ffe0ca2c62cca45e89b83b0132a850f74a98b207
-- 106:0040dcc1d15ddca1e8d1b9a5a5963870ce1bb090db5ff285ed639977a155ab9d4105e837ed6f9eccd62f7043049fff71b40d6cd5357c5b83ddf3f5d2b83dbf69c0c3bba56ef93d5bb1d41279cc0fe7fa84804dd27a7c9d7b89c0aee7d084d9a503791c13982cff836519b8787b4cca9938c25abe4088cc14e3287d0e89d73cd69281028b9554063693471bc32fede1b2a70e744f5d6c993f337d8bfabd5c3fca833d8f7424f376d96484405aa92afa0e5cacc7d4fc8343ad32624f7d5825016292339cfff13d3bd17f3fe2d54dd7f1698e7e964ae399ecd386a1495817d5ef63b5c3c4dd9af8dc6131415b0b040fc7f0
-- 107:33b0ab051720853d84bf3d077693e75c21cd2b3d981117df974e351f156f70b18f73ab0ef66ee5c0f979384cf122e06fd2eff768dc378f10619ec75754addf620dfe529f780623c6647d1135cac507bfb6338398eb0285ac9827f0b0f422d8d2da763bc797112bbc8d88f35666f46a2711415843e4c7af10205adcf2dd12fa048cbd34990261e86616f1c7dd7c3807f80a15edf01393cc411fa5276a86e837942ed8a9fa35e8a2824c95b44ee926ec2b6d1b40d1cc704ab55dbd0cd8d78cbef7f1b212c4c4b84925f969836f1581e4cdbfd18d9dc51d44a94a12647e054a29db037a748b9d2b1fa048e0410a16040ac0
-- 108:3da22b4a4aded3a1f1e691230eccbe76df02f734bc2345bdc2f15806bf12e4f4569b10a8bd7176b01a165e250e658f106b13b22d85eb1d2e8cf3b2212c8dfb6f54f2b4d88703eb99aaafa60016b67fb988f637479e76df13135229d5746274ae69cb0aa6b90fd57597db54ff6bfc03a94ebb3bd8d5b03fe9921f1a0cf6eb33a9f2d17f8c0bf8e9bacb4376cb7d4bbf028eb730e4a553605eb41b6641400b97ef5c2f6a91e091cd5144480b5953ca4d1d8873348fc4259e7f3837820ee40b241897da1fc8fd2d72f0d8345c8af073a9358c0e25c00a87d000abe1e52c69f1a2f4f350de9fb911c956f8879a887c4d26af
-- 109:94f0fa46b305f474dc32c687742267e2b9bd5c844f8a28548cd257f3cc9d7736c951b7335441daced845b4660869ee7d8f3672341ce7e2ee8ffcd35a0ffa082c31f915624a2e980646de5772cacb41c623a8d5565f7d45302619f8c9b964f2abd1ec579aba9969762e7421f156331687467454bc74d72a83005809fdd8f9a1f399fbd81bc8fc67e7b8db971e3e26f346ea0e2dec9a93fdc4b7e2783f055f1df4283b3aa21985c7630666ddcaa4d9efbcd9706afd658b245160167c7be65d1018479897a79c9710d385d917780746599823be7144451a27731d884236ad33a0d91062c83c5ae6bd9126f39c0169be2aed
-- 110:f35a6af4ee66b91ec92d57fe1718a450e822907903bf6e7c26fcbdfd306e0d26126dd49de02fc59e01d52f0c1acc10987e40c8f6f3d1b0f9b3d60bc00044bab51ec0d923c9f0799ca837d8b86058ac6dd20325eae80c1a83d69385a5b510c4da73e68d0970ef374086b63ea7bf45071f1453be5f8b70b636d564e4aef546116217b2d03d586d540f468f7ab8de03fcc5cbf5fd6d0255545dfec98d9edfdd221a88fc29fbf82a4704a6370d5865c550b5d7ffeb443eea66fa81a14cca2a2942e5d38d36f5213e2cf8a32f288df3bc044b80c7fa9f47cf1bf05131172b3726e0a80be47ca4f521bf0ff9095d8db42aab5a
-- 111:a4ecb50c504bbac7c2ec59703180f60ee4157455a102921ebf17912f4685a8a0eda1ae4a77fa71ed79b5ec5dc8711ad62effed987398e3e98588484bd0bd67bff3c6e9bbde97f5756d15357954310859df3059c8c29f2d338751d861576909a2e72984f8043cdc5de4b954ed43f4c0a2a2dfb5b387e3c7c276c18260dd95ec432e651d6b8c3ddcfefd9123363347b4ce2ac39a644870363266f24fbb9f681f88671f1c2a66c7f1fc4d800f46ab6a620cbdd73b13b4d3158efe7172a7f7e5496b764b4e18106a2a06601dd4df5e58629c5fc61ae5c7bba7e0f092d3d7caf950e7807d2aa601e3652379ecc029dee3cc77
-- 112:e3bb2a0460108ba260b821b839678ced70a038d404935d77e83b7505e5a088282e970783f98a4b7951ac38c316b5a36b58009c0e147e0b9c2f3654c421b80ce2b8f009fbcc892ca073879f0d78fec9a306c3faf0dd6df8a2b764d414c750d51838edae0a132576de5372d9ca165031d1175cc11764c737468fc4fe0c2295558aae65ff18a5b62420e8a8b34025ef0a8279e765c269cea66e937927bb09be2af83148fbb36e96fffdb07b9cdf793eb2798095fef002d7fc36cde8c8932bcac2312e6dbb29aa3ee2b1416ea290646fbe55f4d548707811274f6d2ac946eb6291b362dd6f57b7222a77acd539b06adbd3e2
-- 113:a8992ea0c1b882496173cff56453e7f8e5aa9cef149e3e134d9729566f2839daa0976df19e3ccd510fe01dcd8bb1e88d2dc7c1ae9a16dea969ab4a23a2f21338b675764fcd7f9e74eb4bf64d551be5b191e0d1056574d0f773024b99b4ceba503522e0a270a04cabda8efa95282d913db766817a7b30ff693040e0b567bb91f5183dd7cfb2ec3da4160d7059294da5eddd247e40c4c28eb50359905aa3e20d12b83d3f307220bb7908ba8f1089dff5f1a27cc3965d9f1e198c6d95a3314d945f24b62f324a592e308196765a0c3b47da8cb2a7704ca654b467faabe2728106a4a28a520ac7ae8dfb499e38380a480e87
-- 114:cc3a3f8a63575975ce903f060178aac10256b617b1040cb7c01c73d895eb57620a3d537cb639ee010ebd5941a133a28565873cf1464c4001d6cd9e04128640579f3ff1dbe4dcb16ef47d3ff695cdbd3f6e2de55cdd7122fcf86a8d88f50fc168c0d3a991d3e5c5576266169b4846a3d90939f0af203538203e5113d7e840883a4c5fa5f0c4379beb25c607afd770c91531b0d0e9c781c344a60cfea6855b10cd6f5cde16848a454b4fe05007e9e02bc5fd9b5f2549c16c89c0675fb1bd42d9d6cce9e8152421f2dd1cdff816042948257a64873cdfd38a6046c5f9b7a73f5d8194c5fd9e78d1fb51574b1d50556ea420
-- 115:5b75457d1e59c4c0ec33c6aeabc5a01e7c1a090c60f35abe827f33449a1bc1e8e2e81c66f955577de9a68f920cdc090f802e4ba7459d7d91a9079eb29728f570ef09e554e51352e0db1828e41f0b6194e5836b0fe77d605d1ed79673f05590bc9d9694a2821ca41dee8c9ee9f0a446481259ea8f5b616091748538f67a11d748ebe83d241aa40175af977f3eefa08093f25dc8f480715c478693838cc736d0954944506d9d8d9075bfcd0e6a830f450557501e00ad9776f5bd76755e973d107444d7a23598ecf0540fa8227a740c315bc45f4e623a81f056d1453e4bbeb78bb6043cfe1b489a36ece11751f8fcc53bf2
-- 116:9eb9777035a82075e9863b39617fbcd26f93b9d7cef838013c9cb061dd14823cb20645317c70a8e90c362b7c906174bd21d5bd604b2795d7e6f03af38111049c32c76a7890d43e6d8d03360bfa8727e24829c82243f6c7412bf057725302e8b95c2d4c8c3f90c31ec74cbf1573d72f3e64734c4d6489a22bb8ce35f3e0877d858b0b4cf588d3d53dabda0a52667b80ac5c49f16d2016440483a1ba3c8cb88b469d02591f971f77d9f1ca22e3eaf49b92984f3e6e9f3ad50f75cf706ef6bfd9aa128fa067ba69b8a0118cba0327783b01c4c9a9e3a6f49658b707ebc5ccb7ca4923893903972311c9ea0aa4bc8a947b1c
-- 117:ab5b909415d72d06c9ae210a7da35ea7c818ee2ec4047cfa1c977402712bde8ae63b06e6283bc87a67a954c1ad4f69782f75348d4146a65d36c8d1b0457ac0f486f6d2b862e39ec89aaf7f76d70bd36a688a346ad2acd539a8f69f7a78229dc73beabd670eecc13e31c32a85d6455b95139d1cd13ced1e0ca8037ee3b1242c6e0be8223f87b41ababf7f0993d6259698282f2c1f9a95f91848a1a61ff4c728b9a5a42c0d6af47311976eb0ed20d751ef4ba3e9b7dd003ca6083911e0d32f90637afd50ec52bfcc1c5a7a9dd33e2e565c2f35afb0c97ae199c1fbe23e511c648497700d96faa8f090c5b954d0f6a7a0db
-- 118:e46d904d0ba4c57b4ab4f9a93a24b2cf6a0d77ad92023602762fb4b7464417aefd1c33d5267cbc9356a043727046809a63bced11e2131581e4122fad40513149c09e152a243a0c66d6de3695a9fdf9d37ea440f4ca5903fe2d2e3763e9423424b0abab01d153c76c91cb8536991e4338f49be4f73b57b67a9803273631d37ec10475c411060463e7cd5fb6b506ad98c695e5cf47591fc63dfba13faf5fa1e827a2ad0e4e1a968fe571fe1918fa00ef0410eceaeaf70fd9bdb2712f5ad65838eee09f2734ebfd2f9e1f1661f4f0651bad69b91178f722ac3a39d3217341cdf14d1af9e26455e1d12d074ee16519483f14
-- 119:1f369d31b0f15da3a11a89b36b3e9dbcb327e65ea908989e4d690cc92b24e78e28bd8408c1610046a57ac5c5ac33a8e94a81b7cc896d12bb9c078649a92a276fc769a43c35e01bb48876fe73a0153fb49fae0894d52441a9373badab400475c65dff3214c1a995769f54dade16a0bb0265b2e5d4c3d71c43cb1dce194e49795e25638f30e6f705365eecf741a38007b0bedf3e926d6d2d9211958dc4156135ad2567edee02f1f176058c7b6f8f45b112ed2466520ad6acd95ec6ad22080a61eec7fccdf7641ef5788f984103f2aec91df69972f000e4d80598e63416c87dd67e01ac82ee6e9c45a40a325db19d1e7833
-- 120:f319310f51ba28c99cab0c0d366f02584dea357b2dac02c977075c63ef767726791b8550fb5ebfabc740b5ee12b3a09957ffadaeddabd2fb405ce85b4b298c01fc454bef5226284f9d2d8247fa281f0e1f93a828f7068b8341f7451ff590cbabadeb6fe7b4d5408a2f06a3e25b7f83b8fa48bea7520da801f946ca8e3192684681a52a10784c891536e1eb535c8960b88e3593e279dbf0c6d3c984cb30de7cd0b2e13291425ed7505bebc20e9d4ef07245d00e5e19f82f51707f8d9d3c8ba441084cd7c13d47b19fc653cbd57876c62bfc4abe3e9487fa4ca54c9ed23bcc2f6f1ae1d75775f1fffbf612c1a8d68fd411
-- 121:348c8d16729c971241d1488f5cea752d3dfcf05c8800da48924b80d5e8aabfc0cee0ea64115e5cddb935bd075559ee66487094350fed4dc04fc982fcd31d27c7f662a3af237ad0ff7d96bceb32659321847ae583766e330aab05a975bb560d46617b64567174fcf88f78688a91e36fe0fde3ced52c54e9a5a59b986be7e1fdfd7d26c0c67786cd275bfa4cf9e6f816241bf34431485c32bc2e75f8f19e70cca273c28a9f90a03d23e19dc344b43180ff56c9a6ff05cd12a86ea236dd2f1729e67ddef27a6c0c87ed39360919e623e6b2c9c90a826ff7fe0843a7860db5433875714ea01c461e5c37c102042965837bc6
-- 122:efa0ed8c7806e47442989a24e671876016b2259e06bb0f939b01c2b01116f24e5aa6db8bebcf309fc19fd1c306aef19abd3d8a48a521a4fc48daca262cb9fb4c54e0d10cb9d5c62ce7b924364ff7ab39913050b14431c112dbcaf23a963143a8748966d448bd30bc868b3a62df7cfc7a5a8383cff42bc85657908724fad9643e506f0b9448686a6048446108f2c2471c8eb76d1ccf3f251ab9e62d64e092ef385a82bc1653e39337ba8ac3b105d0911a8de93306f407a1c4b88021cb6f9276b867d65952af002357514684a89dc23b7070efb7f1e7ddba8f06301b23279534f5a758500189c4e509b3bd480793a6b4ac
-- 123:99459609c42b5e48cc01e0cf8d5c30202a1569ebaffa20d490ac9423309ead7c09bb30547bd47b7e7fd1c1d0ccb2a094239c7eb7481bc06a4b888109185a0bed50ebd8c1957e58ff2d543cef48d4c04b52648b3987d18cdbafeb8b18a8f3711528b52c43315d71076bc3ae0f36e7853b41a06074e110a4f703898037197dc8c0ad255285651c0b5239f8b13bbdfb15570e21c1041d9459f735097888e8e318be99988591aec6dfbc9af783ae84dd65d5d5aa5fea41412ac824986b20149bffe23b33b3415a4c879ab6f565d325695c259d7b5bbc33af7d10d8fed969f96d00bb6fe35f09237997d033c038cabacbff7d
-- 124:ad0be43b1cbcab51e835a3c59541034eaded19fc473c886d3d8f6ef67bbd249cffe7294b16f022a759af48f37289ea6070a762d192b9cc552b7aa087ac51343d57963ca6668529223cc0d1e5816e33dca52e367c57d15c3ef3c03c9e477c5f2ed2fb485a3a7b1bea3a1442293ca502b3530f70237201ceb0776d50fb05caad11d92f8704d212f92fe49caa8f2a7769f6661a137deb589e24cb168b132b6066f2179a7c6e829d38f8fe660f2c58aaeb2db6ea63a831c43accca9cff172e7954bb138518cc6a653985639c7e7f52158ca0443fcdc70ef29663b42ca81b365c3a289c59e4ae9f69d3f0a4c38e2d6d41150c
-- 125:8a04ad80509e66fdabe58f6b29b5fbec148a387fd3408dd1cda2f0239026b17329b15ef774d82a39166f88add10cc672596ce97b374d09a566edd836ca1f633cf253a6aa74c6a19b33ae13ecc4153e02320c0e2d466914fab4f00a3f71f9bf72c46fab2da77ad4ffd185aac45710e6f3f9e07832fdc66589ad95402636ab6110fa5a5eb4bbf1c54d3bddce31011a0970942ea714fbcc465bc8c44390782b96453758b4f28cb540523b0c1ccd05103039a4d194024996f6d9f01a80d73eccf00e0668cc2d7237126f0ed61e9548ef170e52dda876348c7aa0f42ba5488f0d5287147b9052f19ba3020c2b13383013847a
-- 126:151417331541eb06723b0b12801293977d0367fffac6ee23779008df3b7a257157ff6b4f89b364e3ec14afdbce12de115c66e705ece60b128abd4f065d0a79957f923e3005cf35eb35a20ffd4439775e7acede792638c47d0f5dd1fdb351dcf67337ab3134a5275ed2502e752cd2cef09bfa08e12b350603f10c5d8a289447df2930d033f0c99226a8a164df1085eb56187983fb2576a00fa55dd171b3974c7454ace4f289a367605b68bdad02bc416a0fa4455696a2bbfe43a21ce9469fa9ddb44aa648065ed3583b8c67524ec9a843b2f3329b9a62e8102873d878c6b7b4609e66195fb6458de64f10170a27e53d9f
-- 127:46eec4267f264d0da1412b46c2a8680e144e7dc5503eca296d5318a009ef4854dabbeacc776ec336cd363575e54d696862e2dd477921eca8f4de429877c9775153798555181ba9040f829343a692bfca2fd18e750aaad270e86098723456fca603d7fd1ae6e3cb695af8ccd9fd023ecc5fa43c2f132f962d82e0da6181e1c6bc25eb76117c3530df3533b0c88be4bdb88f7510ee2cc6fa9b752286cb4bcd451691114271fdfa1ede1e593fa4ea0ec95e7754e245a16d139935612b4da1afd56b2463aa965164811eaadddf96c7daf3d9e2045227c329c61deb60782f9bd648d67e4f7f0b26f3e50ed6d1a4facf92d8e5
-- 128:48268248852f8f2ac687d214c0a4f440b02c63e5b1f967d1270ae5eeb4a2beab4d4eac6140c8983b19209b8cf9e8a2b7f815c0fdf0fc8163e0003a748c1967427336e27f00647191bfefe8af46f84b4841906cf88ab9cc16cab093fd3ab0ecb4d53bc2cc74b4cb3e88d7f0ffce6144cede9261318bd845d3f7c1219f5e34db91d9ed111ee337d7d6c472129fd1337150a628589229cb1b1ff969be37b37fe3360bc25ba5351a714deeb17d4b74035a82088c161de77d00172531ed34bc57c3e31fd951b5c2ad4aed6dbebae37ea36c45566a6107fe946ffb9ae61506f2dc08552bf5120d8c4d31232db6878d946261c3
-- 129:a1e31e082bc02a7a04534887952f9d1dffa9a28746eec83b60c06dc06e9796f76a37a380185f4d428e99f6e3ed672a5f04eb40e790c3eb301313c5fd13ede5b36eb1c0b1471dcd0ce02fc2f81702eaffb0aa99e4ce74ff3fe10813f18005ed05954a3cc6969d0500cf8d95529fe08dadb188156d07c6c13a52366013a3add614bec229e28ac04e4b81a9e013575377849fed9344faa892e5fd2b737efafe4abad7e3443f8661ec797a444fd6d919738122ae3c6ad51ad1d1a9cad4db056dcdaaf8adb44abeb8e9644e8e4127936c39c3d290f34b2ea554c4ebce0a52a0aa7e5ef2c757171464aa55d5b35cd0005251a8
-- 130:08c6d7fa0b077c4084e3b4cb038a72b1b09cecf9b891adcb96d58fcc7274947390ffe459ae10d6e3628c5f9ccaa25382f2f28bf0acbb6f13a6ef2e91338458db5267a4ba5d5afc12febb4d93907a3d56f1c48146e04907b8e2a0b2890b46df33f4bff9c8467e8fdd4e5b1a1d572913c2cee4eca578a75ce4abfdf80143ab35e5d25b88ab63c9908a61459a131b04a528ee5dcd94e2397bf45b832afee051375507d01e719cb7d534e7e24f1e05c6076a2241864dd074d97a984bcab18d0f144e31522beb7193021924a99738b7ec399ff40688357ca3829716ecd793e6bcd1693b8c7757fc3e397938ebbf32c133d8ab
-- 131:b9d0fcff365324d319e54fba4a29051c382a5c967255cadcab9fe7205a98d062023958dcf20b17f8013429f383073b68278e6eaafffe16cbcbc600f5072f6e56a3d40fadb588a0da291302298433bed20481742610fbdd1cc34c783c9100146014558c7b1152877cc4b55f261bffd485f1374a1b20151ece9e6ec1b5b1c85c1ee732ec515da9a573778e36473249a61a7aaa5d6989be63ed2f4a7cbdce9ec035192b26e2074d70c08479e7ab6262f98a4a7a323affd172cbb906d9da8bea4929695c498f199d7986cd96fa9052c2e92f05e5e1cf7e7aac43b97a31fb55471eb36b7691ceef501bfbfa7878925028fd2e
-- 132:2b810f9877450b9d2fe76d5ef51ee69ccec63ca4766dee65fc49a5ec392ab0be75436b04bc4b87cdea23d10943c1949ee5f75e049c995e8b92364d6ce3d8d1d6d3fd6434417b9388324bebd6eed6f555398222d6bbbf064d7bb923c7657688471b8b8c696433ade65eb9eb523cd3b5134a41a499994510dac1841c628a88dcda4563c635fb24d440a2b17e7a7f2dc65d74507526936f3f1dd809e4ecf393447872940ee37c68c472e6a3beaa3d231a024d445111424afd2146bb52793a52f69495c3dd690a7fb1150679e5a61c2931c87f7605aaeaad340cfb4c861ad2ad96a571d9ed8eddd59191333841cf2223eebe
-- 133:d869c7b16fb56de4f2a5f8df4c6a8bd1808244ce4ba3576f4419488affa4223be2fea1bc8add73165006a05800e378029a34f18a9822e8a8677d359b685d380c18c744fdc0fb0c231280e663dc5540d2899f5e1fe6abde04e5682c2d6633ea4fe682b6b6e1a454122b97714ce622cda49ed26e3b857d0aaca3296f512ae03da158a9440ab7ba9bc04addbc765bc6cb1f34e07c9882d9f27210a25425743a37925e84e76a6be90319cd310a9695e634a1a05b6c3839c035ac871e31bb14bfc2590bfcbf80c09ba06ef509e0d6657fae337a437909d0b4f335f669b2b520317b3a2eb0f6cfca3e160adaca6a83ff346ac5
-- 134:c8507f8f10a396719a48ef391bc8c2217c6b098e000a24a64ac20d27b3073d73ac89fad9fdcea07d4941f9521a9c106d2129a959e2fffe5c01dbe2c78e7fc4466b22fa10e91fa7a0d0ffc2f750c618f05dd01712e76c0184141d669071909d949a95cb910a052a6e721989a1515bf9ff9db2f636a124e7e5be18afcb6bcf2419fd67e3ac0b40a5e0578c5c3da24d7715a083e54a140ecd0b6df4240eca248832c5cdb2e8aaba9099fd263cf7021023c91c40ad68d42da5c8b25111e7efa0f38001dbec468090dcc006b97070e9eeb2f5922f587c3aa9b372a5c2cc1a2b696e90f66461775c9c90ccb8825acd1b6dba0b
-- 135:9a63a40daa7a49c191af580d4fce097931d165fb8e4ec8c5f47dc894380718c93f2c82af52fc7d1a3248f8d42ca14dec2ee2f10491efad660fed431d8ecc83493c462e5dd8cbe1c4041c17c2bb2d45749ab5d55958d59208488b615272d11a75c97387213f4f4b37fcb07f4245fe6529b06a48b05d17e4db55a11ace7f02514f12c05e14ec4542a77fcdc3d1f5b9dd9401318eb207114dc54f91fc8913b4a02b02b1a49ea5e3e1658606a5289947950a06128ea31fa5f4a74c86b68c5f74bbbfca76f792d67eb107ecb918787d27a3cc4f3b843da9f1bcb226e09ac7c80bf12eec331fa52f93326f72b1d3ca9684b4c2
-- </MAP>

-- <WAVES>
-- 000:00000000ffffffff00000000ffffffff
-- 001:0123456789abcdef0123456789abcdef
-- 002:0123456789abcdeffedcba9876543210
-- 003:000000000000ffff000000000000ffff
-- </WAVES>

-- <WAVES1>
-- 000:00000000ffffffff00000000ffffffff
-- 001:0123456789abcdeffedcba9876543210
-- 002:0123456789abcdef0123456789abcdef
-- 003:000000000000ffff000000000000ffff
-- </WAVES1>

-- <SFX>
-- 000:07000700171017202720273037403740475047605760577067806780779077a087a087b097c097c0a7d0b7e0b7e0c7f0d7f0d7f0e7f0f7f0f7f0f7f0590000000000
-- 001:6f007ff08f009f00af00cf00df00ef00ef00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00100000000000
-- 002:000010102020303030404050406050706080609060a070b070c080d080e090f090f0a0f0a0f0b0f0c0f0c0f0d0f0e0f0f0f0f0f0f0f0f0f0f0f0f000280000000000
-- 003:63b0734083d093b0a350b370c3a0d350e300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f30030b000000000
-- 004:048024e044f054d0649074809450a430b430c410c400c400c400c400d400e400e400f400f400f400f400f400f400f400f400f400f400f400f400f400200000000000
-- 005:340044006410742084309450a460a470a480b490c4a0c490d480f400f400f400f400f400f400f400f400f400f400f400f400f400f400f400f400f400214000000000
-- 006:03000308131013202320233033403340435043605360537063806380739073a083a083b093c093c0a3d0b3e0b3e0c3f0d3f0d3f0e3f0f3f0f3f0f3f0c80000000003
-- 007:03002300333043605380738083809380a380b380c380d380d380e380e380f380f380f380f380f380f380f380f380f380f380f380f380f380f380f380405000000000
-- 016:030003000300b300c300d300039003900390b390c390d390f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300305000000000
-- 017:030003000300b300c300d300039003900390b390c390d39003e003e003e0b3e0c3e0d3e0f3e0f300f300f300f300f300f300f300f300f300f300f300482000000000
-- 018:010001100110f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100f100402000000000
-- 019:c300a300b300c300d300d300e300e300e300e300e300e300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300f300400000000000
-- 059:020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200020002000200300000000000
-- 060:0100110011002100210031003100410041005100510061006100710071008100810091009100a100a100b100b100c100c100d100d100e100e100f100302000000000
-- 061:010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100010001000100302000000000
-- 062:000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000302000000000
-- 063:000000000000000000000000000000000000000000000000000000000000100020003000400050006000700080009000a000b000c000d000e000f000312000000000
-- </SFX>

-- <SFX1>
-- 000:0300130033004300530063009300a300b300c300d300d300e300e300e300e300f300f300f300f300f300f300f300f300f300f300f300f300f300f300341000000000
-- 001:0200120012002200220032003200420042005200520062006200720072008200820092009200a200a200b200b200c200c200d200d200e200e200f20034b000000000
-- </SFX1>

-- <PATTERNS>
-- 000:6008f5000000000000000000a008f5000000000000000000b008f5000000000000f008f5000000000000d008f50000006008f5000000000000000000a008f5000000000000000000b008f5000000000000f008f5000000000000d008f50000006008f5000000000000000000a008f5000000000000000000b008f5000000000000f008f5000000000000d008f50000006008f5000000000000000000a008f5000000000000000000b008f5000000000000f008f5000000000000d008f5000000
-- 001:6008f9000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000b008f9a008f98008f98008f9000000000000a008f9000000000000000000000000000000000000000000000000000000b008f9a008f98008f98008f9000000000000a008f90000006008f90000008008f9d008f7000000000000000000000000000000000000000000000000
-- 002:8008f9000000a008f9b008f90000008008f90000000000005008f90000006008f98008f9000000d008f70000000000006008f9000000000000000000000000000000000000000000000000000000000000000000b008f9a008f98008f98008f9000000000000a008f9000000000000000000000000000000000000000000000000000000b008f9a008f98008f98008f9000000000000a008f90000006008f90000008008f9d008f7000000000000000000000000000000000000000000000000
-- 003:8008f9000000a008f9b008f90000008008f90000000000005008f90000006008f98008f9000000d008f7000000000000e008f70000000000006008f90000000000009008f9000000000000000000d008f9e008f9e008f9d008f99008f9000000d008f70000000000005008f90000000000008008f9000000000000b008f9d008f9d008f9b008f98008f95008f9000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 004:bff8f7aff8f78ff8f7810bf7010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 005:aff9e7aff9f7000000000000000000000000000000000000000000000000000000dff9f5bff9f7aff9f78ff9f78ff9e78ff9f7aff9e7aff9f70000006ff9e76ff9f78ff9f7dff9e5dff9e5dff9f5000000000000000000000000000000dff9f58ff9e78ff9f7aff9f7bff9e7bff9e7bff9f78ff9f75ff9e75ff9f76ff9e76ff9e76ff9f78ff9e78ff9f7dff9f5dff9e5dff9f5aff9e7aff9f7000000000000000000000000000000000000000000000000000000bff9f7aff9f78ff9f78ff9f7
-- 006:dff8f36ff8f5aff8f56ff8f5fff8f36ff8f5aff8f56ff8f5dff8f36ff8f5aff8f56ff8f5fff8f36ff8f5aff8f56ff8f5dff8f36ff8f5aff8f56ff8f5fff8f36ff8f5aff8f56ff8f5dff8f36ff8f5aff8f56ff8f5fff8f36ff8f5aff8f56ff8f5dff8f36ff8f5aff8f56ff8f5fff8f36ff8f5aff8f56ff8f5dff8f36ff8f5aff8f56ff8f5fff8f36ff8f5aff8f56ff8f5dff8f36ff8f5aff8f56ff8f5fff8f36ff8f5aff8f56ff8f5dff8f36ff8f5aff8f56ff8f5fff8f36ff8f5aff8f56ff8f5
-- 007:aff9e7aff9f7000000000000000000000000000000000000000000000000000000dff9f5bff9f7aff9f78ff9f78ff9e78ff9f7000000aff9f76ff9e76ff9f70000008ff9e7dff9e5dff9e5dff9f50000000000000000000000000000000000008ff9e78ff9f7aff9f7bff9e7bff9e7bff9f78ff9f75ff9e75ff9e75ff9f76ff9f78ff9e78ff9f7dff9f56ff9f78ff9f79ff9f78ff9f76ff9f74ff9f7000000000000dff9f5eff9f5000000000000000000000000000000000000000000000000
-- 008:dff8f36ff8f5aff8f56ff8f5fff8f36ff8f5aff8f56ff8f5dff8f36ff8f5aff8f56ff8f5fff8f36ff8f5aff8f56ff8f5dff8f36ff8f5aff8f56ff8f5fff8f36ff8f5aff8f56ff8f5dff8f36ff8f5aff8f56ff8f5fff8f36ff8f5aff8f56ff8f5dff8f36ff8f5aff8f56ff8f5fff8f36ff8f5aff8f56ff8f5dff8f36ff8f5aff8f56ff8f5fff8f36ff8f5aff8f56ff8f5dff8f36ff8f5aff8f56ff8f5000000000000000000030300000000000000000000000000000000000000000000000000
-- 009:4ff9e74ff9f79ff9e79ff9f78ff9f76ff9f76ff9f74ff9f76ff9f74ff9f74ff9e74ff9f74ff9e74ff9f7dff9e5eff9f54ff9e74ff9f79ff9e79ff9f7bff9f79ff9f78ff9f76ff9f76ff9f78ff9f79ff9e79ff9f79ff9e79ff9f7bff9f7dff9f7eff9f7eff9f7dff9f7bff9f7bff9e7bff9f79ff9f7bff9f7dff9f7dff9f7bff9f79ff9f79ff9e79ff9f76ff9f74ff9f76ff9f79ff9f79ff9f78ff9e78ff9f78ff9f7aff9f7aff9e7aff9e7aff9f7000000000000000000000000000000000000
-- 010:e889e34889e54889e54889f54889e54889e54889e54889f5e889e3e889e3e889e3e889f34889e54889e54889e54889f54889e54889e54889e54889f54889e54889e54889e54889f5e889e3e889e3e889e3e889f34889e54889e54889e54889f54889e54889e54889e54889f5e889e3e889e3e889e3e889f34889e54889e54889e54889f54889e54889e54889e54889f54889e54889e54889e54889f5e889e3e889e3e889e3e889f3dff9f36ff9f5aff9f56ff9f5fff9f36ff9f5aff9f56ff9f5
-- 011:9889e59889f59889e59889f58889e58889f58889e58889f54889e54889f54889e56889f59889e59889f59889e59889f59889e59889f59889e59889f58889e58889f58889e58889f54889e54889f54889f56889f59889f59889e59889f59889e58889f58889e58889f58889e54889f54889e54889e56889e59889f59889e59889f59889e59889f59889e59889f59889f58889e58889f58889e58889f54889e54889f54889f56889f5000000000000000000000000000000000000000000000000
-- 012:000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dff9f5bff9f7aff9f78ff9f78ff9e78ff9f7aff9e7aff9f7000000000000000000000000000000000000000000000000000000bff9f7aff9f78ff9f78ff9e78ff9e78ff9f7aff9f76ff9e76ff9f78ff9e78ff9f7dff9e5dff9e5dff9f50000000000000000000000000000000000008ff9e78ff9f7aff9f7bff9e7bff9e7bff9f78ff9e78ff9f7
-- 013:5ff9e75ff9f76ff9f78ff9e78ff9e78ff9f7dff9f5dff9e5dff9f5aff9e7aff9f7000000000000000000000000000000000000000000000000dff9f5bff9f7aff9f78ff9f78ff9f7aff9e7aff9f7000000000000000000000000000000000000000000000000000000dff9f5bff9f7aff9f78ff9f78ff9e78ff9f7000000aff9f7aff9e7aff9f70000008ff9f78aa9e78aa9e78aa9f70000000000000000000000000000000000008ff9e78ff9f7aff9f7bff9e7bff9e7bff9f78ff9e78ff9f7
-- 014:000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fff9f7dff9f7bff9f7bff9f7dff9e7dff9f7000000000000000000000000000000000000000000000000000000000000fff9f7dff9f7bff9f7bff9e7bff9f7000000dff9f76ff9e76ff9f7000000bff9f7dff9e5dff9e5dff9f5000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 015:5ff9e75ff9f76ff9f78ff9e78ff9e78ff9f7dff9f56ff9f78ff9f79ff9f78ff9f76ff9f74ff9f7000000dff9f5eff9f54ff9e74ff9f79ff9e79ff9f78ff9f76ff9f76ff9f74ff9f76ff9f74ff9f74ff9e74ff9f74ff9e74ff9f7dff9f5eff9f54ff9e74ff9f79ff9e79ff9f7bff9f79ff9f78ff9f76ff9f76ff9f78ff9f79ff9e79ff9f79ff9e79ff9f7bff9f7dff9f7eff9f7eff9f7dff9e7dff9f7bff9e7bff9f79ff9f7bff9f7dff9f7dff9f7bff9f79ff9f79ff9e79ff9f76ff9f74ff9f7
-- 016:dff9f36ff9f5aff9f56ff9f5fff9f36ff9f5aff9f56aa9f5daa9f36aa9f5aaa9f56aa9f5faa9f30000004ff9f54ff9f50000000000004ff9f54ff9f5000000eff9f3eff9f3000000dff9f3dff9f30000000000004ff9f54ff9f50000000000004ff9f54ff9f5000000eff9f3eff9f3000000dff9f3dff9f30000000000004ff9f54ff9f50000000000004ff9f54ff9f5000000eff9f3eff9f3000000dff9f3dff9f30000000000004ff9f54ff9f50000000000004ff9f54ff9f5000000eff9f3
-- 017:6ff9f79ff9f79ff9f78ff9e78ff9f78ff9f7aff9f7aff9e7aff9e7aff9f76ff9f7fff9e5fff9e5fff9f5fff9f56ff9e76ff9e76ff9f76ff9f7bff9e7bff9f7aff9e7aff9f78ff9f7aff9e7aff9e7aff9e7aff9f7fff9e5fff9e5fff9f5fff9f56ff9e76ff9e76ff9f76ff9f7bff9e7bff9f7aff9e7aff9f78ff9f7aff9e7aff9e7aff9e7aff9f7fff9e5fff9e5fff9f5fff9f56ff9e76ff9e76ff9f76ff9f7bff9e7bff9f7aff9e7aff9f78ff9f7aff9e7aff9e7aff9e7aff9f7fff9e5fff9e5
-- 018:eff9f3000000dff9f3dff9f30000000000004ff9f54ff9f5000000000000000000dff9f36ff9f5aff9f56ff9f5fff9f36ff9f5aff9f56ff9f5dff9f36ff9f5aff9f56ff9f5fff9f36ff9f5aff9f56ff9f5dff9f36ff9f5aff9f56ff9f5fff9f36ff9f5aff9f56ff9f5dff9f36ff9f5aff9f56ff9f5fff9f36ff9f5aff9f56ff9f5dff9f36ff9f5aff9f56ff9f5fff9f36ff9f5aff9f56ff9f5dff9f36ff9f5aff9f56ff9f5fff9f36ff9f5aff9f56ff9f5dff9f36ff9f5aff9f56ff9f5fff9f3
-- 019:fff9e5fff9f56ff9e76ff9e76ff9f76ff9f7bff9e7bff9f7aff9e7aff9f78ff9f7aff9e7aff9e7aff9e7aff9e7aff9e7aff9e7aff9f7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 020:6ff9f5aff9f56ff9f5dff9f36ff9f5aff9f56ff9f5fff9f3dff9f36ff9f5aff9f56ff9f5fff9f36ff9f5aff9f56ff9f5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 021:aff8e3aff8e3aff8e3aff8e3aff8e3aff8e3aff8e3aff8e3aff8e3aff8e3aff8e3aff8e3aff8e3aff8e3aff8e3aff8e35ff8e55ff8e55ff8e55ff8e55ff8e55ff8e55ff8e55ff8e5cff8e3cff8e3cff8e3cff8e3dff8e3dff8e3dff8e3dff8e36008e36008e36008e36008e36008e36008e36008e36008e36008e36008e36008e36008e36008e36008e36008e36008e38008e38008e38008e38008e38008e38008e38008e38008e39008e39008e39008e39008e39008e39008e39008e39008e3
-- 022:aff8e7aff8e7aff8f70000005ff8e95ff8e95ff8f9000000dff8e7dff8e7dff8f7000000fff8e7fff8e7fff8f7000000cff8e7cff8e7cff8f7000000dff8e7dff8e7dff8f7000000aff8e7aff8e7aff8f70000009ff8e79ff8e79ff8f7000000aff8e7aff8e7aff8f70000005ff8e95ff8e95ff8f9000000dff8e7dff8e7dff8f7000000fff8e7fff8e7fff8f70000006ff8e96ff8e96ff8f9000000cff8e7cff8e7cff8f7000000fff8e7fff8e7fff8f70000009ff8e79ff8e79ff8f7000000
-- 023:aff8e5aff8e5aff8f50000005ff8e75ff8e75ff8f7000000dff8e5dff8e5dff8f5000000fff8e5fff8e5fff8f5000000cff8e5cff8e5cff8f5000000dff8e5dff8e5dff8f5000000aff8e5aff8e5aff8f50000009ff8e59ff8e59ff8f5000000aff8e5aff8e5aff8f50000005ff8e75ff8e75ff8f7000000dff8e5dff8e5dff8f5000000fff8e5fff8e5fff8f50000006ff8e76ff8e76ff8f7000000cff8e5cff8e5cff8f5000000fff8e5fff8e5fff8f50000009ff8e59ff8e59ff8f5000000
-- 026:9ff9e94999ebbaa9e9cbb9e99ff9e94999ebbaa9e9cbb9e99ff9e94999ebbaa9e9cff9e9e999e9caa9e9bbb9e9cff9e99999e94aa9ebbbb9e9cff9e99999e94aa9ebbbb9e9cff9e99999e94aa9ebbbb9e9cff9e9e999e9caa9e9bbb9e9cff9e99ff9e94999ebbaa9e9cbb9e99ff9e94999ebbaa9e9cbb9e99ff9e94999ebbaa9e9cff9e9e999e9caa9e9bbb9e9cff9e99999e94aa9ebbbb9e9cff9e99999e94aa9ebbbb9e9cff9e99999e94aa9ebbbb9e9cff9e9e999e9caa9e9bbf9e9cff9e9
-- 027:9008c59008c59008c59008c59008c59008c59008c59008c54008c74008c74008c74008c7b008c5b008c5c008c5c008c55008c55008c55008c55008c55008c55008c55008c55008c57008c57008c57008c57008c58008c58008c58008c58008c59008c59008c59008c59008c59008c59008c59008c59008c54008c74008c74008c74008c7b008c5b008c5c008c5c008c55008c55008c55008c55008c55008c55008c55008c55008c57008c57008c57008c57008c58008c58008c58008c58008c5
-- 028:9008c79008c79008c79008c79008c79008c79008c79008c74008c94008c94008c94008c9b008c7b008c7c008c7c008c75008c75008c75008c75008c75008c75008c75008c75008c77008c77008c77008c77008c78008c78008c78008c78008c79008c79008c79008c79008c79008c79008c79008c79008c74008c94008c94008c94008c9b008c7b008c7c008c7c008c75008c75008c75008c75008c75008c75008c75008c75008c77008c77008c77008c77008c78008c78008c78008c78008c7
-- 029:9008e74008e9b008e7c008e79008e74008e9b008e7c008e79008e74008e9b008e7c008e7e008e7c008e7b008e7c008e79008e74008e9b008e7c008e79008e74008e9b008e7c008e79008e74008e9b008e7c008e7e008e7c008e7b008e7c008e79008e74008e9b008e7c008e79008e74008e9b008e7c008e79008e74008e9b008e7c008e7e008e7c008e7b008e7c008e79008e74008e9b008e7c008e79008e74008e9b008e7c008e79008e74008e9b008e7c008e7e008e7c008e7b008e7c008e7
-- 030:9008e99008f9000000000000000000000000000000000000040300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 031:9008e79008f7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 032:9008e90000004008eb000000c008e9000000e008e9000000b008e9000000c008e90000009008e90000008008e90000009008e90000004008eb000000c008e9000000e008e90000005008eb000000b008e9000000e008e90000008008e90000009008e90000004008eb000000c008e9000000e008e9000000b008e9000000c008e90000009008e90000008008e90000009008e90000004008eb000000c008e9000000e008e90000005008eb000000b008e9000000e008e90000008008e9000000
-- 033:9008e70000004008e9000000c008e7000000e008e7000000b008e7000000c008e70000009008e70000008008e70000009008e70000004008e9000000c008e7000000e008e70000005008e9000000b008e7000000e008e70000008008e70000009008e70000004008e9000000c008e7000000e008e7000000b008e7000000c008e70000009008e70000008008e70000009008e70000004008e9000000c008e7000000e008e70000005008e9000000b008e7000000e008e70000008008e7000000
-- 034:9008d94008dbc008d9e008d9b008d9c008d99008d98008d99008d94008dbc008d9e008d95008dbb008d9e008d98008d99008d94008dbc008d9e008d9b008d9c008d99008d98008d99008d94008dbc008d9e008d95008dbb008d9e008d98008d99008d94008dbc008d9e008d9b008d9c008d99008d98008d99008d94008dbc008d9e008d95008dbb008d9e008d98008d99008d94008dbc008d9e008d9b008d9c008d99008d98008d99008d94008dbc008d9e008d95008dbb008d9e008d98008d9
-- 035:9008d54008d7c008d5e008d5b008d5c008d59008d58008d59008d54008d7c008d5e008d55008d7b008d5e008d58008d59008d54008d7c008d5e008d5b008d5c008d59008d58008d59008d54008d7c008d5e008d55008d7b008d5e008d58008d59008d54008d7c008d5e008d5b008d5c008d59008d58008d59008d54008d7c008d5e008d55008d7b008d5e008d58008d59008d54008d7c008d5e008d5b008d5c008d59008d58008d59008d54008d7c008d5e008d55008d7b008d5e008d58008d5
-- 036:9008d94008dbb008d9c008d99008d94008dbb008d9c008d99008d94008dbb008d9c008d9e008d9c008d9b008d9c008d99008d94008dbb008d9c008d99008d94008dbb008d9c008d99008d94008dbb008d9c008d9e008d9c008d9b008d9c008d99008d94008dbb008d9c008d99008d94008dbb008d9c008d99008d94008dbb008d9c008d9e008d9c008d9b008d9c008d99008d94008dbb008d9c008d99008d94008dbb008d9c008d99008d94008dbb008d9c008d9e008d9c008d9b008d9c008d9
-- 037:9008d5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 038:9008d7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 039:9008e99008e99008f90000009008e99008e99008f9000000c008e9c008e9c008e9c008e9c008f9000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 040:9008e79008e79008f70000009008e79008e79008f70000009008e79008e79008e79008e79008f7000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 041:9008d79008d79008c70000009008d79008d79008c7000000c008d7c008d7c008d7c008d7c008c7000000000000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 042:9008d59008d59008c50000009008d59008d59008c5000000c008d5c008d5c008d5c008d5c008c5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 043:9008c5902cc59008c59008c59008c59008c59008c59008c54008c74008c74008c74008c7b008c5b008c5c008c5c008c55008c55008c55008c55008c55008c55008c55008c55008c57008c57008c57008c57008c58008c58008c58008c58008c59008c59028c59008c59008c59008c59008c59008c59008c54008c74008c74008c74008c7b008c5b008c5c008c5c008c55008c55008c55008c55008c55008c55008c55008c55008c57008c57008c57008c57008c58008c58008c58008c58008c5
-- 044:9418d7905cc74008d94008c9c008d7c008c7e008d7e008c7b008d7b008c7c008d7c008c79008d79008c78008d78008c79008d79008c74008d94008c9c008d7c008c7e008d7e008c75008d95008c9b008d7b008c7e008d7e008c78008d78008c79008d79008c74008d94008c9c008d7c008c7e008d7e008c7b008d7b008c7c008d7c008c79008d79008c78008d78008c79008d79008c74008d94008c9c008d7c008c7e008d7e008c75008d95008c9b008d7b008c7e008d7e008c78008d78008c7
-- 045:9028c3902cc39008c39008c39008c39008c39008c39008c34008c54008c54008c54008c5b008c3b008c3c008c3c008c35008c35008c35008c35008c35008c35008c35008c35008c37008c37008c37008c37008c38008c38008c38008c38008c39008c39028c39008c39008c39008c39008c39008c39008c34008c54008c54008c54008c5b008c3b008c3c008c3c008c35008c35008c35008c35008c35008c35008c35008c35008c37008c37008c37008c37008c38008c38008c38008c38008c3
-- 046:9418d5905cc54008d74008c7c008d5c008c5e008d5e008c5b008d5b008c5c008d5c008c59008d59008c58008d58008c59008d59008c54008d74008c7c008d5c008c5e008d5e008c55008d75008c7b008d5b008c5e008d5e008c58008d58008c59008d59008c54008d74008c7c008d5c008c5e008d5e008c5b008d5b008c5c008d5c008c59008d59008c58008d58008c59008d59008c54008d74008c7c008d5c008c5e008d5e008c55008d75008c7b008d5b008c5e008d5e008c58008d58008c5
-- 047:9058e79428f74008e94008f9c008e7c008f7e008e7e008f7b008e7b008f7c008e7c008f79008e79008f78008e78008f79008e79008f74008e94008f9c008e7c008f7e008e7e008f75008e95008f9b008e7b008f7e008e7e008f78008e78008f79008e79008f74008e94008f9c008e7c008f7e008e7e008f7b008e7b008f7c008e7c008f79008e79008f78008e78008f79008e79008f74008e94008f9c008e7c008f7e008e7e008f75008e95008f9b008e7b008f7e008e7e008f78008e78008f7
-- 048:9058e59428f54008e74008f7c008e5c008f5e008e5e008f5b008e5b008f5c008e5c008f59008e59008f58008e58008f59008e59008f54008e74008f7c008e5c008f5e008e5e008f55008e75008f7b008e5b008f5e008e5e008f58008e58008f59008e59008f54008e74008f7c008e5c008f5e008e5e008f5b008e5b008f5c008e5c008f59008e59008f58008e58008f59008e59008f54008e74008f7c008e5c008f5e008e5e008f55008e75008f7b008e5b008f5e008e5e008f58008e58008f5
-- 049:9028b59028b59008b59008b59008b59008b59008b59008b54008b74008b74008b74008b7b008b5b008b5c008b5c008b55008b55008b55008b55008b55008b55008b55008b55008b57008b57008b57008b57008b58008b58008b58008b58008b59008b59028b59008b59008b59008b59008b59008b59008b54008b74008b74008b74008b7b008b5b008b5c008b5c008b55008b55008b55008b55008b55008b55008b55008b55008b57008b57008b57008b57008b58008b58008b58008b5870bb5
-- 050:9828b99028b94008bb4008bbc008b9c008b9e008b9e008b9b008b9b008b9c008b9c008b99008b99008b98008b98008b99008b99008b94008bb4008bbc008b9c008b9e008b9e008b95008bb5008bbb008b9b008b9e008b9e008b98008b98008b99008b99008b94008bb4008bbc008b9c008b9e008b9e008b9b008b9b008b9c008b9c008b99008b99008b98008b98008b99008b99008b94008bb4008bbc008b9c008b9e008b9e008b95008bb5008bbb008b9b008b9e008b9e008b98008b98008b9
-- </PATTERNS>

-- <PATTERNS1>
-- 000:9fd1140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009fd1140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009fd1140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009fd114000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 001:4ce1140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004ce1140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004ce1140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005ce114000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 002:0000000000009cf106000000000000000000cdf1060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000009af106000000000000000000ccf106000000000000000000000000000000000000000000edf106000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 003:000000000000000000000000bfe106000000000000000000eda106000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000bfd1060000000000000000004fa1080000000000000000000000000000000000004e9108ebd1060000000000000000000000000000000000000000000000000000000000000000004fa108000000000000000000
-- </PATTERNS1>

-- <TRACKS>
-- 000:0001800001c00001010000000000000000000000000000000000000000000000000000000000000000000000000000002e0000
-- 001:000795000795006795006795000000000000000000000000000000000000000000000000000000000000000000000000a00020
-- 002:0c6c57b97c57b97c570c7020048c571a8c570c8c57329c57b596e986aaea000000000000000000000000000000000000000060
-- 003:00000b000d2b000e2b0cbd2b00003b04c03b0000000002fc000000000000000000000000000000000000000000000000e10021
-- 007:5000006c1000842000ac2c00dc1000ec1f000540002d4000455000000000000000000000000000000000000000000000ae0060
-- </TRACKS>

-- <TRACKS1>
-- 000:180301000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040
-- </TRACKS1>

-- <SCREEN>
-- 000:666666666666666777777777555555555666677777777555555556666666655555556666666666666666677777777755666666676667755555555566666666555555566666666666666677777775555555566666667777777775555555556666666666666666666677777775555555566666666666666666
-- 001:566666666666666666677777777755555555777777775555555566666666665555556666666677766666666677777777556666666775555555556666666666655555566666666666666667777777555555566667777777775555555556666666666666666666666677777775555555666666666666667777
-- 002:555566666666776666666667777777775555666677775555555566666666666666566666666777777766666666777777776556677555555555666666666666665566666666677766666666777777755555557777777775555555566666666555566666666666666777777755555555666666666677777777
-- 003:666566666666777777766666666777777777666666655555555666666666666666666666666667777666666666666777777776655555555566666666666666666666666677777776666666677777775556666777755555555566666666555555566666666666666777777755555556666667777777755555
-- 004:666666666666666777776666666666667777777766655555555666666666666666666666666666666666666666666677777777655555556666666666666666666666666666777766666666677777776666666755555555666666666666555566666666776666667777777555555566777777775555555566
-- 005:666655666666666666666666666666666667777777765555555566666666666655556666666666666666666666666777777766666555555566666666666556666666666666666666666666667777777666655555555666666666666666666666667777766666667777777555556677777755555555666666
-- 006:666665555566666666666666666666666667777777666666555555556666666655555566666667766666666666677777775556666675555555666666655555566666666666666666666666667777777655555556666666666666666666666666677777666666667777775666666775555555566666666665
-- 007:555566666555666666667766666666666667777777555666677755555555666666655666666677777766666667777777555555567777755555556666665555666666667666666666666667777777666665555556666666666665666666666666676666666666677777776666555555556666666666666556
-- 008:777555556666666666666777776666666677777775555555677777775555555566666666666666777666666677777755555555666777777555555566666666666667777766666666677777777556666675555555666666655555666666666666666666666666777777755555555666666666666666666666
-- 009:666777775555566666666666777666666677777775555556666667777777555555566666666666666666667777777555555566666667777775555556666666666666777666666677777775555555677777555555666666555566666667666666666666677777776666655555566666666666566666666666
-- 010:666666667777755555666666666666666677777755555556666666666677777755555556666666666666677777755555556666666666677777755555566666666666666666677777775555555666677777755555566666666666677777666666666777777755666667555555666666555555666666666666
-- 011:555666666666777775555566666666666677777755555566666666666666667777777555555666666667777775555555666666666666666677777555555666666666666677777775555555666666667777775555566666666666677666666677777775555555777777555556666665556666666776666666
-- 012:666566666667766667777755555666666777777555555666666656666666666666777777755555566777777555555566666655566666666666777775555556666666677777775555556666666666666777775555556666666666666666777777555555566666777775555556666666666677777666666677
-- 013:666666666666677777666677777555556777777555555666666555555666667766666677777775556667755555556666666655556666666666667777755555566677777755555556666666666666666677777555556666666666677777755555556666666667777775555566666666666766666677777755
-- 014:566665555566666666666666666777776666675555556666666666666666667777766666666777777665555555666666666666666666777776666677777555566777755555566666655555666666666677777755555666667777775555555666666666666667777755555666666666666677777755555566
-- 015:775555566666666667766666666666677777665555556666666666666666666666666666666677777766555555666666666666666666667766666666777776666655555566666666665566666677666667777775555577777755555566666655666666666677777755555666666677777755555566666666
-- 016:666777775555666666667777666666777777766666555555666666555556666677666666666777775556667755555666665555566666666666666666677777665555666666666666666666667776666666777776666675555556666666655566666676666677777555556677777555555666666566666666
-- 017:666666666777775555666666666667777777555555777777555555666666666667776666677777555555667777755555666666666677776666666777777556666755556666665555666666666666666666777777555555666666666666666666777766666677775566677555555666666655556666666666
-- 018:655556666666666777775555666677777775555556666666777777555556666666666667777755555566666666777755555666666666766666777777555556677777555566666566666777666666667777756666655556666666555666666666666666666777776555556666666666666666677777666667
-- 019:666666666666777776666777775667777555555666666666666666777775555556666677775555556666666666666777775555666666666777775555556666666777775555666666666766666777777555556777775555666655666667766666666777777666655555666666555666666666666666666777
-- 020:566666655566666666666666666777775555556666666655566666766666777775556677755555666666555566666666677775555666777775555566666666666667777755556666666667777755555666666677775555566666666766666777775555566777755556666656666677666666667777766666
-- 021:777755556666666667777666666777775666655556666666666666667766666666777775555566666666666666667776666677775666775555566666655556666666677777555566777775555566666666666667777555566666666777775555566666667777555556666666666666777775555566777766
-- 022:666666677775555666666666666777755555666777755556665666667666666667777556667555566665555666666666666666777776555566666666666666667766666677776666555556666666556666676666777755556777775555666665666666667777555566666667777555556666666677776666
-- 023:666655566666667777555566666777755555666666666777755566666666666777755555666677775555666666667766666777755556777555566665566666666666666777766655556666666666666667666666677766655555666666665666677766677775555777775555666665566666667777666666
-- 024:566666666666667777666677756667755556666655556666666777755566667775555566666666666777755566666666777755556666667777555566666667666677777555567777555666656666776666666777756665555666665566666666666666677776555566666666666667777666677766666655
-- 025:577755556665556666666666667777666555666666666666667666666777766655556666666566667766667775555777755556666556666666777555566666777755556666666677775556666666666777755556667777555566666667776666777755567755556665555666666666666777766666665555
-- 026:556666666777755566666666667777555566777755566666667776666677775666755566665556666666666667777655566666666666666776666777766675555666665556666666777755566777755556665666666777755566666677775555666666777755566666666666777755556777766666555555
-- 027:555666665556666666777555667777555566666666667775556666667777555566666777755566666676667777555567775556666666677666667777566655566665556666666666666777555566666666666677766677755667555566665555666666777555666777755566666666667776666655555566
-- 028:756675556666556666666666667776555666666666666776666777566755556666555666666777555667777555666666666677755566666677755556666677755566666676667777555567775556666666776666677776665556666556666666666666777555566666666666777666777666655555555565
-- 029:775556666666777555666666667775555667775556666667766667775566755566655566666666667776555666666666666766666776667555666665566676667775567777555666566666677755566667777555666666777555666666666777555667775556666667776666777566756665555556555565
-- 030:776555666666666677766677556775556665556666667755566777755566666667775556666667775556666777555666667666677755577755566556667666667776665556666566666666666777655566666666667766677756777555666556666667775566677755556666666777656555555556555655
-- 031:677755566667755566666776667775567755566556666666667776655666666666666666677665556666666667766777556775556665566666777556667775556666666775556666667775556667775566666676667775557755566655666666666777655566666666667666677766665555565556555555
-- 032:666776556666666667776677566755566655666667775566777555666666677556666667775566667755566666766777555777556665667666667776655566656666666666776655666666666776677756775556665566666775556677755566666677755666666775556667776665565555565555555555
-- 033:566677755666666775566666677755566775556666776677755675556655666666667765556666666666666777655566666666766777557775566656666777556667775566666677556666667775556677556666677667775567556655566666666776556666666667666677666555456555655555555555
-- 034:667667775567755665667666677765556665666666667765556666666776677567755666556666775566777556666667755666667755555555556666766777557755665566766667776556666666666666776555666656676667755775566656666775556677755666667766655555455555555555565555
-- 035:667666677665566666666666776555666666776677567555665666677556677755666667755666667755667755666676667755555555555555555555566666666766677655566666676677557775566566667755667775566667755666666775566775566667766775577665555565665555555555565555
-- 036:556666667765566666667666766556665667667756775566566677556677556666775566666775566755666677667755555555556666755556655555555556655666566766755677556666667756667755566677556666677556775566667666775655665566666677765555555554655555555555655556
-- 037:666666666666665565566666677556666667667766556665676775577556666677556677556667755666667555555555577667766556555666667755665555555556655665566677557755666667755667755666775566666775677556667666776655655666666776656555655554555655655555655555
-- 038:555555556666666666666666666666655666767755755656666677656666666667755666567667567555555555566775566677566667755675566676675575565555555555666666766776566656766755755665666756677556667756666775667556667667557665555565555556555555555555555555
-- 039:655555555555555555555555555566666666665666666666665566566675577566667756677655555556667555756667667565665666645556666676676756656665557755555555666755667566666755775666766776566566666765666667667675665666766555556555555456556555555555555555
-- 040:665555555555665555556655555555555555554465555555666666666666666666577666666546556666666665666656676775756566645656666666765666666755755555555555566775666755675667667575656666775666666676556666675676666665655555545555656445555555555555555555
-- 041:55555555555555555555665555566555552222222222255555555555555555555554555555554655555555555455555665666666aaa6545566757755555555555554666756756675755666666765666767575656675676666566666666666666666555555544564555565555655545555555555555555555
-- 042:555555566555555555555555555555522222222222222255555655556555655565546555655646565555565564555555545555aaaaaa545655666666666765656664765666666565667576666666656666666665555555555655555555555555556555565546555555456555555565555555555555555555
-- 043:555555566555555665555555556622222277777677777222555555555555555555546555555556555555555554555555545555aa000aa45556555555554555dd6654666666655544555555555555546655556556556555654656555556555555555555555545555555555555555456555555555555555555
-- 044:55555555555555555555555555222227777777766777772222256655555655556545655655565555556555655456556554555a000000a4555555555555465400d645556565656544555555555555545555555555555555554655556555655555655556545546555555655555555455565555555555555555
-- 045:5665555555665555555555555222777777777776677777777222255555555555555545555555555555555555545555555465a00000000455555565555445d4000545555555555444565555555565545556556555555555554655555555555555555555555445546555555555555655555555555555555555
-- 046:5555555555555555555555552222277777777777677777777777225555555555555546555555555655565555545555b5546aa0000000045556565b55554d04000d45555555555544556555555555545655655555555555554656556555555555555555555465555555555555554655555555555555555555
-- 047:55555555555555555555555522277777777777776777777777777225555555555555455555555465b5555555555555b5546aa00000000455555b5b55554d04000d45555b55555564555555555555565555555555555555554655555555555555555555555455555554555555554555555555555555555555
-- 048:55555555555555555665552222777777777777776777777777777722256555554545455556554465c5555565555555c5446aa0000000045555b5bc55b54d04000b4555bc55555564555555555555565555555555555555556555555556555655555545445455555556555655556555555555655555544544
-- 049:5555555555555555555552227777777777777777667777777777777722555555555546555555546555555b5555555b55546a00b00000045556cbc555c54d0b00c06555cbc5555564555555555555465555555555555555546565555555555555555555554455455555555655556555556555655555545544
-- 050:655665555555555555522222277777777777777776aaaaaaaaaaaaaaa2255555555546555555556565555c5555555c55546a00b000000455555bc65b5540bc00006555bc555b5565555555554555465555555555555555546555555555555555555555554655555555555555545555555556655555545545
-- 051:655665555555555555552227777777777777777776aaaaaabbbaaaaaaa22255455555455555555655555b55565455c5555aa0bc000000445555c555c5540bc00006556c555b55546555555555545465555555555555545546555555555565555545555554555555545555555545555555555555555555545
-- 052:655555555555555555552277777777777777777776aaaabbbbbbbaaaaaa2255555455455555455555555c5555545555455aabc000000044556555b55554bc50000655b5555c45545555555555555465556555555555555546565565555555555555545554555555565555555566555555555555555555555
-- 053:6655555555555555552222777777777777777777766aabbbbbbbbbaaaaaa22555555546555555555555b65555545555555aac0000000044555556c45554c05000065bc555b555545555555555455455555565555555555545555555555555555555555554554554555555555466555555555555555555555
-- 054:6655555555555555555222777777777777777777766aaabbbbbbbbaaaaaa22555555545555555555655c55555545555555aac0000000004555555555554005000d45c5554c555445555555555555456555555545555555565555555565555555555555546555555555555555455555555555555555555555
-- 055:6655556555555665522227777777777777777777776aaabbbbbbbaaaaaaa22555455545555555546555c555655455555554a00000000004555555545544d05000d45655555555445555554554555455555555555555555465655555555554555555555545555555455555555655555555555555555555554
-- 056:6665566555555555522227777777777777777777776bbaabbbbbaaaaaaaa22255555546555455546555555555545555555bc000000000045555555555b4d05000d45555555555445655555555555655555555545545555465555555655555555555555545555555655555555655555555555555555555554
-- 057:46655555555555555522277777777777777777777666bbaaabbaaaaaaaaaa2225555556555555546565555655545555555caa00000000045556555555c6d05000545555554545445555555555555655655545555555555465555555555555555555555545545555555555554555555555555555555555544
-- 058:56655555555555555522227777777777777777776766bbbbaaaaaaaaaaaaaa224555454555555556555555555555555555caa00000000045555c55555c650500d445555555555445555555455455655555555555555555465555555555555554455545445555555565555554555555555555555555555544
-- 059:56665555555555555522227777777777777777667776bbbbbabaaaaaaaaaaa2255555545555545565555555555555555554aa0000000004555554555b565d5005b4555555b554445555555555554655555555555554555455555555545555555555555455555546555555456555555565555555555555544
-- 060:55665555555555555552227777777777777777767776bbbbbbbaaaaaaaaaaa22555555455555555555555555455555555546a0000000004555555555456555d44c454444bc555445555555454554655555555554555555655555555555555555555555455555555555555545555555655555555555555446
-- 061:556655566555555552222777777777777777777677766bbbbbbbaaaaaaaaaa22555555455555555555b65555555555545546aa000000004555555555555445233345423bc3344444455555555554656555555555555554655555555555555555545555455655555565555545555555555555455555555446
-- 062:554665555555555552222777777777777777777776766bbaaabbbbbbaaaaaaa2255555465555555555c5555b5555555555465aa000000a45455554442333352333432423334b4243423344444454555555555555545454655555545554555455555554455555545565555566556555555555455555555446
-- 063:555665555555555555222777777777777777777777666baaaaabbbbbaaaaaaa2255555465555455465c5555555545555554656a00000a5454555542334233523234342b233334343333342333442444444455555555554655555555555555555555554555555565554555565555555555555455555554466
-- 064:555666555555555555222277777777777777777777776bbbbaaaaaaaaaaaaaa225555454555455546555555b5554555454465555aaaa444533444444444425b3334423c343432323342342334233423423334444444554655555555555554554555554555555455655545455555555555555555555554466
-- 065:455466555555665555222277777777777777777777776bbbbbbaaaaaaaaaaa2255455554555555546555555c55545455b5565544423333453232333344444bc55443233424223342334233423334242323334323233334444444555555555555555554556555555555555655555555555555555455554665
-- 066:5555665555555555555222777777777777777777777766abbbbbaaaaaaaaaa2255555554555555556556555555545555c4454233b3423245333342b333434b444445444423334433423342333423423343443232333342333343434444444555555544555555455555555655555555555555554455544665
-- 067:5555666555555555555222277777777777777777777776abbbbaaaaaaaaaaa2255444443445555556555555555545444c334342bb3233345323333c343233c334444444444444423342333422342334342423233334323333334323323342244444445555555655555554555555555555555554455544665
-- 068:5555566555555555555222277777777777777777777776abbbaaaaaaaaaaaa224233334342444555555555544444534423342333c423424533343bc3233334323343434244444434234223334233342334233434234233333443232333343233334344555555555555554555556555555555554555446655
-- 069:5555566555555555555522277777777777777777777776bbbaaaaaaaaa223333344323333333444455444424223253442342233b4233344534233c33424223333344323333444432333343424223233422342233342333423342334334242333333443565555555555556655556555555555555555446655
-- 070:55555466555555555555222777777777777777777777766baaaa223342233423333442342333433454555333334253333433434c3323344534233334233342233443333544442333433432232333334223333433434233233422342233342333422334555554554555546655555555555555555555446555
-- 071:555555665555555555555522227777777777777777777732333334342342332334423442333442333444444233335422423233333432334534334323333343423443355442234423334423334423442334334224232333334323333343343223333434455556555555445555555555555555555554466555
-- 072:555555665555566555555522227777777777777722334344234232333334322333333334323333343423444444335233422333442333444534233343442442323345544223333333443233333434234223233342334223334223334423342333434423455555555555565555655555555555555554466555
-- 073:555555466555555555555552227777777733223323334224423333342233442333422333344234223334334444445333333422333334334542233233342344224454423334423334233333442342333333342323323333344223333343442422322334455455555555565555655545555555555554665566
-- 074:555555566555555555555444422222334334424423233333443233333333343223333343442442332333422344444554423333422334234543344242232333444452333333333432233333434424423323334233442233342233334223442333433442445565555555455555555545555544555544665566
-- 075:554555566655555444444432233333434424422323334423344223334423333442334223334334424223233333344445553343344322334534344244223444444233442233342233334423342233343344242332333333432333333433443223333333445555555555455555555555555545555544665566
-- 076:555554546544444422333442233422333433442442332343334432333333433343223332343342244233233344233444445544233334424534223334344444223223333344323333334334432233323433422442332333422334422333442333344223445555555555655555555555555545555546655666
-- 077:555555545522332333333442233333343342342233233344223442233334423333442233422333433422442232333334444444433333334522333335544423422332333442334422333342233334423344223334334224423323333344322333333433344465555554555555555555555545555446655555
-- 078:655555542233333442233442233334223333344233422333443344232233233333344223333333433443223332333344234444444434424534425554442333333422344223334333443322332333333442233333344334232233323333422344223333344655555454555555555555555555555446555555
-- 079:455555422342233334333443322332333333343223333334434423422332333344233442233334422333442233344233333344444444424543555444233323333334432233333343344244223323334422334422333344233334422333422333433442244555555556555555555555555555554466555555
-- 080:566555422333333433442342233233334423344222333344233333442233442333343344224423323343334432233333334333433444444555544224422332333342233442233333422333334422344223334433442342233233333344322333333343344455555556555555555555555555554466555555
-- 081:545554223333344233333442233442233344334422422332333333344323333333333344332233323343342244222333333442233444444544422333334422334423333443344234223223333333442233333334333443422333233334422442233333334455555545555555545555555555554665555555
-- 082:555554224223323333333443223333333433344322233323343344224422332333344233344223333442233333442223442233334333444542233233333334432233333334333443222333233434422344223323334422333442233334422333334422334445555565555555545555555555544665555555
-- 083:556542223333334434422442233323333442333442233333442233333442233442233334334442342233233333334432233333333433344322333323343344224422332333344223334422333344223333344422334423333443344223422332333333344345545565555545555555555555544665555555
-- 084:554542233333344223333442233344223333433442224422332334333444332333333333333443223333333443344234222332233334223344422333334422333334422333442233334334422342233233333334443223332333333334432233333334334445545455555545555544555555546655555555
-- 085:555522234422333344333442342233223333333344223333333344334433422333223333442234442233333344223333442223334422333333344222442233233433334433223332333333334432233333334443344334223332233334422344222333333444554455555555555545555555446655555555
-- 086:554432233333333433344432223333333433442244222332333344422334442233333442233333344223344422333344334422342233223333333444322333333334333443322333323333344222442223323333442233344422333344222333334442233444555655555555555545555555446555555555
-- 087:554222333223333442233442223333334422333344422333344223333433444223442233233433334443322333233333333344222333333344333442342223322333334422344422333333444223333444223334422233334334442244223333334333344334554555555555555555555555466555555555
-- 088:544223333334422333333442223344223333343334422344223322333333344432233333333333334433222333323343344422442223323333344223334442233333442233333344422334442233334433344223422332233333333444223333333334333444454555555555555555554554466556555555
-- 089:542223442223333443334442332233322333333334442233333333344333443342233332333334442234422233333334422233334422233334422333333344422234422333334433344433422333233333333344322333333333443344234222333223333344456555555555555555554554465566555555
-- 090:443322333323333333334432223333333344334442342223332233334442233444223333333442233333444222333442233333433344222442223323333333344432223333333333333444322233333333433344234422233223333344223334422233333344456555555555555555554544665566555555
-- 091:422233333333443344223442223332333334422333444222333334442233333344422333442223333443334422244223332333333333443222333333333433334433222333323334334442244422233233333442223334442233333344223333333442223344445555555555555555554544665566555555
-- 092:422233233333442223334442223333344422333333344222334442233333443334442344223322233333333444322333333333343334443322233332233433444223444223332333344422333344422233334442233333334442223444223333344333344223455555555555555555555546655555555555
-- 093:222333334442233333334442223344223333344433344423322233222333333333444223333333333443334423322233332233333444223444222333333334422233334442223333444223333333344422234422233333443333444334223332233333333334455555555555555555555446655555555555
-- 094:222344422333334443334442332223332233333333344422233333333334433344233422233322333333442223444222333333334422233334442223333444223333343334422234442233333344333344433322333223333333333444222333333333444334444555554554555555555446555555555555
-- 095:334223332233333333334442223333333333443334423342223332223333344422334442223333333444223333344422233333442223333333344422234442233333344333344433322333322333333333344322233333333344333444234422333322333334444555555554555555555466555555555555
-- 096:223333333333443334423342223333223333334422234442223333333344422233333444222333344422333333333444222344222333333443333444233222333223333333333444222333333333344433444234422233322233333442223344422233333333444555555555555555554466555555555555
-- 097:233332223333344422234442223333333334422233333444222333334422233333333444422234422233333344333344423342233332233333333334442223333333333444334442334222333322333333442223344422233333333442223333344422223333444455555555554455554465555555555555
-- 098:233333333344222333334442223333344422233333333444222334442233333344333344442332223332233333333333444222333333333344433344233422233332223333344422234442222333333334442233333344422233333442223333343334442223444455555555554555554665555555555555
-- 099:333333444222333333334442223344422233333444333344423342223332233333333334444222333333333334433344433322223333223334334442223444222333333333444222333334442223333344422233333333444422234442223333334433334442333455555555554555544665555555555555
-- 100:333442223333334433334442234422233322333333333344432223333333333344333344433322233333233334334442223444222333233333344422233334442223333334442223333333344422223344422333333444333444423342223332233333333333444445555555555555546655555555555555
-- 101:442223332233333333334443322233333333333433333444332223333332333443334442244442223332233333344222333344422223333334442223333333344422233344422233333344333444422344222333223333333333444432223333333333343333344445555455555555446655555555555555
-- 102:233333233333333333344432223333333333344333444223442222333222333334442223334444222333333334442223333334444222333344422233333343333444222444222333223334333333444333223333333333333333334443322233333323334433344445554555555555446555555555555555
-- 103:333333333344433344423342223333322333333444222334444222333333333444222333333444422233333444222333333333344422223444222332333343333334443332223333223333333333334443222333333333334443334442334422233332223333344444555555555555466555555555555555
-- 104:333323333433344422244442222333233333344422233333444222233333344422233333333344442223344422233333344433334444233422233322233333333333444422223333333333344433344423342222333332233343334442223444422233333333334444555555555554466555555555555555
-- 105:322333333444422233344442222333333344422233333333444422233334442223333334433334442223442223332223334333333344433222333333333333433333444333222233333323334433344422244442223333233333344442223333444422233333334444555545555554465555556555555555
-- 106:333333444222233333344442222333344422223333334333344422224442222333233334333333444333222233332233333333333344433222333333333334443334442233442222333222333333444222233344422223333333344422223333333444222233334444455545555554665555556655555555
-- 107:333444222233333333344442222334442223333333443333344442334222333322233333333333344432223333333333333443333444333422223333322333333344422223444422223333333333444222333333444422233333344422233333333333444222233444455545555544665555556655555555
-- 108:444222233333344333344442223442223333223333333333344443322233333333333334333333444332222333333323333433344442224444222333322333333444422233334444222233333334442222333333334444222233344422233333334443333444222344455555555544655555566655555555
-- 109:222333323334433333344443332222333322333333333333344443222233333333333444333344422344222233332223333333444222233444422223333333334444222333333344442222333334442223333333433334444222244422233332333343333333444333445555555546655555556555555555
-- 110:333322233333333333344443222333333333333334333334444333222233333322333343334442222344422223333233333334442223333334444222233333344442223333333333444422223344422223333334444333344442233422233332223333333333334444345555455446555555555555555555
-- 111:333233333333333333444332222333333333333444333444222344422223333223333333444222233344442222333333333444422233333333444422223333444422233333334433334444222344422233332233333333333344443322233333333333333333333344445555455466555555555555555555
-- 112:333333334443333444433342222333332223333333344422223444422223333333333344442223333334444222233333334442222333333433334444222234444222333333334433333344442333222233332223333333333333444422223333333333333444333344444555454466555555555555555555
-- 113:333333344333444422244442222333322333333344442223333344442222333333334444222333333333444422223333444422233333334443333444422234442223333223333333333333444433222333333333333334333333444433322223333333233334433344444555554465555555555555555555
-- 114:223333333344422223344442222333333333334444222333333344442222333333444422223333333333344442222234442222333233334443333344444333322233333223333333333333334443222233333333333334443333444423344222233333222333333344444455554665555555555555555555
-- 115:333333344442223333344442222333333333444222233333333344444222233334442222333333344433334444222334422223332223333333333333444433222333333333333333433333344443332222333333323333343333444222244444222233332333333334444455544665555555555555555555
-- 116:333344442222333333344442222333333444422223333333433334444222233444222233333333344333333444423333222333332223333333333333344443222233333333333334444333444422334422223333322233333333444222233344442222333333333334444455544655555555555555555555
-- 117:334442222333333333344442222333344442222333333344433334444422234442223333222333333333333344443322223333333333333334333333444433322223333333323333443333444422244444222233332233333333444222233333444442222333333334444445546655555555555555555555
-- 118:444222333333333333444442222334444222333333333444333333444423333222233332223333333333333334444222223333333333333344433334444233344222233333222233333334444222233444442222333333333334444222233333333444422223333334444445446555555555555555555555
-- 119:222233333334443333444442222444222233332223333433333333444443322223333333333333334333333344433322222333333332333344333344442222444422223333322333333334444222333334444422223333333334444222233333333334444222223333444445466555555555555555555555
-- 120:233333333444433333444442333422223333222233333333333333344442222233333333333333344433334444233342222233333322233333333444422223344444222233333333333344442222333333344444222233333334444222233333333333344444222233444444466555555555555555555555
-- 121:332223333433333333444443332222333333323333333333333334444333222233333333333333444333344442223444222223333222333333334444222233334444422222333333333344422223333333333444442222333334444222233333333443333344442222344444465555555555555555555555
-- 122:222233333333333333444443222233333333333333334433333344443333222223333332223333333334444222233444422222333333333333344442222333333344442222233333333444422223333333333334444422223334444222233333333444433333444442233344665555555555555555555555
-- 123:233333333333333333444432222233333333333333444433334444223344422223333322223333333344442222333344442222233333333333444422223333333334444422222333334444222233333333443333344444222234444222233332233334433333333444433334565556655555555555555555
-- 124:333333344333333444433332222233333333233333443333444422224444422222333332333333333444422223333344444222223333333334444222233333333333344442222233334444222233333333444433333444442233444222233332222333333333333334444434555556655555555555555555
-- 125:333334443333344442333442222233333322233333333344442222333444442222333333333333344442222333333334444422222333333344442222333333333333334444422222344442222333333333344433333334444433332222233333222333333333333333344445555556555555555555555555
-- 126:333444333334444222344442222233333222333333334444222223333444442222233333333333444422223333333333444442222233333444422222333333334443333344442222244442222333322233333433333333344444332222233333332333333334333333334444445555555555555555555555
-- 127:333433334444422223444442222233333233333333444442222333333344444222233333333344442222233333333333344444222223334444222223333333344443333334444422333422222333322223333333333333333444442222233333333333333334443333334444445555555555555555555555
-- 128:333333444422222333444442222233333333333344444222233333333344444222223333333444422223333333334333334444422222344442222233332333334443333333444443333322223333332223333333333333333344443322222333333333333333444433334444445555555555555555555555
-- 129:333344442222233333444442222233333333333444422223333333333344444222222333344444222233333333344433333444442222344422222333322223333333333333334444433222223333333333333333343333333344443333222223333333322333334433334444444555555555555555555555
-- 130:334444222233333333444442222233333333344442222233333333333334444422222333444422222333333333444433333344444223334422223333322223333333333333333444443222223333333333333333344433333344443333442222233333332223333333333444444555555555555455555555
-- 131:444422223333333333444442222233333334444222223333333334333334444422222244444222233333233333344333333334444433333222233333332233333333333333333344443322222333333333333333344443333444442233444422222333332222333333333444444555555555554455555555
-- 132:422222333333333333444442222233333444442222333333333444333333444442222344442222333332223333343333333333444443332222333333333333333333443333333444443332222223333333332333334443333444442222444444222223333322333333333444444455555555554445555555
-- 133:222233333333333334444442222233344444222233333333344444333333444442223334222223333222223333333333333333344444322223333333333333333334444333333444433333422222333333322223333333333444442222334444422222233333333333333344444455555555554455555555
-- 134:223333333334333334444442222234444422222333323333334433333333344444333332222333333322233333333333333333344444322222233333333333333334444333334444422334442222223333322222333333333444422222333344444222222333333333333344444455555555555455555555
-- 135:333333333444333334444442222344442222233332222333334333333333344444333222223333333333333333333433333333444443332222223333333332333333444333344444222234444422222333333223333333333444422222333333444442222223333333333344444445555555555455555555
-- </SCREEN>

-- <PALETTE>
-- 000:0000001c181c3838385d5d5d7d7d7dbababad6d6d6fffffff21018ff55553499ba65eef6b2f6faff8d18ffbe3c283040
-- </PALETTE>

